

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Aug 31 16:11:10 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     
    40                           ; Version 1.41
    41                           ; Generated 25/01/2017 GMT
    42                           ; 
    43                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F877A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134                           
   135                           	psect	strings
   136  0800                     __pstrings:	
   137  0800                     stringtab:	
   138  0800                     __stringtab:	
   139  0800                     stringcode:	
   140                           ;	String table - string pointers are 1 byte each
   141                           
   142  0800                     stringdir:	
   143  0800  3008               	movlw	high stringdir
   144  0801  008A               	movwf	10
   145  0802  0804               	movf	4,w
   146  0803  0A84               	incf	4,f
   147  0804  0782               	addwf	2,f
   148  0805                     __stringbase:	
   149  0805  3400               	retlw	0
   150  0806                     __end_of__stringtab:	
   151  0806                     sin@coeff_a:	
   152  0806  34F4               	retlw	244
   153  0807  344A               	retlw	74
   154  0808  3448               	retlw	72
   155  0809  3495               	retlw	149
   156  080A  3495               	retlw	149
   157  080B  34C7               	retlw	199
   158  080C  34C1               	retlw	193
   159  080D  34DC               	retlw	220
   160  080E  3445               	retlw	69
   161  080F  34DC               	retlw	220
   162  0810  346D               	retlw	109
   163  0811  34C3               	retlw	195
   164  0812  34B3               	retlw	179
   165  0813  3433               	retlw	51
   166  0814  3440               	retlw	64
   167  0815                     __end_ofsin@coeff_a:	
   168  0815                     sin@coeff_b:	
   169  0815  3434               	retlw	52
   170  0816  3401               	retlw	1
   171  0817  3448               	retlw	72
   172  0818  349D               	retlw	157
   173  0819  34B0               	retlw	176
   174  081A  3445               	retlw	69
   175  081B  3400               	retlw	0
   176  081C  34DA               	retlw	218
   177  081D  3442               	retlw	66
   178  081E  3400               	retlw	0
   179  081F  3480               	retlw	128
   180  0820  343F               	retlw	63
   181  0821                     __end_ofsin@coeff_b:	
   182  000E                     _TMR1	set	14
   183  000B                     _INTCONbits	set	11
   184  0009                     _PORTE	set	9
   185  0008                     _PORTD	set	8
   186  0007                     _PORTC	set	7
   187  0006                     _PORTB	set	6
   188  0005                     _PORTA	set	5
   189  001E                     _ADRESH	set	30
   190  0010                     _T1CONbits	set	16
   191  001F                     _ADCON0bits	set	31
   192  001A                     _RCREG	set	26
   193  0019                     _TXREG	set	25
   194  000C                     _PIR1bits	set	12
   195  0018                     _RCSTAbits	set	24
   196  0034                     _RB4	set	52
   197  00C1                     _OERR	set	193
   198  0089                     _TRISE	set	137
   199  0088                     _TRISD	set	136
   200  0087                     _TRISC	set	135
   201  0086                     _TRISB	set	134
   202  0085                     _TRISA	set	133
   203  009E                     _ADRESL	set	158
   204  009F                     _ADCON1bits	set	159
   205  008C                     _PIE1bits	set	140
   206  0098                     _TXSTAbits	set	152
   207  0099                     _SPBRG	set	153
   208  0821                     STR_1:	
   209  0821  340A               	retlw	10
   210  0822  340D               	retlw	13
   211  0823  3420               	retlw	32	;' '
   212  0824  342D               	retlw	45	;'-'
   213  0825  342D               	retlw	45	;'-'
   214  0826  342D               	retlw	45	;'-'
   215  0827  342D               	retlw	45	;'-'
   216  0828  342D               	retlw	45	;'-'
   217  0829  342D               	retlw	45	;'-'
   218  082A  342D               	retlw	45	;'-'
   219  082B  3420               	retlw	32	;' '
   220  082C  3445               	retlw	69	;'E'
   221  082D  3453               	retlw	83	;'S'
   222  082E  3454               	retlw	84	;'T'
   223  082F  344F               	retlw	79	;'O'
   224  0830  3455               	retlw	85	;'U'
   225  0831  3452               	retlw	82	;'R'
   226  0832  344F               	retlw	79	;'O'
   227  0833  3420               	retlw	32	;' '
   228  0834  3444               	retlw	68	;'D'
   229  0835  3445               	retlw	69	;'E'
   230  0836  3420               	retlw	32	;' '
   231  0837  3450               	retlw	80	;'P'
   232  0838  3449               	retlw	73	;'I'
   233  0839  344C               	retlw	76	;'L'
   234  083A  3448               	retlw	72	;'H'
   235  083B  3441               	retlw	65	;'A'
   236  083C  3420               	retlw	32	;' '
   237  083D  342D               	retlw	45	;'-'
   238  083E  342D               	retlw	45	;'-'
   239  083F  342D               	retlw	45	;'-'
   240  0840  342D               	retlw	45	;'-'
   241  0841  342D               	retlw	45	;'-'
   242  0842  342D               	retlw	45	;'-'
   243  0843  342D               	retlw	45	;'-'
   244  0844  3420               	retlw	32	;' '
   245  0845  340A               	retlw	10
   246  0846  340D               	retlw	13
   247  0847  3420               	retlw	32	;' '
   248  0848  3400               	retlw	0
   249  0849                     STR_7:	
   250  0849  3431               	retlw	49	;'1'
   251  084A  3430               	retlw	48	;'0'
   252  084B  3430               	retlw	48	;'0'
   253  084C  342E               	retlw	46	;'.'
   254  084D  3430               	retlw	48	;'0'
   255  084E  3420               	retlw	32	;' '
   256  084F  3448               	retlw	72	;'H'
   257  0850  347A               	retlw	122	;'z'
   258  0851  340A               	retlw	10
   259  0852  3400               	retlw	0
   260  0853                     STR_8:	
   261  0853  3432               	retlw	50	;'2'
   262  0854  3430               	retlw	48	;'0'
   263  0855  3430               	retlw	48	;'0'
   264  0856  342E               	retlw	46	;'.'
   265  0857  3430               	retlw	48	;'0'
   266  0858  3420               	retlw	32	;' '
   267  0859  3448               	retlw	72	;'H'
   268  085A  347A               	retlw	122	;'z'
   269  085B  340A               	retlw	10
   270  085C  3400               	retlw	0
   271  085D                     STR_4:	
   272  085D  3431               	retlw	49	;'1'
   273  085E  3430               	retlw	48	;'0'
   274  085F  342E               	retlw	46	;'.'
   275  0860  3430               	retlw	48	;'0'
   276  0861  3420               	retlw	32	;' '
   277  0862  3448               	retlw	72	;'H'
   278  0863  347A               	retlw	122	;'z'
   279  0864  340A               	retlw	10
   280  0865  3400               	retlw	0
   281  0866                     STR_5:	
   282  0866  3432               	retlw	50	;'2'
   283  0867  3430               	retlw	48	;'0'
   284  0868  342E               	retlw	46	;'.'
   285  0869  3430               	retlw	48	;'0'
   286  086A  3420               	retlw	32	;' '
   287  086B  3448               	retlw	72	;'H'
   288  086C  347A               	retlw	122	;'z'
   289  086D  340A               	retlw	10
   290  086E  3400               	retlw	0
   291  086F                     STR_6:	
   292  086F  3436               	retlw	54	;'6'
   293  0870  3430               	retlw	48	;'0'
   294  0871  342E               	retlw	46	;'.'
   295  0872  3430               	retlw	48	;'0'
   296  0873  3420               	retlw	32	;' '
   297  0874  3448               	retlw	72	;'H'
   298  0875  347A               	retlw	122	;'z'
   299  0876  340A               	retlw	10
   300  0877  3400               	retlw	0
   301  0878                     STR_2:	
   302  0878  3431               	retlw	49	;'1'
   303  0879  342E               	retlw	46	;'.'
   304  087A  3430               	retlw	48	;'0'
   305  087B  3420               	retlw	32	;' '
   306  087C  3448               	retlw	72	;'H'
   307  087D  347A               	retlw	122	;'z'
   308  087E  340A               	retlw	10
   309  087F  3400               	retlw	0
   310  0880                     STR_3:	
   311  0880  3435               	retlw	53	;'5'
   312  0881  342E               	retlw	46	;'.'
   313  0882  3430               	retlw	48	;'0'
   314  0883  3420               	retlw	32	;' '
   315  0884  3448               	retlw	72	;'H'
   316  0885  347A               	retlw	122	;'z'
   317  0886  340A               	retlw	10
   318  0887  3400               	retlw	0
   319                           
   320                           ; #config settings
   321  0000                     
   322                           	psect	cinit
   323  0015                     start_initialization:	
   324  0015                     __initialization:	
   325                           
   326                           ; Clear objects allocated to BANK0
   327  0015  01ED               	clrf	__pbssBANK0& (0+127)
   328  0016  01EE               	clrf	(__pbssBANK0+1)& (0+127)
   329                           
   330                           ; Clear objects allocated to BANK1
   331  0017  1383               	bcf	3,7	;select IRP bank0
   332  0018  30BF               	movlw	low __pbssBANK1
   333  0019  0084               	movwf	4
   334  001A  30D6               	movlw	low (__pbssBANK1+23)
   335  001B  120A  158A  2292   	fcall	clear_ram0
   336  001E                     end_of_initialization:	
   337                           ;End of C runtime variable initialization code
   338                           
   339  001E                     __end_of__initialization:	
   340  001E  0183               	clrf	3
   341  001F  120A  158A  2B7E   	ljmp	_main	;jump to C main() function
   342                           
   343                           	psect	bssBANK0
   344  006D                     __pbssBANK0:	
   345  006D                     _contador:	
   346  006D                     	ds	1
   347  006E                     _Display:	
   348  006E                     	ds	1
   349                           
   350                           	psect	bssBANK1
   351  00BF                     __pbssBANK1:	
   352  00BF                     _Display1:	
   353  00BF                     	ds	5
   354  00C4                     _tempo:	
   355  00C4                     	ds	3
   356  00C7                     _errno:	
   357  00C7                     	ds	2
   358  00C9                     _contagens:	
   359  00C9                     	ds	2
   360  00CB                     _ADCResult:	
   361  00CB                     	ds	2
   362  00CD                     _c:	
   363  00CD                     	ds	2
   364  00CF                     _a:	
   365  00CF                     	ds	2
   366  00D1                     _simulacao:	
   367  00D1                     	ds	1
   368  00D2                     _freq:	
   369  00D2                     	ds	2
   370  00D4                     _fs:	
   371  00D4                     	ds	2
   372                           
   373                           	psect	clrtext
   374  0A92                     clear_ram0:	
   375                           ;	Called with FSR containing the base address, and
   376                           ;	W with the last address+1
   377                           
   378  0A92  0064               	clrwdt	;clear the watchdog before getting into this loop
   379  0A93                     clrloop0:	
   380  0A93  0180               	clrf	0	;clear RAM location pointed to by FSR
   381  0A94  0A84               	incf	4,f	;increment pointer
   382  0A95  0604               	xorwf	4,w	;XOR with final address
   383  0A96  1903               	btfsc	3,2	;have we reached the end yet?
   384  0A97  3400               	retlw	0	;all done for this memory range, return
   385  0A98  0604               	xorwf	4,w	;XOR again to restore value
   386  0A99  2A93               	goto	clrloop0	;do the next byte
   387                           
   388                           	psect	cstackBANK3
   389  0190                     __pcstackBANK3:	
   390  0190                     ?___aldiv:	
   391  0190                     ___aldiv@divisor:	
   392                           ; 4 bytes @ 0x0
   393                           
   394                           
   395                           ; 4 bytes @ 0x0
   396  0190                     	ds	4
   397  0194                     ___aldiv@dividend:	
   398                           
   399                           ; 4 bytes @ 0x4
   400  0194                     	ds	4
   401  0198                     ___aldiv@counter:	
   402                           
   403                           ; 1 bytes @ 0x8
   404  0198                     	ds	1
   405  0199                     ___aldiv@sign:	
   406                           
   407                           ; 1 bytes @ 0x9
   408  0199                     	ds	1
   409  019A                     ___aldiv@quotient:	
   410                           
   411                           ; 4 bytes @ 0xA
   412  019A                     	ds	4
   413  019E                     ?_USART_Init:	
   414  019E                     USART_Init@BaudRate:	
   415                           ; 1 bytes @ 0xE
   416                           
   417                           
   418                           ; 4 bytes @ 0xE
   419  019E                     	ds	4
   420  01A2                     USART_Init@Mode:	
   421                           
   422                           ; 2 bytes @ 0x12
   423  01A2                     	ds	2
   424  01A4                     USART_Init@BR:	
   425                           
   426                           ; 2 bytes @ 0x14
   427  01A4                     	ds	2
   428                           
   429                           	psect	cstackBANK1
   430  00A0                     __pcstackBANK1:	
   431  00A0                     sin@y:	
   432                           
   433                           ; 3 bytes @ 0x0
   434  00A0                     	ds	3
   435  00A3                     _sin$889:	
   436                           
   437                           ; 3 bytes @ 0x3
   438  00A3                     	ds	3
   439  00A6                     sin@x2:	
   440                           
   441                           ; 3 bytes @ 0x6
   442  00A6                     	ds	3
   443  00A9                     sin@sgn:	
   444                           
   445                           ; 1 bytes @ 0x9
   446  00A9                     	ds	1
   447  00AA                     _ISR$886:	
   448                           
   449                           ; 3 bytes @ 0xA
   450  00AA                     	ds	3
   451  00AD                     _ISR$887:	
   452                           
   453                           ; 3 bytes @ 0xD
   454  00AD                     	ds	3
   455  00B0                     _ISR$888:	
   456                           
   457                           ; 3 bytes @ 0x10
   458  00B0                     	ds	3
   459  00B3                     ISR@amostra:	
   460                           
   461                           ; 3 bytes @ 0x13
   462  00B3                     	ds	3
   463  00B6                     ISR@low:	
   464                           
   465                           ; 1 bytes @ 0x16
   466  00B6                     	ds	1
   467  00B7                     ISR@high:	
   468                           
   469                           ; 1 bytes @ 0x17
   470  00B7                     	ds	1
   471  00B8                     ISR@inteiro:	
   472                           
   473                           ; 2 bytes @ 0x18
   474  00B8                     	ds	2
   475  00BA                     ??_ADC_Init:	
   476  00BA                     ??___aldiv:	
   477                           ; 1 bytes @ 0x1A
   478                           
   479                           
   480                           ; 1 bytes @ 0x1A
   481  00BA                     	ds	1
   482  00BB                     ??_USART_Init:	
   483                           
   484                           ; 1 bytes @ 0x1B
   485  00BB                     	ds	4
   486  00BF                     ??_main:	
   487                           
   488                           	psect	cstackCOMMON
   489  0070                     __pcstackCOMMON:	
   490                           ; 1 bytes @ 0x1F
   491                           
   492  0070                     ?___ftge:	
   493  0070                     ?_USART_WriteChar:	
   494                           ; 1 bit 
   495                           
   496  0070                     ??_USART_WriteChar:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ?_USART_WriteString:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ?_USART_ReceiveChar:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0070                     ?_ADC_Init:	
   506                           ; 1 bytes @ 0x0
   507                           
   508  0070                     ?_ADC_Read:	
   509                           ; 1 bytes @ 0x0
   510                           
   511  0070                     ?_ISR:	
   512                           ; 1 bytes @ 0x0
   513                           
   514  0070                     ?_main:	
   515                           ; 1 bytes @ 0x0
   516                           
   517  0070                     ?___bmul:	
   518                           ; 1 bytes @ 0x0
   519                           
   520  0070                     ?___ftpack:	
   521                           ; 1 bytes @ 0x0
   522                           
   523  0070                     ?_frexp:	
   524                           ; 3 bytes @ 0x0
   525                           
   526  0070                     ?___ftneg:	
   527                           ; 3 bytes @ 0x0
   528                           
   529  0070                     USART_WriteChar@USARTData:	
   530                           ; 3 bytes @ 0x0
   531                           
   532  0070                     ___bmul@multiplicand:	
   533                           ; 1 bytes @ 0x0
   534                           
   535  0070                     ADC_Read@channel:	
   536                           ; 1 bytes @ 0x0
   537                           
   538  0070                     ___ftpack@arg:	
   539                           ; 2 bytes @ 0x0
   540                           
   541  0070                     ___ftge@ff1:	
   542                           ; 3 bytes @ 0x0
   543                           
   544  0070                     ___ftneg@f1:	
   545                           ; 3 bytes @ 0x0
   546                           
   547  0070                     frexp@value:	
   548                           ; 3 bytes @ 0x0
   549                           
   550                           
   551                           ; 3 bytes @ 0x0
   552  0070                     	ds	1
   553  0071                     ??_USART_WriteString:	
   554  0071                     ??___bmul:	
   555                           ; 1 bytes @ 0x1
   556                           
   557                           
   558                           ; 1 bytes @ 0x1
   559  0071                     	ds	1
   560  0072                     ??_ADC_Read:	
   561  0072                     USART_WriteString@str:	
   562                           ; 1 bytes @ 0x2
   563                           
   564  0072                     ___bmul@product:	
   565                           ; 1 bytes @ 0x2
   566                           
   567                           
   568                           ; 1 bytes @ 0x2
   569  0072                     	ds	1
   570  0073                     ??_USART_ReceiveChar:	
   571  0073                     ??___ftneg:	
   572                           ; 1 bytes @ 0x3
   573                           
   574  0073                     ___bmul@multiplier:	
   575                           ; 1 bytes @ 0x3
   576                           
   577  0073                     ___ftpack@exp:	
   578                           ; 1 bytes @ 0x3
   579                           
   580  0073                     frexp@eptr:	
   581                           ; 1 bytes @ 0x3
   582                           
   583  0073                     ___ftge@ff2:	
   584                           ; 1 bytes @ 0x3
   585                           
   586                           
   587                           ; 3 bytes @ 0x3
   588  0073                     	ds	1
   589  0074                     ??_frexp:	
   590  0074                     USART_ReceiveChar@USARTData:	
   591                           ; 1 bytes @ 0x4
   592                           
   593  0074                     ___ftpack@sign:	
   594                           ; 1 bytes @ 0x4
   595                           
   596                           
   597                           ; 1 bytes @ 0x4
   598  0074                     	ds	1
   599  0075                     ??___ftpack:	
   600                           
   601                           ; 1 bytes @ 0x5
   602  0075                     	ds	1
   603  0076                     ??___ftge:	
   604                           
   605                           ; 1 bytes @ 0x6
   606  0076                     	ds	2
   607  0078                     ?___lwtoft:	
   608  0078                     ___lwtoft@c:	
   609                           ; 3 bytes @ 0x8
   610                           
   611                           
   612                           ; 2 bytes @ 0x8
   613  0078                     	ds	3
   614  007B                     ??___lwtoft:	
   615                           
   616                           ; 1 bytes @ 0xB
   617  007B                     	ds	1
   618  007C                     ??_eval_poly:	
   619  007C                     ??___altoft:	
   620                           ; 1 bytes @ 0xC
   621                           
   622                           
   623                           ; 1 bytes @ 0xC
   624  007C                     	ds	2
   625  007E                     ??___ftsub:	
   626                           
   627                           	psect	cstackBANK0
   628  0020                     __pcstackBANK0:	
   629                           ; 1 bytes @ 0xE
   630                           
   631  0020                     ?___ftmul:	
   632  0020                     ___ftmul@f1:	
   633                           ; 3 bytes @ 0x0
   634                           
   635                           
   636                           ; 3 bytes @ 0x0
   637  0020                     	ds	3
   638  0023                     ___ftmul@f2:	
   639                           
   640                           ; 3 bytes @ 0x3
   641  0023                     	ds	3
   642  0026                     ??___ftmul:	
   643                           
   644                           ; 1 bytes @ 0x6
   645  0026                     	ds	4
   646  002A                     ___ftmul@exp:	
   647                           
   648                           ; 1 bytes @ 0xA
   649  002A                     	ds	1
   650  002B                     ___ftmul@f3_as_product:	
   651                           
   652                           ; 3 bytes @ 0xB
   653  002B                     	ds	3
   654  002E                     ___ftmul@cntr:	
   655                           
   656                           ; 1 bytes @ 0xE
   657  002E                     	ds	1
   658  002F                     ___ftmul@sign:	
   659                           
   660                           ; 1 bytes @ 0xF
   661  002F                     	ds	1
   662  0030                     ?___ftdiv:	
   663  0030                     ___ftdiv@f2:	
   664                           ; 3 bytes @ 0x10
   665                           
   666                           
   667                           ; 3 bytes @ 0x10
   668  0030                     	ds	3
   669  0033                     ___ftdiv@f1:	
   670                           
   671                           ; 3 bytes @ 0x13
   672  0033                     	ds	3
   673  0036                     ??___ftdiv:	
   674                           
   675                           ; 1 bytes @ 0x16
   676  0036                     	ds	4
   677  003A                     ___ftdiv@cntr:	
   678                           
   679                           ; 1 bytes @ 0x1A
   680  003A                     	ds	1
   681  003B                     ___ftdiv@f3:	
   682                           
   683                           ; 3 bytes @ 0x1B
   684  003B                     	ds	3
   685  003E                     ___ftdiv@exp:	
   686                           
   687                           ; 1 bytes @ 0x1E
   688  003E                     	ds	1
   689  003F                     ___ftdiv@sign:	
   690                           
   691                           ; 1 bytes @ 0x1F
   692  003F                     	ds	1
   693  0040                     ?___ftadd:	
   694  0040                     ?___fttol:	
   695                           ; 3 bytes @ 0x20
   696                           
   697  0040                     ___ftadd@f1:	
   698                           ; 4 bytes @ 0x20
   699                           
   700  0040                     ___fttol@f1:	
   701                           ; 3 bytes @ 0x20
   702                           
   703                           
   704                           ; 3 bytes @ 0x20
   705  0040                     	ds	3
   706  0043                     ___ftadd@f2:	
   707                           
   708                           ; 3 bytes @ 0x23
   709  0043                     	ds	1
   710  0044                     ??___fttol:	
   711                           
   712                           ; 1 bytes @ 0x24
   713  0044                     	ds	2
   714  0046                     ??___ftadd:	
   715                           
   716                           ; 1 bytes @ 0x26
   717  0046                     	ds	2
   718  0048                     ___fttol@sign1:	
   719                           
   720                           ; 1 bytes @ 0x28
   721  0048                     	ds	1
   722  0049                     ___fttol@lval:	
   723                           
   724                           ; 4 bytes @ 0x29
   725  0049                     	ds	1
   726  004A                     ___ftadd@sign:	
   727                           
   728                           ; 1 bytes @ 0x2A
   729  004A                     	ds	1
   730  004B                     ___ftadd@exp2:	
   731                           
   732                           ; 1 bytes @ 0x2B
   733  004B                     	ds	1
   734  004C                     ___ftadd@exp1:	
   735                           
   736                           ; 1 bytes @ 0x2C
   737  004C                     	ds	1
   738  004D                     ?_eval_poly:	
   739  004D                     ___fttol@exp1:	
   740                           ; 3 bytes @ 0x2D
   741                           
   742  004D                     eval_poly@x:	
   743                           ; 1 bytes @ 0x2D
   744                           
   745                           
   746                           ; 3 bytes @ 0x2D
   747  004D                     	ds	1
   748  004E                     ?___altoft:	
   749  004E                     ___altoft@c:	
   750                           ; 3 bytes @ 0x2E
   751                           
   752                           
   753                           ; 4 bytes @ 0x2E
   754  004E                     	ds	2
   755  0050                     eval_poly@d:	
   756                           
   757                           ; 1 bytes @ 0x30
   758  0050                     	ds	1
   759  0051                     eval_poly@n:	
   760                           
   761                           ; 2 bytes @ 0x31
   762  0051                     	ds	1
   763  0052                     ___altoft@exp:	
   764                           
   765                           ; 1 bytes @ 0x32
   766  0052                     	ds	1
   767  0053                     ___altoft@sign:	
   768  0053                     eval_poly@res:	
   769                           ; 1 bytes @ 0x33
   770                           
   771                           
   772                           ; 3 bytes @ 0x33
   773  0053                     	ds	1
   774  0054                     ?_floor:	
   775  0054                     floor@x:	
   776                           ; 3 bytes @ 0x34
   777                           
   778                           
   779                           ; 3 bytes @ 0x34
   780  0054                     	ds	3
   781  0057                     ??_floor:	
   782                           
   783                           ; 1 bytes @ 0x37
   784  0057                     	ds	1
   785  0058                     floor@i:	
   786                           
   787                           ; 3 bytes @ 0x38
   788  0058                     	ds	3
   789  005B                     floor@expon:	
   790                           
   791                           ; 2 bytes @ 0x3B
   792  005B                     	ds	2
   793  005D                     ?___ftsub:	
   794  005D                     ___ftsub@f2:	
   795                           ; 3 bytes @ 0x3D
   796                           
   797                           
   798                           ; 3 bytes @ 0x3D
   799  005D                     	ds	3
   800  0060                     ___ftsub@f1:	
   801                           
   802                           ; 3 bytes @ 0x40
   803  0060                     	ds	3
   804  0063                     ?_sin:	
   805  0063                     sin@f:	
   806                           ; 3 bytes @ 0x43
   807                           
   808                           
   809                           ; 3 bytes @ 0x43
   810  0063                     	ds	3
   811  0066                     ??_sin:	
   812                           
   813                           ; 1 bytes @ 0x46
   814  0066                     	ds	1
   815  0067                     ??_ISR:	
   816                           
   817                           ; 1 bytes @ 0x47
   818  0067                     	ds	6
   819                           
   820                           	psect	maintext
   821  0B7E                     __pmaintext:	
   822 ;;
   823 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   824 ;;
   825 ;; *************** function _main *****************
   826 ;; Defined at:
   827 ;;		line 365 in file "main.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;		None
   830 ;; Auto vars:     Size  Location     Type
   831 ;;		None
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg, status,2, status,0, pclath, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : B00/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   841 ;;      Params:         0       0       0       0       0
   842 ;;      Locals:         0       0       0       0       0
   843 ;;      Temps:          0       0       0       0       0
   844 ;;      Totals:         0       0       0       0       0
   845 ;;Total ram usage:        0 bytes
   846 ;; Hardware stack levels required when called:    7
   847 ;; This function calls:
   848 ;;		_ADC_Init
   849 ;;		_USART_Init
   850 ;; This function is called by:
   851 ;;		Startup code after reset
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855                           
   856                           ;psect for function _main
   857  0B7E                     _main:	
   858                           
   859                           ;main.c: 366: TRISA = 0b11111111;
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   863  0B7E  30FF               	movlw	255
   864  0B7F  1683               	bsf	3,5	;RP0=1, select bank1
   865  0B80  1303               	bcf	3,6	;RP1=0, select bank1
   866  0B81  0085               	movwf	5	;volatile
   867                           
   868                           ;main.c: 367: PORTA = 0b11111111;
   869  0B82  30FF               	movlw	255
   870  0B83  1283               	bcf	3,5	;RP0=0, select bank0
   871  0B84  1303               	bcf	3,6	;RP1=0, select bank0
   872  0B85  0085               	movwf	5	;volatile
   873                           
   874                           ;main.c: 368: TRISB = 0b00000000;
   875  0B86  1683               	bsf	3,5	;RP0=1, select bank1
   876  0B87  1303               	bcf	3,6	;RP1=0, select bank1
   877  0B88  0186               	clrf	6	;volatile
   878                           
   879                           ;main.c: 369: PORTB = 0b00000000;
   880  0B89  1283               	bcf	3,5	;RP0=0, select bank0
   881  0B8A  1303               	bcf	3,6	;RP1=0, select bank0
   882  0B8B  0186               	clrf	6	;volatile
   883                           
   884                           ;main.c: 370: TRISC = 0b10000000;
   885  0B8C  3080               	movlw	128
   886  0B8D  1683               	bsf	3,5	;RP0=1, select bank1
   887  0B8E  1303               	bcf	3,6	;RP1=0, select bank1
   888  0B8F  0087               	movwf	7	;volatile
   889                           
   890                           ;main.c: 371: PORTC = 0b10000000;
   891  0B90  3080               	movlw	128
   892  0B91  1283               	bcf	3,5	;RP0=0, select bank0
   893  0B92  1303               	bcf	3,6	;RP1=0, select bank0
   894  0B93  0087               	movwf	7	;volatile
   895                           
   896                           ;main.c: 372: TRISD = 0b00000000;
   897  0B94  1683               	bsf	3,5	;RP0=1, select bank1
   898  0B95  1303               	bcf	3,6	;RP1=0, select bank1
   899  0B96  0188               	clrf	8	;volatile
   900                           
   901                           ;main.c: 373: PORTD = 0b00000000;
   902  0B97  1283               	bcf	3,5	;RP0=0, select bank0
   903  0B98  1303               	bcf	3,6	;RP1=0, select bank0
   904  0B99  0188               	clrf	8	;volatile
   905                           
   906                           ;main.c: 374: TRISE = 0b11111111;
   907  0B9A  30FF               	movlw	255
   908  0B9B  1683               	bsf	3,5	;RP0=1, select bank1
   909  0B9C  1303               	bcf	3,6	;RP1=0, select bank1
   910  0B9D  0089               	movwf	9	;volatile
   911                           
   912                           ;main.c: 375: PORTE = 0b11111111;
   913  0B9E  30FF               	movlw	255
   914  0B9F  1283               	bcf	3,5	;RP0=0, select bank0
   915  0BA0  1303               	bcf	3,6	;RP1=0, select bank0
   916  0BA1  0089               	movwf	9	;volatile
   917                           
   918                           ;main.c: 377: USART_Init(110000, 1);
   919  0BA2  3000               	movlw	0
   920  0BA3  1683               	bsf	3,5	;RP0=1, select bank3
   921  0BA4  1703               	bsf	3,6	;RP1=1, select bank3
   922  0BA5  00A1               	movwf	(USART_Init@BaudRate+3)^(0+384)
   923  0BA6  3001               	movlw	1
   924  0BA7  00A0               	movwf	(USART_Init@BaudRate+2)^(0+384)
   925  0BA8  30AD               	movlw	173
   926  0BA9  009F               	movwf	(USART_Init@BaudRate+1)^(0+384)
   927  0BAA  30B0               	movlw	176
   928  0BAB  009E               	movwf	USART_Init@BaudRate^(0+384)
   929  0BAC  3001               	movlw	1
   930  0BAD  00A2               	movwf	USART_Init@Mode^(0+384)
   931  0BAE  3000               	movlw	0
   932  0BAF  00A3               	movwf	(USART_Init@Mode^(0+384)+1)
   933  0BB0  120A  158A  260B  120A  158A  	fcall	_USART_Init
   934                           
   935                           ;main.c: 378: ADC_Init();
   936  0BB5  120A  158A  22AB  120A  158A  	fcall	_ADC_Init
   937                           
   938                           ;main.c: 380: INTCONbits.PEIE = 1;
   939  0BBA  170B               	bsf	11,6	;volatile
   940                           
   941                           ;main.c: 381: INTCONbits.GIE = 1;
   942  0BBB  178B               	bsf	11,7	;volatile
   943  0BBC                     l159:	
   944                           ;main.c: 383: while (1) {
   945                           
   946  0BBC  2BBC               	goto	l159
   947  0BBD                     __end_of_main:	
   948                           
   949                           	psect	text1
   950  0E0B                     __ptext1:	
   951 ;; *************** function _USART_Init *****************
   952 ;; Defined at:
   953 ;;		line 30 in file "main.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;  BaudRate        4   14[BANK3 ] long 
   956 ;;  Mode            2   18[BANK3 ] int 
   957 ;; Auto vars:     Size  Location     Type
   958 ;;  BR              2   20[BANK3 ] int 
   959 ;; Return value:  Size  Location     Type
   960 ;;                  1    wreg      void 
   961 ;; Registers used:
   962 ;;		wreg, status,2, status,0, pclath, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   968 ;;      Params:         0       0       0       6       0
   969 ;;      Locals:         0       0       0       2       0
   970 ;;      Temps:          0       0       4       0       0
   971 ;;      Totals:         0       0       4       8       0
   972 ;;Total ram usage:       12 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    6
   975 ;; This function calls:
   976 ;;		___aldiv
   977 ;; This function is called by:
   978 ;;		_main
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           
   983                           ;psect for function _USART_Init
   984  0E0B                     _USART_Init:	
   985                           
   986                           ;main.c: 31: int BR = 0;
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
   990  0E0B  1683               	bsf	3,5	;RP0=1, select bank3
   991  0E0C  1703               	bsf	3,6	;RP1=1, select bank3
   992  0E0D  01A4               	clrf	USART_Init@BR^(0+384)
   993  0E0E  01A5               	clrf	(USART_Init@BR+1)^(0+384)
   994                           
   995                           ;main.c: 34: if (Mode == 0)
   996  0E0F  0822               	movf	USART_Init@Mode^(0+384),w
   997  0E10  0423               	iorwf	(USART_Init@Mode+1)^(0+384),w
   998  0E11  1D03               	btfss	3,2
   999  0E12  2E33               	goto	l2146
  1000                           
  1001                           ;main.c: 35: {
  1002                           ;main.c: 36: BR = (20000000 / (64 * BaudRate)) - 1;
  1003  0E13  081E               	movf	USART_Init@BaudRate^(0+384),w
  1004  0E14  1683               	bsf	3,5	;RP0=1, select bank1
  1005  0E15  1303               	bcf	3,6	;RP1=0, select bank1
  1006  0E16  00BB               	movwf	??_USART_Init^(0+128)
  1007  0E17  1683               	bsf	3,5	;RP0=1, select bank3
  1008  0E18  1703               	bsf	3,6	;RP1=1, select bank3
  1009  0E19  081F               	movf	(USART_Init@BaudRate+1)^(0+384),w
  1010  0E1A  1683               	bsf	3,5	;RP0=1, select bank1
  1011  0E1B  1303               	bcf	3,6	;RP1=0, select bank1
  1012  0E1C  00BC               	movwf	(??_USART_Init^(0+128)+1)
  1013  0E1D  1683               	bsf	3,5	;RP0=1, select bank3
  1014  0E1E  1703               	bsf	3,6	;RP1=1, select bank3
  1015  0E1F  0820               	movf	(USART_Init@BaudRate+2)^(0+384),w
  1016  0E20  1683               	bsf	3,5	;RP0=1, select bank1
  1017  0E21  1303               	bcf	3,6	;RP1=0, select bank1
  1018  0E22  00BD               	movwf	(??_USART_Init^(0+128)+2)
  1019  0E23  1683               	bsf	3,5	;RP0=1, select bank3
  1020  0E24  1703               	bsf	3,6	;RP1=1, select bank3
  1021  0E25  0821               	movf	(USART_Init@BaudRate+3)^(0+384),w
  1022  0E26  1683               	bsf	3,5	;RP0=1, select bank1
  1023  0E27  1303               	bcf	3,6	;RP1=0, select bank1
  1024  0E28  00BE               	movwf	(??_USART_Init^(0+128)+3)
  1025  0E29  3006               	movlw	6
  1026  0E2A                     u2625:	
  1027  0E2A  1003               	clrc
  1028  0E2B  0DBB               	rlf	??_USART_Init^(0+128),f
  1029  0E2C  0DBC               	rlf	(??_USART_Init^(0+128)+1),f
  1030  0E2D  0DBD               	rlf	(??_USART_Init^(0+128)+2),f
  1031  0E2E  0DBE               	rlf	(??_USART_Init^(0+128)+3),f
  1032  0E2F  3EFF               	addlw	-1
  1033  0E30  1D03               	skipz
  1034  0E31  2E2A               	goto	u2625
  1035  0E32  2E54               	goto	L1
  1036  0E33                     l2146:	
  1037                           ;main.c: 38: } else
  1038                           
  1039                           ;main.c: 37: SPBRG = BR;
  1040                           
  1041                           
  1042                           ;main.c: 39: {
  1043                           ;main.c: 40: BR = (20000000 / (16 * BaudRate)) - 1;
  1044  0E33  1683               	bsf	3,5	;RP0=1, select bank3
  1045  0E34  1703               	bsf	3,6	;RP1=1, select bank3
  1046  0E35  081E               	movf	USART_Init@BaudRate^(0+384),w
  1047  0E36  1683               	bsf	3,5	;RP0=1, select bank1
  1048  0E37  1303               	bcf	3,6	;RP1=0, select bank1
  1049  0E38  00BB               	movwf	??_USART_Init^(0+128)
  1050  0E39  1683               	bsf	3,5	;RP0=1, select bank3
  1051  0E3A  1703               	bsf	3,6	;RP1=1, select bank3
  1052  0E3B  081F               	movf	(USART_Init@BaudRate+1)^(0+384),w
  1053  0E3C  1683               	bsf	3,5	;RP0=1, select bank1
  1054  0E3D  1303               	bcf	3,6	;RP1=0, select bank1
  1055  0E3E  00BC               	movwf	(??_USART_Init^(0+128)+1)
  1056  0E3F  1683               	bsf	3,5	;RP0=1, select bank3
  1057  0E40  1703               	bsf	3,6	;RP1=1, select bank3
  1058  0E41  0820               	movf	(USART_Init@BaudRate+2)^(0+384),w
  1059  0E42  1683               	bsf	3,5	;RP0=1, select bank1
  1060  0E43  1303               	bcf	3,6	;RP1=0, select bank1
  1061  0E44  00BD               	movwf	(??_USART_Init^(0+128)+2)
  1062  0E45  1683               	bsf	3,5	;RP0=1, select bank3
  1063  0E46  1703               	bsf	3,6	;RP1=1, select bank3
  1064  0E47  0821               	movf	(USART_Init@BaudRate+3)^(0+384),w
  1065  0E48  1683               	bsf	3,5	;RP0=1, select bank1
  1066  0E49  1303               	bcf	3,6	;RP1=0, select bank1
  1067  0E4A  00BE               	movwf	(??_USART_Init^(0+128)+3)
  1068  0E4B  3004               	movlw	4
  1069  0E4C                     u2635:	
  1070  0E4C  1003               	clrc
  1071  0E4D  0DBB               	rlf	??_USART_Init^(0+128),f
  1072  0E4E  0DBC               	rlf	(??_USART_Init^(0+128)+1),f
  1073  0E4F  0DBD               	rlf	(??_USART_Init^(0+128)+2),f
  1074  0E50  0DBE               	rlf	(??_USART_Init^(0+128)+3),f
  1075  0E51  3EFF               	addlw	-1
  1076  0E52  1D03               	skipz
  1077  0E53  2E4C               	goto	u2635
  1078  0E54                     L1:	
  1079  0E54  083E               	movf	(??_USART_Init+3)^(0+128),w
  1080  0E55  1683               	bsf	3,5	;RP0=1, select bank3
  1081  0E56  1703               	bsf	3,6	;RP1=1, select bank3
  1082  0E57  0093               	movwf	(___aldiv@divisor+3)^(0+384)
  1083  0E58  1683               	bsf	3,5	;RP0=1, select bank1
  1084  0E59  1303               	bcf	3,6	;RP1=0, select bank1
  1085  0E5A  083D               	movf	(??_USART_Init+2)^(0+128),w
  1086  0E5B  1683               	bsf	3,5	;RP0=1, select bank3
  1087  0E5C  1703               	bsf	3,6	;RP1=1, select bank3
  1088  0E5D  0092               	movwf	(___aldiv@divisor+2)^(0+384)
  1089  0E5E  1683               	bsf	3,5	;RP0=1, select bank1
  1090  0E5F  1303               	bcf	3,6	;RP1=0, select bank1
  1091  0E60  083C               	movf	(??_USART_Init+1)^(0+128),w
  1092  0E61  1683               	bsf	3,5	;RP0=1, select bank3
  1093  0E62  1703               	bsf	3,6	;RP1=1, select bank3
  1094  0E63  0091               	movwf	(___aldiv@divisor+1)^(0+384)
  1095  0E64  1683               	bsf	3,5	;RP0=1, select bank1
  1096  0E65  1303               	bcf	3,6	;RP1=0, select bank1
  1097  0E66  083B               	movf	??_USART_Init^(0+128),w
  1098  0E67  1683               	bsf	3,5	;RP0=1, select bank3
  1099  0E68  1703               	bsf	3,6	;RP1=1, select bank3
  1100  0E69  0090               	movwf	___aldiv@divisor^(0+384)
  1101  0E6A  3001               	movlw	1
  1102  0E6B  0097               	movwf	(___aldiv@dividend+3)^(0+384)
  1103  0E6C  3031               	movlw	49
  1104  0E6D  0096               	movwf	(___aldiv@dividend+2)^(0+384)
  1105  0E6E  302D               	movlw	45
  1106  0E6F  0095               	movwf	(___aldiv@dividend+1)^(0+384)
  1107  0E70  3000               	movlw	0
  1108  0E71  0094               	movwf	___aldiv@dividend^(0+384)
  1109  0E72  120A  158A  26A5  120A  158A  	fcall	___aldiv
  1110  0E77  1683               	bsf	3,5	;RP0=1, select bank3
  1111  0E78  1703               	bsf	3,6	;RP1=1, select bank3
  1112  0E79  0810               	movf	?___aldiv^(0+384),w
  1113  0E7A  3EFF               	addlw	255
  1114  0E7B  00A4               	movwf	USART_Init@BR^(0+384)
  1115  0E7C  0811               	movf	(?___aldiv+1)^(0+384),w
  1116  0E7D  1803               	skipnc
  1117  0E7E  3E01               	addlw	1
  1118  0E7F  3EFF               	addlw	255
  1119  0E80  00A5               	movwf	(USART_Init@BR+1)^(0+384)
  1120                           
  1121                           ;main.c: 41: SPBRG = BR;
  1122  0E81  0824               	movf	USART_Init@BR^(0+384),w
  1123  0E82  1683               	bsf	3,5	;RP0=1, select bank1
  1124  0E83  1303               	bcf	3,6	;RP1=0, select bank1
  1125  0E84  0099               	movwf	25	;volatile
  1126                           
  1127                           ;main.c: 42: }
  1128                           ;main.c: 45: TXSTAbits.CSRC = 1;
  1129  0E85  1798               	bsf	24,7	;volatile
  1130                           
  1131                           ;main.c: 46: TXSTAbits.TX9 = 0;
  1132  0E86  1318               	bcf	24,6	;volatile
  1133                           
  1134                           ;main.c: 47: TXSTAbits.TXEN = 1;
  1135  0E87  1698               	bsf	24,5	;volatile
  1136                           
  1137                           ;main.c: 48: TXSTAbits.SYNC = 0;
  1138  0E88  1218               	bcf	24,4	;volatile
  1139                           
  1140                           ;main.c: 49: TXSTAbits.BRGH = Mode;
  1141  0E89  1683               	bsf	3,5	;RP0=1, select bank3
  1142  0E8A  1703               	bsf	3,6	;RP1=1, select bank3
  1143  0E8B  0C22               	rrf	USART_Init@Mode^(0+384),w
  1144  0E8C  1683               	bsf	3,5	;RP0=1, select bank1
  1145  0E8D  1303               	bcf	3,6	;RP1=0, select bank1
  1146  0E8E  1C03               	skipc
  1147  0E8F  1118               	bcf	24,2	;volatile
  1148  0E90  1803               	skipnc
  1149  0E91  1518               	bsf	24,2	;volatile
  1150                           
  1151                           ;main.c: 50: TXSTAbits.TRMT = 1;
  1152  0E92  1498               	bsf	24,1	;volatile
  1153                           
  1154                           ;main.c: 51: TXSTAbits.TX9D = 0;
  1155  0E93  1018               	bcf	24,0	;volatile
  1156                           
  1157                           ;main.c: 54: RCSTAbits.SPEN = 1;
  1158  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  1159  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  1160  0E96  1798               	bsf	24,7	;volatile
  1161                           
  1162                           ;main.c: 55: RCSTAbits.RX9 = 0;
  1163  0E97  1318               	bcf	24,6	;volatile
  1164                           
  1165                           ;main.c: 56: RCSTAbits.SREN = 0;
  1166  0E98  1298               	bcf	24,5	;volatile
  1167                           
  1168                           ;main.c: 57: RCSTAbits.CREN = 1;
  1169  0E99  1618               	bsf	24,4	;volatile
  1170                           
  1171                           ;main.c: 58: RCSTAbits.ADDEN = 0;
  1172  0E9A  1198               	bcf	24,3	;volatile
  1173                           
  1174                           ;main.c: 59: RCSTAbits.FERR = 0;
  1175  0E9B  1118               	bcf	24,2	;volatile
  1176                           
  1177                           ;main.c: 60: RCSTAbits.OERR = 0;
  1178  0E9C  1098               	bcf	24,1	;volatile
  1179                           
  1180                           ;main.c: 61: RCSTAbits.RX9D = 0;
  1181  0E9D  1018               	bcf	24,0	;volatile
  1182                           
  1183                           ;main.c: 64: PIE1bits.RCIE = 1;
  1184  0E9E  1683               	bsf	3,5	;RP0=1, select bank1
  1185  0E9F  1303               	bcf	3,6	;RP1=0, select bank1
  1186  0EA0  168C               	bsf	12,5	;volatile
  1187                           
  1188                           ;main.c: 65: PIR1bits.RCIF = 0;
  1189  0EA1  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0EA2  1303               	bcf	3,6	;RP1=0, select bank0
  1191  0EA3  128C               	bcf	12,5	;volatile
  1192  0EA4  0008               	return
  1193  0EA5                     __end_of_USART_Init:	
  1194                           
  1195                           	psect	text2
  1196  0EA5                     __ptext2:	
  1197 ;; *************** function ___aldiv *****************
  1198 ;; Defined at:
  1199 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  divisor         4    0[BANK3 ] long 
  1202 ;;  dividend        4    4[BANK3 ] long 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  quotient        4   10[BANK3 ] long 
  1205 ;;  sign            1    9[BANK3 ] unsigned char 
  1206 ;;  counter         1    8[BANK3 ] unsigned char 
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  4    0[BANK3 ] long 
  1209 ;; Registers used:
  1210 ;;		wreg, status,2, status,0
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1216 ;;      Params:         0       0       0       8       0
  1217 ;;      Locals:         0       0       0       6       0
  1218 ;;      Temps:          0       0       1       0       0
  1219 ;;      Totals:         0       0       1      14       0
  1220 ;;Total ram usage:       15 bytes
  1221 ;; Hardware stack levels used:    1
  1222 ;; Hardware stack levels required when called:    5
  1223 ;; This function calls:
  1224 ;;		Nothing
  1225 ;; This function is called by:
  1226 ;;		_USART_Init
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230                           
  1231                           ;psect for function ___aldiv
  1232  0EA5                     ___aldiv:	
  1233                           
  1234                           ;incstack = 0
  1235                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1236  0EA5  1683               	bsf	3,5	;RP0=1, select bank3
  1237  0EA6  1703               	bsf	3,6	;RP1=1, select bank3
  1238  0EA7  0199               	clrf	___aldiv@sign^(0+384)
  1239  0EA8  1F93               	btfss	(___aldiv@divisor+3)^(0+384),7
  1240  0EA9  2EB7               	goto	l301
  1241  0EAA  0990               	comf	___aldiv@divisor^(0+384),f
  1242  0EAB  0991               	comf	(___aldiv@divisor+1)^(0+384),f
  1243  0EAC  0992               	comf	(___aldiv@divisor+2)^(0+384),f
  1244  0EAD  0993               	comf	(___aldiv@divisor+3)^(0+384),f
  1245  0EAE  0A90               	incf	___aldiv@divisor^(0+384),f
  1246  0EAF  1903               	skipnz
  1247  0EB0  0A91               	incf	(___aldiv@divisor+1)^(0+384),f
  1248  0EB1  1903               	skipnz
  1249  0EB2  0A92               	incf	(___aldiv@divisor+2)^(0+384),f
  1250  0EB3  1903               	skipnz
  1251  0EB4  0A93               	incf	(___aldiv@divisor+3)^(0+384),f
  1252  0EB5  0199               	clrf	___aldiv@sign^(0+384)
  1253  0EB6  0A99               	incf	___aldiv@sign^(0+384),f
  1254  0EB7                     l301:	
  1255  0EB7  1F97               	btfss	(___aldiv@dividend+3)^(0+384),7
  1256  0EB8  2ECC               	goto	l2108
  1257  0EB9  0994               	comf	___aldiv@dividend^(0+384),f
  1258  0EBA  0995               	comf	(___aldiv@dividend+1)^(0+384),f
  1259  0EBB  0996               	comf	(___aldiv@dividend+2)^(0+384),f
  1260  0EBC  0997               	comf	(___aldiv@dividend+3)^(0+384),f
  1261  0EBD  0A94               	incf	___aldiv@dividend^(0+384),f
  1262  0EBE  1903               	skipnz
  1263  0EBF  0A95               	incf	(___aldiv@dividend+1)^(0+384),f
  1264  0EC0  1903               	skipnz
  1265  0EC1  0A96               	incf	(___aldiv@dividend+2)^(0+384),f
  1266  0EC2  1903               	skipnz
  1267  0EC3  0A97               	incf	(___aldiv@dividend+3)^(0+384),f
  1268  0EC4  3001               	movlw	1
  1269  0EC5  1683               	bsf	3,5	;RP0=1, select bank1
  1270  0EC6  1303               	bcf	3,6	;RP1=0, select bank1
  1271  0EC7  00BA               	movwf	??___aldiv^(0+128)
  1272  0EC8  083A               	movf	??___aldiv^(0+128),w
  1273  0EC9  1683               	bsf	3,5	;RP0=1, select bank3
  1274  0ECA  1703               	bsf	3,6	;RP1=1, select bank3
  1275  0ECB  0699               	xorwf	___aldiv@sign^(0+384),f
  1276  0ECC                     l2108:	
  1277  0ECC  3000               	movlw	0
  1278  0ECD  009D               	movwf	(___aldiv@quotient+3)^(0+384)
  1279  0ECE  3000               	movlw	0
  1280  0ECF  009C               	movwf	(___aldiv@quotient+2)^(0+384)
  1281  0ED0  3000               	movlw	0
  1282  0ED1  009B               	movwf	(___aldiv@quotient+1)^(0+384)
  1283  0ED2  3000               	movlw	0
  1284  0ED3  009A               	movwf	___aldiv@quotient^(0+384)
  1285  0ED4  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  1286  0ED5  0412               	iorwf	(___aldiv@divisor+2)^(0+384),w
  1287  0ED6  0411               	iorwf	(___aldiv@divisor+1)^(0+384),w
  1288  0ED7  0410               	iorwf	___aldiv@divisor^(0+384),w
  1289  0ED8  1903               	skipnz
  1290  0ED9  2F31               	goto	l2130
  1291  0EDA  0198               	clrf	___aldiv@counter^(0+384)
  1292  0EDB  0A98               	incf	___aldiv@counter^(0+384),f
  1293  0EDC                     l2116:	
  1294  0EDC  1B93               	btfsc	(___aldiv@divisor+3)^(0+384),7
  1295  0EDD  2EF4               	goto	l2118
  1296  0EDE  3001               	movlw	1
  1297  0EDF  1683               	bsf	3,5	;RP0=1, select bank1
  1298  0EE0  1303               	bcf	3,6	;RP1=0, select bank1
  1299  0EE1  00BA               	movwf	??___aldiv^(0+128)
  1300  0EE2                     u2545:	
  1301  0EE2  1003               	clrc
  1302  0EE3  1683               	bsf	3,5	;RP0=1, select bank3
  1303  0EE4  1703               	bsf	3,6	;RP1=1, select bank3
  1304  0EE5  0D90               	rlf	___aldiv@divisor^(0+384),f
  1305  0EE6  0D91               	rlf	(___aldiv@divisor+1)^(0+384),f
  1306  0EE7  0D92               	rlf	(___aldiv@divisor+2)^(0+384),f
  1307  0EE8  0D93               	rlf	(___aldiv@divisor+3)^(0+384),f
  1308  0EE9  1683               	bsf	3,5	;RP0=1, select bank1
  1309  0EEA  1303               	bcf	3,6	;RP1=0, select bank1
  1310  0EEB  0BBA               	decfsz	??___aldiv^(0+128),f
  1311  0EEC  2EE2               	goto	u2545
  1312  0EED  3001               	movlw	1
  1313  0EEE  00BA               	movwf	??___aldiv^(0+128)
  1314  0EEF  083A               	movf	??___aldiv^(0+128),w
  1315  0EF0  1683               	bsf	3,5	;RP0=1, select bank3
  1316  0EF1  1703               	bsf	3,6	;RP1=1, select bank3
  1317  0EF2  0798               	addwf	___aldiv@counter^(0+384),f
  1318  0EF3  2EDC               	goto	l2116
  1319  0EF4                     l2118:	
  1320  0EF4  3001               	movlw	1
  1321  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  1322  0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  1323  0EF7  00BA               	movwf	??___aldiv^(0+128)
  1324  0EF8                     u2565:	
  1325  0EF8  1003               	clrc
  1326  0EF9  1683               	bsf	3,5	;RP0=1, select bank3
  1327  0EFA  1703               	bsf	3,6	;RP1=1, select bank3
  1328  0EFB  0D9A               	rlf	___aldiv@quotient^(0+384),f
  1329  0EFC  0D9B               	rlf	(___aldiv@quotient+1)^(0+384),f
  1330  0EFD  0D9C               	rlf	(___aldiv@quotient+2)^(0+384),f
  1331  0EFE  0D9D               	rlf	(___aldiv@quotient+3)^(0+384),f
  1332  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  1333  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  1334  0F01  0BBA               	decfsz	??___aldiv^(0+128),f
  1335  0F02  2EF8               	goto	u2565
  1336  0F03  1683               	bsf	3,5	;RP0=1, select bank3
  1337  0F04  1703               	bsf	3,6	;RP1=1, select bank3
  1338  0F05  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  1339  0F06  0217               	subwf	(___aldiv@dividend+3)^(0+384),w
  1340  0F07  1D03               	skipz
  1341  0F08  2F13               	goto	u2575
  1342  0F09  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  1343  0F0A  0216               	subwf	(___aldiv@dividend+2)^(0+384),w
  1344  0F0B  1D03               	skipz
  1345  0F0C  2F13               	goto	u2575
  1346  0F0D  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  1347  0F0E  0215               	subwf	(___aldiv@dividend+1)^(0+384),w
  1348  0F0F  1D03               	skipz
  1349  0F10  2F13               	goto	u2575
  1350  0F11  0810               	movf	___aldiv@divisor^(0+384),w
  1351  0F12  0214               	subwf	___aldiv@dividend^(0+384),w
  1352  0F13                     u2575:	
  1353  0F13  1C03               	skipc
  1354  0F14  2F24               	goto	l2126
  1355  0F15  0810               	movf	___aldiv@divisor^(0+384),w
  1356  0F16  0294               	subwf	___aldiv@dividend^(0+384),f
  1357  0F17  0811               	movf	(___aldiv@divisor+1)^(0+384),w
  1358  0F18  1C03               	skipc
  1359  0F19  0F11               	incfsz	(___aldiv@divisor+1)^(0+384),w
  1360  0F1A  0295               	subwf	(___aldiv@dividend+1)^(0+384),f
  1361  0F1B  0812               	movf	(___aldiv@divisor+2)^(0+384),w
  1362  0F1C  1C03               	skipc
  1363  0F1D  0F12               	incfsz	(___aldiv@divisor+2)^(0+384),w
  1364  0F1E  0296               	subwf	(___aldiv@dividend+2)^(0+384),f
  1365  0F1F  0813               	movf	(___aldiv@divisor+3)^(0+384),w
  1366  0F20  1C03               	skipc
  1367  0F21  0F13               	incfsz	(___aldiv@divisor+3)^(0+384),w
  1368  0F22  0297               	subwf	(___aldiv@dividend+3)^(0+384),f
  1369  0F23  141A               	bsf	___aldiv@quotient^(0+384),0
  1370  0F24                     l2126:	
  1371  0F24  3001               	movlw	1
  1372  0F25                     u2585:	
  1373  0F25  1003               	clrc
  1374  0F26  0C93               	rrf	(___aldiv@divisor+3)^(0+384),f
  1375  0F27  0C92               	rrf	(___aldiv@divisor+2)^(0+384),f
  1376  0F28  0C91               	rrf	(___aldiv@divisor+1)^(0+384),f
  1377  0F29  0C90               	rrf	___aldiv@divisor^(0+384),f
  1378  0F2A  3EFF               	addlw	-1
  1379  0F2B  1D03               	skipz
  1380  0F2C  2F25               	goto	u2585
  1381  0F2D  3001               	movlw	1
  1382  0F2E  0298               	subwf	___aldiv@counter^(0+384),f
  1383  0F2F  1D03               	btfss	3,2
  1384  0F30  2EF4               	goto	l2118
  1385  0F31                     l2130:	
  1386  0F31  0819               	movf	___aldiv@sign^(0+384),w
  1387  0F32  1903               	btfsc	3,2
  1388  0F33  2F3F               	goto	l2134
  1389  0F34  099A               	comf	___aldiv@quotient^(0+384),f
  1390  0F35  099B               	comf	(___aldiv@quotient+1)^(0+384),f
  1391  0F36  099C               	comf	(___aldiv@quotient+2)^(0+384),f
  1392  0F37  099D               	comf	(___aldiv@quotient+3)^(0+384),f
  1393  0F38  0A9A               	incf	___aldiv@quotient^(0+384),f
  1394  0F39  1903               	skipnz
  1395  0F3A  0A9B               	incf	(___aldiv@quotient+1)^(0+384),f
  1396  0F3B  1903               	skipnz
  1397  0F3C  0A9C               	incf	(___aldiv@quotient+2)^(0+384),f
  1398  0F3D  1903               	skipnz
  1399  0F3E  0A9D               	incf	(___aldiv@quotient+3)^(0+384),f
  1400  0F3F                     l2134:	
  1401  0F3F  081D               	movf	(___aldiv@quotient+3)^(0+384),w
  1402  0F40  0093               	movwf	(?___aldiv+3)^(0+384)
  1403  0F41  081C               	movf	(___aldiv@quotient+2)^(0+384),w
  1404  0F42  0092               	movwf	(?___aldiv+2)^(0+384)
  1405  0F43  081B               	movf	(___aldiv@quotient+1)^(0+384),w
  1406  0F44  0091               	movwf	(?___aldiv+1)^(0+384)
  1407  0F45  081A               	movf	___aldiv@quotient^(0+384),w
  1408  0F46  0090               	movwf	?___aldiv^(0+384)
  1409  0F47  0008               	return
  1410  0F48                     __end_of___aldiv:	
  1411                           
  1412                           	psect	text3
  1413  0AAB                     __ptext3:	
  1414 ;; *************** function _ADC_Init *****************
  1415 ;; Defined at:
  1416 ;;		line 107 in file "main.c"
  1417 ;; Parameters:    Size  Location     Type
  1418 ;;		None
  1419 ;; Auto vars:     Size  Location     Type
  1420 ;;		None
  1421 ;; Return value:  Size  Location     Type
  1422 ;;                  1    wreg      void 
  1423 ;; Registers used:
  1424 ;;		None
  1425 ;; Tracked objects:
  1426 ;;		On entry : 0/0
  1427 ;;		On exit  : 0/0
  1428 ;;		Unchanged: 0/0
  1429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1430 ;;      Params:         0       0       0       0       0
  1431 ;;      Locals:         0       0       0       0       0
  1432 ;;      Temps:          0       0       0       0       0
  1433 ;;      Totals:         0       0       0       0       0
  1434 ;;Total ram usage:        0 bytes
  1435 ;; Hardware stack levels used:    1
  1436 ;; Hardware stack levels required when called:    5
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           
  1445                           ;psect for function _ADC_Init
  1446  0AAB                     _ADC_Init:	
  1447                           
  1448                           ;main.c: 109: ADCON1bits.ADFM = 1;
  1449                           
  1450                           ;incstack = 0
  1451                           ; Regs used in _ADC_Init: []
  1452  0AAB  1683               	bsf	3,5	;RP0=1, select bank1
  1453  0AAC  1303               	bcf	3,6	;RP1=0, select bank1
  1454  0AAD  179F               	bsf	31,7	;volatile
  1455                           
  1456                           ;main.c: 110: ADCON1bits.PCFG3 = 0;
  1457  0AAE  119F               	bcf	31,3	;volatile
  1458                           
  1459                           ;main.c: 111: ADCON1bits.PCFG2 = 0;
  1460  0AAF  111F               	bcf	31,2	;volatile
  1461                           
  1462                           ;main.c: 112: ADCON1bits.PCFG1 = 0;
  1463  0AB0  109F               	bcf	31,1	;volatile
  1464                           
  1465                           ;main.c: 113: ADCON1bits.PCFG0 = 0;
  1466  0AB1  101F               	bcf	31,0	;volatile
  1467                           
  1468                           ;main.c: 116: ADCON1bits.ADCS2 = 1;
  1469  0AB2  171F               	bsf	31,6	;volatile
  1470                           
  1471                           ;main.c: 117: ADCON0bits.ADCS1 = 1;
  1472  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
  1473  0AB4  1303               	bcf	3,6	;RP1=0, select bank0
  1474  0AB5  179F               	bsf	31,7	;volatile
  1475                           
  1476                           ;main.c: 118: ADCON0bits.ADCS0 = 0;
  1477  0AB6  131F               	bcf	31,6	;volatile
  1478                           
  1479                           ;main.c: 121: PIE1bits.ADIE = 1;
  1480  0AB7  1683               	bsf	3,5	;RP0=1, select bank1
  1481  0AB8  1303               	bcf	3,6	;RP1=0, select bank1
  1482  0AB9  170C               	bsf	12,6	;volatile
  1483                           
  1484                           ;main.c: 122: PIR1bits.ADIF = 0;
  1485  0ABA  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0ABB  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0ABC  130C               	bcf	12,6	;volatile
  1488  0ABD  0008               	return
  1489  0ABE                     __end_of_ADC_Init:	
  1490                           
  1491                           	psect	text4
  1492  0022                     __ptext4:	
  1493 ;; *************** function _ISR *****************
  1494 ;; Defined at:
  1495 ;;		line 139 in file "main.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;  amostra         3   19[BANK1 ] void 
  1500 ;;  inteiro         2   24[BANK1 ] unsigned int 
  1501 ;;  high            1   23[BANK1 ] unsigned char 
  1502 ;;  low             1   22[BANK1 ] unsigned char 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1512 ;;      Params:         0       0       0       0       0
  1513 ;;      Locals:         0       0      16       0       0
  1514 ;;      Temps:          0       6       0       0       0
  1515 ;;      Totals:         0       6      16       0       0
  1516 ;;Total ram usage:       22 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    4
  1519 ;; This function calls:
  1520 ;;		_ADC_Read
  1521 ;;		_USART_ReceiveChar
  1522 ;;		_USART_WriteChar
  1523 ;;		_USART_WriteString
  1524 ;;		___ftadd
  1525 ;;		___ftdiv
  1526 ;;		___ftmul
  1527 ;;		___fttol
  1528 ;;		___lwtoft
  1529 ;;		_sin
  1530 ;; This function is called by:
  1531 ;;		Interrupt level 1
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535                           
  1536                           ;psect for function _ISR
  1537  0022                     _ISR:	
  1538                           
  1539                           ;main.c: 141: if (PIR1bits.RCIF) {
  1540  0022  1E8C               	btfss	12,5	;volatile
  1541  0023  2935               	goto	i1l112
  1542                           
  1543                           ;main.c: 142: if (USART_ReceiveChar() == '#') {
  1544  0024  120A  158A  2306  120A  118A  	fcall	_USART_ReceiveChar
  1545  0029  3A23               	xorlw	35
  1546  002A  1903               	btfsc	3,2
  1547  002B  2926               	goto	i1l1984
  1548  002C  2935               	goto	i1l112
  1549  002D                     i1l115:	
  1550                           ;main.c: 144: case 'S':
  1551                           
  1552                           ;main.c: 143: switch (USART_ReceiveChar()) {
  1553                           
  1554                           
  1555                           ;main.c: 146: T1CONbits.T1OSCEN = 0;
  1556  002D  1283               	bcf	3,5	;RP0=0, select bank0
  1557  002E  1303               	bcf	3,6	;RP1=0, select bank0
  1558  002F  1190               	bcf	16,3	;volatile
  1559                           
  1560                           ;main.c: 147: T1CONbits.T1CKPS1 = 1;
  1561  0030  1690               	bsf	16,5	;volatile
  1562                           
  1563                           ;main.c: 148: T1CONbits.T1CKPS0 = 1;
  1564  0031  1610               	bsf	16,4	;volatile
  1565                           
  1566                           ;main.c: 149: T1CONbits.TMR1ON = 1;
  1567  0032  1410               	bsf	16,0	;volatile
  1568                           
  1569                           ;main.c: 151: switch (USART_ReceiveChar()) {
  1570  0033  2886               	goto	i1l1942
  1571  0034                     i1l1928:	
  1572                           ;main.c: 152: case '1':
  1573                           
  1574                           
  1575                           ;main.c: 153: fs = 100;
  1576  0034  3064               	movlw	100
  1577  0035  1683               	bsf	3,5	;RP0=1, select bank1
  1578  0036  1303               	bcf	3,6	;RP1=0, select bank1
  1579  0037  00D4               	movwf	_fs^(0+128)
  1580  0038  3000               	movlw	0
  1581  0039  00D5               	movwf	(_fs^(0+128)+1)
  1582                           
  1583                           ;main.c: 154: contagens = 7936;
  1584  003A  3000               	movlw	0
  1585  003B  00C9               	movwf	_contagens^(0+128)
  1586  003C  301F               	movlw	31
  1587  003D  285B               	goto	L4
  1588  003E                     i1l1930:	
  1589                           ;main.c: 158: case '2':
  1590                           
  1591                           ;main.c: 156: break;
  1592                           
  1593                           ;main.c: 155: TMR1 = contagens;
  1594                           
  1595                           
  1596                           ;main.c: 159: fs = 250;
  1597  003E  30FA               	movlw	250
  1598  003F  1683               	bsf	3,5	;RP0=1, select bank1
  1599  0040  1303               	bcf	3,6	;RP1=0, select bank1
  1600  0041  00D4               	movwf	_fs^(0+128)
  1601  0042  3000               	movlw	0
  1602  0043  00D5               	movwf	(_fs^(0+128)+1)
  1603                           
  1604                           ;main.c: 160: contagens = 63232;
  1605  0044  3000               	movlw	0
  1606  0045  00C9               	movwf	_contagens^(0+128)
  1607  0046  30F7               	movlw	247
  1608  0047  285B               	goto	L4
  1609  0048                     i1l1932:	
  1610                           ;main.c: 164: case '3':
  1611                           
  1612                           ;main.c: 162: break;
  1613                           
  1614                           ;main.c: 161: TMR1 = contagens;
  1615                           
  1616                           
  1617                           ;main.c: 165: fs = 500;
  1618  0048  30F4               	movlw	244
  1619  0049  1683               	bsf	3,5	;RP0=1, select bank1
  1620  004A  1303               	bcf	3,6	;RP1=0, select bank1
  1621  004B  00D4               	movwf	_fs^(0+128)
  1622  004C  3001               	movlw	1
  1623  004D  00D5               	movwf	(_fs^(0+128)+1)
  1624                           
  1625                           ;main.c: 166: contagens = 64384;
  1626  004E  3080               	movlw	128
  1627  004F  00C9               	movwf	_contagens^(0+128)
  1628  0050  30FB               	movlw	251
  1629  0051  285B               	goto	L4
  1630  0052                     i1l1934:	
  1631                           ;main.c: 170: case '4':
  1632                           
  1633                           ;main.c: 168: break;
  1634                           
  1635                           ;main.c: 167: TMR1 = contagens;
  1636                           
  1637                           
  1638                           ;main.c: 171: fs = 1000;
  1639  0052  30E8               	movlw	232
  1640  0053  1683               	bsf	3,5	;RP0=1, select bank1
  1641  0054  1303               	bcf	3,6	;RP1=0, select bank1
  1642  0055  00D4               	movwf	_fs^(0+128)
  1643  0056  3003               	movlw	3
  1644  0057  00D5               	movwf	(_fs^(0+128)+1)
  1645                           
  1646                           ;main.c: 172: contagens = 64960;
  1647  0058  30C0               	movlw	192
  1648  0059  00C9               	movwf	_contagens^(0+128)
  1649  005A  30FD               	movlw	253
  1650  005B                     L4:	
  1651  005B  00CA               	movwf	(_contagens^(0+128)+1)
  1652                           
  1653                           ;main.c: 173: TMR1 = contagens;
  1654  005C  084A               	movf	(_contagens+1)^(0+128),w
  1655  005D  1283               	bcf	3,5	;RP0=0, select bank0
  1656  005E  1303               	bcf	3,6	;RP1=0, select bank0
  1657  005F  008F               	movwf	15	;volatile
  1658  0060  1683               	bsf	3,5	;RP0=1, select bank1
  1659  0061  1303               	bcf	3,6	;RP1=0, select bank1
  1660  0062  0849               	movf	_contagens^(0+128),w
  1661  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0065  008E               	movwf	14	;volatile
  1664                           
  1665                           ;main.c: 174: break;
  1666  0066  289B               	goto	i1l118
  1667  0067                     i1l1936:	
  1668                           ;main.c: 176: case 'S':
  1669                           
  1670                           
  1671                           ;main.c: 177: fs = 200;
  1672  0067  30C8               	movlw	200
  1673  0068  1683               	bsf	3,5	;RP0=1, select bank1
  1674  0069  1303               	bcf	3,6	;RP1=0, select bank1
  1675  006A  00D4               	movwf	_fs^(0+128)
  1676  006B  3000               	movlw	0
  1677  006C  00D5               	movwf	(_fs^(0+128)+1)
  1678                           
  1679                           ;main.c: 178: contagens = 62411;
  1680  006D  30CB               	movlw	203
  1681  006E  00C9               	movwf	_contagens^(0+128)
  1682  006F  30F3               	movlw	243
  1683  0070  00CA               	movwf	(_contagens^(0+128)+1)
  1684                           
  1685                           ;main.c: 179: TMR1 = contagens;
  1686  0071  084A               	movf	(_contagens+1)^(0+128),w
  1687  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1688  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1689  0074  008F               	movwf	15	;volatile
  1690  0075  1683               	bsf	3,5	;RP0=1, select bank1
  1691  0076  1303               	bcf	3,6	;RP1=0, select bank1
  1692  0077  0849               	movf	_contagens^(0+128),w
  1693  0078  1283               	bcf	3,5	;RP0=0, select bank0
  1694  0079  1303               	bcf	3,6	;RP1=0, select bank0
  1695  007A  008E               	movwf	14	;volatile
  1696                           
  1697                           ;main.c: 180: simulacao = 1;
  1698  007B  1683               	bsf	3,5	;RP0=1, select bank1
  1699  007C  1303               	bcf	3,6	;RP1=0, select bank1
  1700  007D  01D1               	clrf	_simulacao^(0+128)
  1701  007E  0AD1               	incf	_simulacao^(0+128),f
  1702                           
  1703                           ;main.c: 181: tempo = 0;
  1704  007F  3000               	movlw	0
  1705  0080  00C4               	movwf	_tempo^(0+128)
  1706  0081  3000               	movlw	0
  1707  0082  00C5               	movwf	(_tempo+1)^(0+128)
  1708  0083  3000               	movlw	0
  1709  0084  00C6               	movwf	(_tempo+2)^(0+128)
  1710                           
  1711                           ;main.c: 183: }
  1712                           
  1713                           ;main.c: 182: break;
  1714  0085  289B               	goto	i1l118
  1715  0086                     i1l1942:	
  1716  0086  120A  158A  2306  120A  118A  	fcall	_USART_ReceiveChar
  1717                           
  1718                           ; Switch size 1, requested type "space"
  1719                           ; Number of cases is 5, Range of values is 49 to 83
  1720                           ; switch strategies available:
  1721                           ; Name         Instructions Cycles
  1722                           ; simple_byte           16     9 (average)
  1723                           ; direct_byte          116    11 (fixed)
  1724                           ; jumptable            263     9 (fixed)
  1725                           ;	Chosen strategy is simple_byte
  1726  008B  3A31               	xorlw	49	; case 49
  1727  008C  1903               	skipnz
  1728  008D  2834               	goto	i1l1928
  1729  008E  3A03               	xorlw	3	; case 50
  1730  008F  1903               	skipnz
  1731  0090  283E               	goto	i1l1930
  1732  0091  3A01               	xorlw	1	; case 51
  1733  0092  1903               	skipnz
  1734  0093  2848               	goto	i1l1932
  1735  0094  3A07               	xorlw	7	; case 52
  1736  0095  1903               	skipnz
  1737  0096  2852               	goto	i1l1934
  1738  0097  3A67               	xorlw	103	; case 83
  1739  0098  1903               	skipnz
  1740  0099  2867               	goto	i1l1936
  1741  009A  289B               	goto	i1l118
  1742  009B                     i1l118:	
  1743                           
  1744                           ;main.c: 185: PIE1bits.TMR1IE = 1;
  1745  009B  1683               	bsf	3,5	;RP0=1, select bank1
  1746  009C  1303               	bcf	3,6	;RP1=0, select bank1
  1747  009D  140C               	bsf	12,0	;volatile
  1748                           
  1749                           ;main.c: 187: a = 0;
  1750  009E  01CF               	clrf	_a^(0+128)
  1751  009F  01D0               	clrf	(_a+1)^(0+128)
  1752                           
  1753                           ;main.c: 188: break;
  1754  00A0  2935               	goto	i1l112
  1755  00A1                     i1l1946:	
  1756                           ;main.c: 192: case '1':
  1757                           
  1758                           ;main.c: 191: switch (USART_ReceiveChar()) {
  1759                           
  1760                           ;main.c: 190: case 'C':
  1761                           
  1762                           
  1763                           ;main.c: 193: freq = 1.0;
  1764  00A1  3001               	movlw	1
  1765  00A2  1683               	bsf	3,5	;RP0=1, select bank1
  1766  00A3  1303               	bcf	3,6	;RP1=0, select bank1
  1767  00A4  00D2               	movwf	_freq^(0+128)
  1768  00A5  3000               	movlw	0
  1769  00A6  00D3               	movwf	(_freq^(0+128)+1)
  1770                           
  1771                           ;main.c: 194: USART_WriteString("1.0 Hz\n");
  1772  00A7  3073               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1773  00A8  120A  158A  22EA  120A  118A  	fcall	_USART_WriteString
  1774                           
  1775                           ;main.c: 195: break;
  1776  00AD  2935               	goto	i1l112
  1777  00AE                     i1l1950:	
  1778                           ;main.c: 197: case '2':
  1779                           
  1780                           
  1781                           ;main.c: 198: freq = 5.0;
  1782  00AE  3005               	movlw	5
  1783  00AF  1683               	bsf	3,5	;RP0=1, select bank1
  1784  00B0  1303               	bcf	3,6	;RP1=0, select bank1
  1785  00B1  00D2               	movwf	_freq^(0+128)
  1786  00B2  3000               	movlw	0
  1787  00B3  00D3               	movwf	(_freq^(0+128)+1)
  1788                           
  1789                           ;main.c: 199: USART_WriteString("5.0 Hz\n");
  1790  00B4  307B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1791  00B5  120A  158A  22EA  120A  118A  	fcall	_USART_WriteString
  1792                           
  1793                           ;main.c: 200: break;
  1794  00BA  2935               	goto	i1l112
  1795  00BB                     i1l1954:	
  1796                           ;main.c: 202: case '3':
  1797                           
  1798                           
  1799                           ;main.c: 203: freq = 10.0;
  1800  00BB  300A               	movlw	10
  1801  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  1802  00BD  1303               	bcf	3,6	;RP1=0, select bank1
  1803  00BE  00D2               	movwf	_freq^(0+128)
  1804  00BF  3000               	movlw	0
  1805  00C0  00D3               	movwf	(_freq^(0+128)+1)
  1806                           
  1807                           ;main.c: 204: USART_WriteString("10.0 Hz\n");
  1808  00C1  3058               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1809  00C2  120A  158A  22EA  120A  118A  	fcall	_USART_WriteString
  1810                           
  1811                           ;main.c: 205: break;
  1812  00C7  2935               	goto	i1l112
  1813  00C8                     i1l1958:	
  1814                           ;main.c: 207: case '4':
  1815                           
  1816                           
  1817                           ;main.c: 208: freq = 20.0;
  1818  00C8  3014               	movlw	20
  1819  00C9  1683               	bsf	3,5	;RP0=1, select bank1
  1820  00CA  1303               	bcf	3,6	;RP1=0, select bank1
  1821  00CB  00D2               	movwf	_freq^(0+128)
  1822  00CC  3000               	movlw	0
  1823  00CD  00D3               	movwf	(_freq^(0+128)+1)
  1824                           
  1825                           ;main.c: 209: USART_WriteString("20.0 Hz\n");
  1826  00CE  3061               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1827  00CF  120A  158A  22EA  120A  118A  	fcall	_USART_WriteString
  1828                           
  1829                           ;main.c: 210: break;
  1830  00D4  2935               	goto	i1l112
  1831  00D5                     i1l1962:	
  1832                           ;main.c: 212: case '5':
  1833                           
  1834                           
  1835                           ;main.c: 213: freq = 60.0;
  1836  00D5  303C               	movlw	60
  1837  00D6  1683               	bsf	3,5	;RP0=1, select bank1
  1838  00D7  1303               	bcf	3,6	;RP1=0, select bank1
  1839  00D8  00D2               	movwf	_freq^(0+128)
  1840  00D9  3000               	movlw	0
  1841  00DA  00D3               	movwf	(_freq^(0+128)+1)
  1842                           
  1843                           ;main.c: 214: USART_WriteString("60.0 Hz\n");
  1844  00DB  306A               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1845  00DC  120A  158A  22EA  120A  118A  	fcall	_USART_WriteString
  1846                           
  1847                           ;main.c: 215: break;
  1848  00E1  2935               	goto	i1l112
  1849  00E2                     i1l1966:	
  1850                           ;main.c: 217: case '6':
  1851                           
  1852                           
  1853                           ;main.c: 218: freq = 100.0;
  1854  00E2  3064               	movlw	100
  1855  00E3  1683               	bsf	3,5	;RP0=1, select bank1
  1856  00E4  1303               	bcf	3,6	;RP1=0, select bank1
  1857  00E5  00D2               	movwf	_freq^(0+128)
  1858  00E6  3000               	movlw	0
  1859  00E7  00D3               	movwf	(_freq^(0+128)+1)
  1860                           
  1861                           ;main.c: 219: USART_WriteString("100.0 Hz\n");
  1862  00E8  3044               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1863  00E9  120A  158A  22EA  120A  118A  	fcall	_USART_WriteString
  1864                           
  1865                           ;main.c: 220: break;
  1866  00EE  2935               	goto	i1l112
  1867  00EF                     i1l1970:	
  1868                           ;main.c: 222: case '7':
  1869                           
  1870                           
  1871                           ;main.c: 223: freq = 200.0;
  1872  00EF  30C8               	movlw	200
  1873  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  1874  00F1  1303               	bcf	3,6	;RP1=0, select bank1
  1875  00F2  00D2               	movwf	_freq^(0+128)
  1876  00F3  3000               	movlw	0
  1877  00F4  00D3               	movwf	(_freq^(0+128)+1)
  1878                           
  1879                           ;main.c: 224: USART_WriteString("200.0 Hz\n");
  1880  00F5  304E               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1881  00F6  120A  158A  22EA  120A  118A  	fcall	_USART_WriteString
  1882                           
  1883                           ;main.c: 226: }
  1884                           
  1885                           ;main.c: 225: break;
  1886  00FB  2935               	goto	i1l112
  1887  00FC                     i1l1976:	
  1888  00FC  120A  158A  2306  120A  118A  	fcall	_USART_ReceiveChar
  1889                           
  1890                           ; Switch size 1, requested type "space"
  1891                           ; Number of cases is 7, Range of values is 49 to 55
  1892                           ; switch strategies available:
  1893                           ; Name         Instructions Cycles
  1894                           ; simple_byte           22    12 (average)
  1895                           ; direct_byte           32    11 (fixed)
  1896                           ; jumptable            263     9 (fixed)
  1897                           ;	Chosen strategy is simple_byte
  1898  0101  3A31               	xorlw	49	; case 49
  1899  0102  1903               	skipnz
  1900  0103  28A1               	goto	i1l1946
  1901  0104  3A03               	xorlw	3	; case 50
  1902  0105  1903               	skipnz
  1903  0106  28AE               	goto	i1l1950
  1904  0107  3A01               	xorlw	1	; case 51
  1905  0108  1903               	skipnz
  1906  0109  28BB               	goto	i1l1954
  1907  010A  3A07               	xorlw	7	; case 52
  1908  010B  1903               	skipnz
  1909  010C  28C8               	goto	i1l1958
  1910  010D  3A01               	xorlw	1	; case 53
  1911  010E  1903               	skipnz
  1912  010F  28D5               	goto	i1l1962
  1913  0110  3A03               	xorlw	3	; case 54
  1914  0111  1903               	skipnz
  1915  0112  28E2               	goto	i1l1966
  1916  0113  3A01               	xorlw	1	; case 55
  1917  0114  1903               	skipnz
  1918  0115  28EF               	goto	i1l1970
  1919  0116  2935               	goto	i1l112
  1920                           
  1921                           ;main.c: 227: break;
  1922  0117  2935               	goto	i1l112
  1923  0118                     i1l134:	
  1924                           ;main.c: 229: case 'P':
  1925                           
  1926                           
  1927                           ;main.c: 230: T1CONbits.TMR1ON = 0;
  1928  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1930  011A  1010               	bcf	16,0	;volatile
  1931                           
  1932                           ;main.c: 231: PIE1bits.TMR1IE = 0;
  1933  011B  1683               	bsf	3,5	;RP0=1, select bank1
  1934  011C  1303               	bcf	3,6	;RP1=0, select bank1
  1935  011D  100C               	bcf	12,0	;volatile
  1936                           
  1937                           ;main.c: 232: simulacao = 0;
  1938  011E  01D1               	clrf	_simulacao^(0+128)
  1939                           
  1940                           ;main.c: 233: tempo = 0;
  1941  011F  3000               	movlw	0
  1942  0120  00C4               	movwf	_tempo^(0+128)
  1943  0121  3000               	movlw	0
  1944  0122  00C5               	movwf	(_tempo+1)^(0+128)
  1945  0123  3000               	movlw	0
  1946  0124  00C6               	movwf	(_tempo+2)^(0+128)
  1947                           
  1948                           ;main.c: 235: }
  1949                           
  1950                           ;main.c: 234: break;
  1951  0125  2935               	goto	i1l112
  1952  0126                     i1l1984:	
  1953  0126  120A  158A  2306  120A  118A  	fcall	_USART_ReceiveChar
  1954                           
  1955                           ; Switch size 1, requested type "space"
  1956                           ; Number of cases is 3, Range of values is 67 to 83
  1957                           ; switch strategies available:
  1958                           ; Name         Instructions Cycles
  1959                           ; simple_byte           10     6 (average)
  1960                           ; direct_byte           62    11 (fixed)
  1961                           ; jumptable            263     9 (fixed)
  1962                           ;	Chosen strategy is simple_byte
  1963  012B  3A43               	xorlw	67	; case 67
  1964  012C  1903               	skipnz
  1965  012D  28FC               	goto	i1l1976
  1966  012E  3A13               	xorlw	19	; case 80
  1967  012F  1903               	skipnz
  1968  0130  2918               	goto	i1l134
  1969  0131  3A03               	xorlw	3	; case 83
  1970  0132  1903               	skipnz
  1971  0133  282D               	goto	i1l115
  1972  0134  2935               	goto	i1l112
  1973  0135                     i1l112:	
  1974                           
  1975                           ;main.c: 236: }
  1976                           ;main.c: 237: }
  1977                           ;main.c: 240: if (PIR1bits.TMR1IF) {
  1978  0135  1283               	bcf	3,5	;RP0=0, select bank0
  1979  0136  1303               	bcf	3,6	;RP1=0, select bank0
  1980  0137  1C0C               	btfss	12,0	;volatile
  1981  0138  2B74               	goto	i1l2056
  1982                           
  1983                           ;main.c: 242: RB4 = 1;
  1984  0139  1606               	bsf	6,4	;volatile
  1985                           
  1986                           ;main.c: 244: if (simulacao) {
  1987  013A  1683               	bsf	3,5	;RP0=1, select bank1
  1988  013B  1303               	bcf	3,6	;RP1=0, select bank1
  1989  013C  0851               	movf	_simulacao^(0+128),w
  1990  013D  1903               	btfsc	3,2
  1991  013E  2B5E               	goto	i1l2048
  1992                           
  1993                           ;main.c: 245: unsigned char low, high;
  1994                           ;main.c: 246: unsigned int inteiro = 0;
  1995  013F  01B8               	clrf	ISR@inteiro^(0+128)
  1996  0140  01B9               	clrf	(ISR@inteiro+1)^(0+128)
  1997                           
  1998                           ;main.c: 247: double amostra = 0;
  1999  0141  3000               	movlw	0
  2000  0142  00B3               	movwf	ISR@amostra^(0+128)
  2001  0143  3000               	movlw	0
  2002  0144  00B4               	movwf	(ISR@amostra+1)^(0+128)
  2003  0145  3000               	movlw	0
  2004  0146  00B5               	movwf	(ISR@amostra+2)^(0+128)
  2005                           
  2006                           ;main.c: 249: amostra = (sin(2.0 * 3.14159265358979323 * freq * tempo) * 2.5) + 2.5;
  2007  0147  0844               	movf	_tempo^(0+128),w
  2008  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2009  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2010  014A  00A0               	movwf	___ftmul@f1
  2011  014B  1683               	bsf	3,5	;RP0=1, select bank1
  2012  014C  1303               	bcf	3,6	;RP1=0, select bank1
  2013  014D  0845               	movf	(_tempo+1)^(0+128),w
  2014  014E  1283               	bcf	3,5	;RP0=0, select bank0
  2015  014F  1303               	bcf	3,6	;RP1=0, select bank0
  2016  0150  00A1               	movwf	___ftmul@f1+1
  2017  0151  1683               	bsf	3,5	;RP0=1, select bank1
  2018  0152  1303               	bcf	3,6	;RP1=0, select bank1
  2019  0153  0846               	movf	(_tempo+2)^(0+128),w
  2020  0154  1283               	bcf	3,5	;RP0=0, select bank0
  2021  0155  1303               	bcf	3,6	;RP1=0, select bank0
  2022  0156  00A2               	movwf	___ftmul@f1+2
  2023  0157  1683               	bsf	3,5	;RP0=1, select bank1
  2024  0158  1303               	bcf	3,6	;RP1=0, select bank1
  2025  0159  0853               	movf	(_freq+1)^(0+128),w
  2026  015A  00F9               	movwf	___lwtoft@c+1
  2027  015B  0852               	movf	_freq^(0+128),w
  2028  015C  00F8               	movwf	___lwtoft@c
  2029  015D  120A  158A  22BE  120A  118A  	fcall	___lwtoft
  2030  0162  0878               	movf	?___lwtoft,w
  2031  0163  1283               	bcf	3,5	;RP0=0, select bank0
  2032  0164  1303               	bcf	3,6	;RP1=0, select bank0
  2033  0165  00A3               	movwf	___ftmul@f2
  2034  0166  0879               	movf	?___lwtoft+1,w
  2035  0167  00A4               	movwf	___ftmul@f2+1
  2036  0168  087A               	movf	?___lwtoft+2,w
  2037  0169  00A5               	movwf	___ftmul@f2+2
  2038  016A  120A  118A  26CB  120A  118A  	fcall	___ftmul
  2039  016F  1283               	bcf	3,5	;RP0=0, select bank0
  2040  0170  1303               	bcf	3,6	;RP1=0, select bank0
  2041  0171  0820               	movf	?___ftmul,w
  2042  0172  1683               	bsf	3,5	;RP0=1, select bank1
  2043  0173  1303               	bcf	3,6	;RP1=0, select bank1
  2044  0174  00AA               	movwf	_ISR$886^(0+128)
  2045  0175  1283               	bcf	3,5	;RP0=0, select bank0
  2046  0176  1303               	bcf	3,6	;RP1=0, select bank0
  2047  0177  0821               	movf	?___ftmul+1,w
  2048  0178  1683               	bsf	3,5	;RP0=1, select bank1
  2049  0179  1303               	bcf	3,6	;RP1=0, select bank1
  2050  017A  00AB               	movwf	(_ISR$886+1)^(0+128)
  2051  017B  1283               	bcf	3,5	;RP0=0, select bank0
  2052  017C  1303               	bcf	3,6	;RP1=0, select bank0
  2053  017D  0822               	movf	?___ftmul+2,w
  2054  017E  1683               	bsf	3,5	;RP0=1, select bank1
  2055  017F  1303               	bcf	3,6	;RP1=0, select bank1
  2056  0180  00AC               	movwf	(_ISR$886+2)^(0+128)
  2057                           
  2058                           ;main.c: 249: amostra = (sin(2.0 * 3.14159265358979323 * freq * tempo) * 2.5) + 2.5;
  2059  0181  3010               	movlw	16
  2060  0182  1283               	bcf	3,5	;RP0=0, select bank0
  2061  0183  1303               	bcf	3,6	;RP1=0, select bank0
  2062  0184  00A0               	movwf	___ftmul@f1
  2063  0185  30C9               	movlw	201
  2064  0186  00A1               	movwf	___ftmul@f1+1
  2065  0187  3040               	movlw	64
  2066  0188  00A2               	movwf	___ftmul@f1+2
  2067  0189  1683               	bsf	3,5	;RP0=1, select bank1
  2068  018A  1303               	bcf	3,6	;RP1=0, select bank1
  2069  018B  082A               	movf	_ISR$886^(0+128),w
  2070  018C  1283               	bcf	3,5	;RP0=0, select bank0
  2071  018D  1303               	bcf	3,6	;RP1=0, select bank0
  2072  018E  00A3               	movwf	___ftmul@f2
  2073  018F  1683               	bsf	3,5	;RP0=1, select bank1
  2074  0190  1303               	bcf	3,6	;RP1=0, select bank1
  2075  0191  082B               	movf	(_ISR$886+1)^(0+128),w
  2076  0192  1283               	bcf	3,5	;RP0=0, select bank0
  2077  0193  1303               	bcf	3,6	;RP1=0, select bank0
  2078  0194  00A4               	movwf	___ftmul@f2+1
  2079  0195  1683               	bsf	3,5	;RP0=1, select bank1
  2080  0196  1303               	bcf	3,6	;RP1=0, select bank1
  2081  0197  082C               	movf	(_ISR$886+2)^(0+128),w
  2082  0198  1283               	bcf	3,5	;RP0=0, select bank0
  2083  0199  1303               	bcf	3,6	;RP1=0, select bank0
  2084  019A  00A5               	movwf	___ftmul@f2+2
  2085  019B  120A  118A  26CB  120A  118A  	fcall	___ftmul
  2086  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2087  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  2088  01A2  0820               	movf	?___ftmul,w
  2089  01A3  1683               	bsf	3,5	;RP0=1, select bank1
  2090  01A4  1303               	bcf	3,6	;RP1=0, select bank1
  2091  01A5  00AD               	movwf	_ISR$887^(0+128)
  2092  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  2093  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  2094  01A8  0821               	movf	?___ftmul+1,w
  2095  01A9  1683               	bsf	3,5	;RP0=1, select bank1
  2096  01AA  1303               	bcf	3,6	;RP1=0, select bank1
  2097  01AB  00AE               	movwf	(_ISR$887+1)^(0+128)
  2098  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  2099  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  2100  01AE  0822               	movf	?___ftmul+2,w
  2101  01AF  1683               	bsf	3,5	;RP0=1, select bank1
  2102  01B0  1303               	bcf	3,6	;RP1=0, select bank1
  2103  01B1  00AF               	movwf	(_ISR$887+2)^(0+128)
  2104                           
  2105                           ;main.c: 249: amostra = (sin(2.0 * 3.14159265358979323 * freq * tempo) * 2.5) + 2.5;
  2106  01B2  082D               	movf	_ISR$887^(0+128),w
  2107  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  2108  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  2109  01B5  00E3               	movwf	sin@f
  2110  01B6  1683               	bsf	3,5	;RP0=1, select bank1
  2111  01B7  1303               	bcf	3,6	;RP1=0, select bank1
  2112  01B8  082E               	movf	(_ISR$887+1)^(0+128),w
  2113  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  2114  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  2115  01BB  00E4               	movwf	sin@f+1
  2116  01BC  1683               	bsf	3,5	;RP0=1, select bank1
  2117  01BD  1303               	bcf	3,6	;RP1=0, select bank1
  2118  01BE  082F               	movf	(_ISR$887+2)^(0+128),w
  2119  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  2120  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  2121  01C1  00E5               	movwf	sin@f+2
  2122  01C2  120A  118A  23DB  120A  118A  	fcall	_sin
  2123  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2124  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  2125  01C9  0863               	movf	?_sin,w
  2126  01CA  1683               	bsf	3,5	;RP0=1, select bank1
  2127  01CB  1303               	bcf	3,6	;RP1=0, select bank1
  2128  01CC  00B0               	movwf	_ISR$888^(0+128)
  2129  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  2130  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  2131  01CF  0864               	movf	?_sin+1,w
  2132  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  2133  01D1  1303               	bcf	3,6	;RP1=0, select bank1
  2134  01D2  00B1               	movwf	(_ISR$888+1)^(0+128)
  2135  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  2136  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  2137  01D5  0865               	movf	?_sin+2,w
  2138  01D6  1683               	bsf	3,5	;RP0=1, select bank1
  2139  01D7  1303               	bcf	3,6	;RP1=0, select bank1
  2140  01D8  00B2               	movwf	(_ISR$888+2)^(0+128)
  2141                           
  2142                           ;main.c: 249: amostra = (sin(2.0 * 3.14159265358979323 * freq * tempo) * 2.5) + 2.5;
  2143  01D9  3000               	movlw	0
  2144  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2145  01DB  1303               	bcf	3,6	;RP1=0, select bank0
  2146  01DC  00C0               	movwf	___ftadd@f1
  2147  01DD  3020               	movlw	32
  2148  01DE  00C1               	movwf	___ftadd@f1+1
  2149  01DF  3040               	movlw	64
  2150  01E0  00C2               	movwf	___ftadd@f1+2
  2151  01E1  3000               	movlw	0
  2152  01E2  00A0               	movwf	___ftmul@f1
  2153  01E3  3020               	movlw	32
  2154  01E4  00A1               	movwf	___ftmul@f1+1
  2155  01E5  3040               	movlw	64
  2156  01E6  00A2               	movwf	___ftmul@f1+2
  2157  01E7  1683               	bsf	3,5	;RP0=1, select bank1
  2158  01E8  1303               	bcf	3,6	;RP1=0, select bank1
  2159  01E9  0830               	movf	_ISR$888^(0+128),w
  2160  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2161  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  2162  01EC  00A3               	movwf	___ftmul@f2
  2163  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  2164  01EE  1303               	bcf	3,6	;RP1=0, select bank1
  2165  01EF  0831               	movf	(_ISR$888+1)^(0+128),w
  2166  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  2167  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  2168  01F2  00A4               	movwf	___ftmul@f2+1
  2169  01F3  1683               	bsf	3,5	;RP0=1, select bank1
  2170  01F4  1303               	bcf	3,6	;RP1=0, select bank1
  2171  01F5  0832               	movf	(_ISR$888+2)^(0+128),w
  2172  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  2173  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  2174  01F8  00A5               	movwf	___ftmul@f2+2
  2175  01F9  120A  118A  26CB  120A  118A  	fcall	___ftmul
  2176  01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2177  01FF  1303               	bcf	3,6	;RP1=0, select bank0
  2178  0200  0820               	movf	?___ftmul,w
  2179  0201  00C3               	movwf	___ftadd@f2
  2180  0202  0821               	movf	?___ftmul+1,w
  2181  0203  00C4               	movwf	___ftadd@f2+1
  2182  0204  0822               	movf	?___ftmul+2,w
  2183  0205  00C5               	movwf	___ftadd@f2+2
  2184  0206  120A  118A  25C2  120A  118A  	fcall	___ftadd
  2185  020B  1283               	bcf	3,5	;RP0=0, select bank0
  2186  020C  1303               	bcf	3,6	;RP1=0, select bank0
  2187  020D  0840               	movf	?___ftadd,w
  2188  020E  1683               	bsf	3,5	;RP0=1, select bank1
  2189  020F  1303               	bcf	3,6	;RP1=0, select bank1
  2190  0210  00B3               	movwf	ISR@amostra^(0+128)
  2191  0211  1283               	bcf	3,5	;RP0=0, select bank0
  2192  0212  1303               	bcf	3,6	;RP1=0, select bank0
  2193  0213  0841               	movf	?___ftadd+1,w
  2194  0214  1683               	bsf	3,5	;RP0=1, select bank1
  2195  0215  1303               	bcf	3,6	;RP1=0, select bank1
  2196  0216  00B4               	movwf	(ISR@amostra+1)^(0+128)
  2197  0217  1283               	bcf	3,5	;RP0=0, select bank0
  2198  0218  1303               	bcf	3,6	;RP1=0, select bank0
  2199  0219  0842               	movf	?___ftadd+2,w
  2200  021A  1683               	bsf	3,5	;RP0=1, select bank1
  2201  021B  1303               	bcf	3,6	;RP1=0, select bank1
  2202  021C  00B5               	movwf	(ISR@amostra+2)^(0+128)
  2203                           
  2204                           ;main.c: 250: tempo = tempo + (1.0 / fs);
  2205  021D  0844               	movf	_tempo^(0+128),w
  2206  021E  1283               	bcf	3,5	;RP0=0, select bank0
  2207  021F  1303               	bcf	3,6	;RP1=0, select bank0
  2208  0220  00C0               	movwf	___ftadd@f1
  2209  0221  1683               	bsf	3,5	;RP0=1, select bank1
  2210  0222  1303               	bcf	3,6	;RP1=0, select bank1
  2211  0223  0845               	movf	(_tempo+1)^(0+128),w
  2212  0224  1283               	bcf	3,5	;RP0=0, select bank0
  2213  0225  1303               	bcf	3,6	;RP1=0, select bank0
  2214  0226  00C1               	movwf	___ftadd@f1+1
  2215  0227  1683               	bsf	3,5	;RP0=1, select bank1
  2216  0228  1303               	bcf	3,6	;RP1=0, select bank1
  2217  0229  0846               	movf	(_tempo+2)^(0+128),w
  2218  022A  1283               	bcf	3,5	;RP0=0, select bank0
  2219  022B  1303               	bcf	3,6	;RP1=0, select bank0
  2220  022C  00C2               	movwf	___ftadd@f1+2
  2221  022D  1683               	bsf	3,5	;RP0=1, select bank1
  2222  022E  1303               	bcf	3,6	;RP1=0, select bank1
  2223  022F  0855               	movf	(_fs+1)^(0+128),w
  2224  0230  00F9               	movwf	___lwtoft@c+1
  2225  0231  0854               	movf	_fs^(0+128),w
  2226  0232  00F8               	movwf	___lwtoft@c
  2227  0233  120A  158A  22BE  120A  118A  	fcall	___lwtoft
  2228  0238  0878               	movf	?___lwtoft,w
  2229  0239  1283               	bcf	3,5	;RP0=0, select bank0
  2230  023A  1303               	bcf	3,6	;RP1=0, select bank0
  2231  023B  00B0               	movwf	___ftdiv@f2
  2232  023C  0879               	movf	?___lwtoft+1,w
  2233  023D  00B1               	movwf	___ftdiv@f2+1
  2234  023E  087A               	movf	?___lwtoft+2,w
  2235  023F  00B2               	movwf	___ftdiv@f2+2
  2236  0240  3000               	movlw	0
  2237  0241  00B3               	movwf	___ftdiv@f1
  2238  0242  3080               	movlw	128
  2239  0243  00B4               	movwf	___ftdiv@f1+1
  2240  0244  303F               	movlw	63
  2241  0245  00B5               	movwf	___ftdiv@f1+2
  2242  0246  120A  158A  2748  120A  118A  	fcall	___ftdiv
  2243  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2244  024C  1303               	bcf	3,6	;RP1=0, select bank0
  2245  024D  0830               	movf	?___ftdiv,w
  2246  024E  00C3               	movwf	___ftadd@f2
  2247  024F  0831               	movf	?___ftdiv+1,w
  2248  0250  00C4               	movwf	___ftadd@f2+1
  2249  0251  0832               	movf	?___ftdiv+2,w
  2250  0252  00C5               	movwf	___ftadd@f2+2
  2251  0253  120A  118A  25C2  120A  118A  	fcall	___ftadd
  2252  0258  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0259  1303               	bcf	3,6	;RP1=0, select bank0
  2254  025A  0840               	movf	?___ftadd,w
  2255  025B  1683               	bsf	3,5	;RP0=1, select bank1
  2256  025C  1303               	bcf	3,6	;RP1=0, select bank1
  2257  025D  00C4               	movwf	_tempo^(0+128)
  2258  025E  1283               	bcf	3,5	;RP0=0, select bank0
  2259  025F  1303               	bcf	3,6	;RP1=0, select bank0
  2260  0260  0841               	movf	?___ftadd+1,w
  2261  0261  1683               	bsf	3,5	;RP0=1, select bank1
  2262  0262  1303               	bcf	3,6	;RP1=0, select bank1
  2263  0263  00C5               	movwf	(_tempo+1)^(0+128)
  2264  0264  1283               	bcf	3,5	;RP0=0, select bank0
  2265  0265  1303               	bcf	3,6	;RP1=0, select bank0
  2266  0266  0842               	movf	?___ftadd+2,w
  2267  0267  1683               	bsf	3,5	;RP0=1, select bank1
  2268  0268  1303               	bcf	3,6	;RP1=0, select bank1
  2269  0269  00C6               	movwf	(_tempo+2)^(0+128)
  2270                           
  2271                           ;main.c: 251: inteiro = (unsigned int) (amostra / 0.004887586);
  2272  026A  0833               	movf	ISR@amostra^(0+128),w
  2273  026B  1283               	bcf	3,5	;RP0=0, select bank0
  2274  026C  1303               	bcf	3,6	;RP1=0, select bank0
  2275  026D  00B3               	movwf	___ftdiv@f1
  2276  026E  1683               	bsf	3,5	;RP0=1, select bank1
  2277  026F  1303               	bcf	3,6	;RP1=0, select bank1
  2278  0270  0834               	movf	(ISR@amostra+1)^(0+128),w
  2279  0271  1283               	bcf	3,5	;RP0=0, select bank0
  2280  0272  1303               	bcf	3,6	;RP1=0, select bank0
  2281  0273  00B4               	movwf	___ftdiv@f1+1
  2282  0274  1683               	bsf	3,5	;RP0=1, select bank1
  2283  0275  1303               	bcf	3,6	;RP1=0, select bank1
  2284  0276  0835               	movf	(ISR@amostra+2)^(0+128),w
  2285  0277  1283               	bcf	3,5	;RP0=0, select bank0
  2286  0278  1303               	bcf	3,6	;RP1=0, select bank0
  2287  0279  00B5               	movwf	___ftdiv@f1+2
  2288  027A  3028               	movlw	40
  2289  027B  00B0               	movwf	___ftdiv@f2
  2290  027C  30A0               	movlw	160
  2291  027D  00B1               	movwf	___ftdiv@f2+1
  2292  027E  303B               	movlw	59
  2293  027F  00B2               	movwf	___ftdiv@f2+2
  2294  0280  120A  158A  2748  120A  118A  	fcall	___ftdiv
  2295  0285  1283               	bcf	3,5	;RP0=0, select bank0
  2296  0286  1303               	bcf	3,6	;RP1=0, select bank0
  2297  0287  0830               	movf	?___ftdiv,w
  2298  0288  00C0               	movwf	___fttol@f1
  2299  0289  0831               	movf	?___ftdiv+1,w
  2300  028A  00C1               	movwf	___fttol@f1+1
  2301  028B  0832               	movf	?___ftdiv+2,w
  2302  028C  00C2               	movwf	___fttol@f1+2
  2303  028D  120A  158A  24E4  120A  118A  	fcall	___fttol
  2304  0292  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0293  1303               	bcf	3,6	;RP1=0, select bank0
  2306  0294  0841               	movf	?___fttol+1,w
  2307  0295  1683               	bsf	3,5	;RP0=1, select bank1
  2308  0296  1303               	bcf	3,6	;RP1=0, select bank1
  2309  0297  00B9               	movwf	(ISR@inteiro+1)^(0+128)
  2310  0298  1283               	bcf	3,5	;RP0=0, select bank0
  2311  0299  1303               	bcf	3,6	;RP1=0, select bank0
  2312  029A  0840               	movf	?___fttol,w
  2313  029B  1683               	bsf	3,5	;RP0=1, select bank1
  2314  029C  1303               	bcf	3,6	;RP1=0, select bank1
  2315  029D  00B8               	movwf	ISR@inteiro^(0+128)
  2316                           
  2317                           ;main.c: 253: high = inteiro >> 8;
  2318  029E  0839               	movf	(ISR@inteiro+1)^(0+128),w
  2319  029F  1283               	bcf	3,5	;RP0=0, select bank0
  2320  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  2321  02A1  00E7               	movwf	??_ISR
  2322  02A2  0867               	movf	??_ISR,w
  2323  02A3  1683               	bsf	3,5	;RP0=1, select bank1
  2324  02A4  1303               	bcf	3,6	;RP1=0, select bank1
  2325  02A5  00B7               	movwf	ISR@high^(0+128)
  2326                           
  2327                           ;main.c: 254: low = inteiro;
  2328  02A6  0838               	movf	ISR@inteiro^(0+128),w
  2329  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  2330  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  2331  02A9  00E7               	movwf	??_ISR
  2332  02AA  0867               	movf	??_ISR,w
  2333  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  2334  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  2335  02AD  00B6               	movwf	ISR@low^(0+128)
  2336                           
  2337                           ;main.c: 256: if (inteiro == 48) {
  2338  02AE  3030               	movlw	48
  2339  02AF  0638               	xorwf	ISR@inteiro^(0+128),w
  2340  02B0  0439               	iorwf	(ISR@inteiro+1)^(0+128),w
  2341  02B1  1D03               	btfss	3,2
  2342  02B2  2AC3               	goto	i1l2014
  2343                           
  2344                           ;main.c: 257: high = 0x11;
  2345  02B3  3011               	movlw	17
  2346  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2347  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  2348  02B6  00E7               	movwf	??_ISR
  2349  02B7  0867               	movf	??_ISR,w
  2350  02B8  1683               	bsf	3,5	;RP0=1, select bank1
  2351  02B9  1303               	bcf	3,6	;RP1=0, select bank1
  2352  02BA  00B7               	movwf	ISR@high^(0+128)
  2353                           
  2354                           ;main.c: 258: low = 0x11;
  2355  02BB  3011               	movlw	17
  2356  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  2357  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  2358  02BE  00E7               	movwf	??_ISR
  2359  02BF  0867               	movf	??_ISR,w
  2360  02C0  1683               	bsf	3,5	;RP0=1, select bank1
  2361  02C1  1303               	bcf	3,6	;RP1=0, select bank1
  2362  02C2  00B6               	movwf	ISR@low^(0+128)
  2363  02C3                     i1l2014:	
  2364                           
  2365                           ;main.c: 259: }
  2366                           ;main.c: 261: if (inteiro == 304) {
  2367  02C3  3030               	movlw	48
  2368  02C4  0638               	xorwf	ISR@inteiro^(0+128),w
  2369  02C5  1D03               	skipz
  2370  02C6  2ADA               	goto	i1l2018
  2371  02C7  0339               	decf	(ISR@inteiro+1)^(0+128),w
  2372  02C8  1D03               	btfss	3,2
  2373  02C9  2ADA               	goto	i1l2018
  2374                           
  2375                           ;main.c: 262: high = 0x22;
  2376  02CA  3022               	movlw	34
  2377  02CB  1283               	bcf	3,5	;RP0=0, select bank0
  2378  02CC  1303               	bcf	3,6	;RP1=0, select bank0
  2379  02CD  00E7               	movwf	??_ISR
  2380  02CE  0867               	movf	??_ISR,w
  2381  02CF  1683               	bsf	3,5	;RP0=1, select bank1
  2382  02D0  1303               	bcf	3,6	;RP1=0, select bank1
  2383  02D1  00B7               	movwf	ISR@high^(0+128)
  2384                           
  2385                           ;main.c: 263: low = 0x22;
  2386  02D2  3022               	movlw	34
  2387  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  2388  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  2389  02D5  00E7               	movwf	??_ISR
  2390  02D6  0867               	movf	??_ISR,w
  2391  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  2392  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  2393  02D9  00B6               	movwf	ISR@low^(0+128)
  2394  02DA                     i1l2018:	
  2395                           
  2396                           ;main.c: 264: }
  2397                           ;main.c: 266: if (inteiro == 560) {
  2398  02DA  3030               	movlw	48
  2399  02DB  0638               	xorwf	ISR@inteiro^(0+128),w
  2400  02DC  3002               	movlw	2
  2401  02DD  1903               	skipnz
  2402  02DE  0639               	xorwf	(ISR@inteiro+1)^(0+128),w
  2403  02DF  1D03               	btfss	3,2
  2404  02E0  2AF1               	goto	i1l2022
  2405                           
  2406                           ;main.c: 267: high = 0x33;
  2407  02E1  3033               	movlw	51
  2408  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2409  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2410  02E4  00E7               	movwf	??_ISR
  2411  02E5  0867               	movf	??_ISR,w
  2412  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  2413  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  2414  02E8  00B7               	movwf	ISR@high^(0+128)
  2415                           
  2416                           ;main.c: 268: low = 0x33;
  2417  02E9  3033               	movlw	51
  2418  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2419  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  2420  02EC  00E7               	movwf	??_ISR
  2421  02ED  0867               	movf	??_ISR,w
  2422  02EE  1683               	bsf	3,5	;RP0=1, select bank1
  2423  02EF  1303               	bcf	3,6	;RP1=0, select bank1
  2424  02F0  00B6               	movwf	ISR@low^(0+128)
  2425  02F1                     i1l2022:	
  2426                           
  2427                           ;main.c: 269: }
  2428                           ;main.c: 270: if (inteiro == 816) {
  2429  02F1  3030               	movlw	48
  2430  02F2  0638               	xorwf	ISR@inteiro^(0+128),w
  2431  02F3  3003               	movlw	3
  2432  02F4  1903               	skipnz
  2433  02F5  0639               	xorwf	(ISR@inteiro+1)^(0+128),w
  2434  02F6  1D03               	btfss	3,2
  2435  02F7  2B08               	goto	i1l2026
  2436                           
  2437                           ;main.c: 271: high = 0x44;
  2438  02F8  3044               	movlw	68
  2439  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  2440  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  2441  02FB  00E7               	movwf	??_ISR
  2442  02FC  0867               	movf	??_ISR,w
  2443  02FD  1683               	bsf	3,5	;RP0=1, select bank1
  2444  02FE  1303               	bcf	3,6	;RP1=0, select bank1
  2445  02FF  00B7               	movwf	ISR@high^(0+128)
  2446                           
  2447                           ;main.c: 272: low = 0x44;
  2448  0300  3044               	movlw	68
  2449  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0302  1303               	bcf	3,6	;RP1=0, select bank0
  2451  0303  00E7               	movwf	??_ISR
  2452  0304  0867               	movf	??_ISR,w
  2453  0305  1683               	bsf	3,5	;RP0=1, select bank1
  2454  0306  1303               	bcf	3,6	;RP1=0, select bank1
  2455  0307  00B6               	movwf	ISR@low^(0+128)
  2456  0308                     i1l2026:	
  2457                           
  2458                           ;main.c: 273: }
  2459                           ;main.c: 275: if (high == '\0') {
  2460  0308  0837               	movf	ISR@high^(0+128),w
  2461  0309  1D03               	btfss	3,2
  2462  030A  2B0D               	goto	i1l2030
  2463                           
  2464                           ;main.c: 276: USART_WriteChar('0');
  2465  030B  3030               	movlw	48
  2466  030C  2B1C               	goto	L5
  2467  030D                     i1l2030:	
  2468                           ;main.c: 277: } else {
  2469                           
  2470                           
  2471                           ;main.c: 278: USART_WriteChar('[');
  2472  030D  305B               	movlw	91
  2473  030E  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2474                           
  2475                           ;main.c: 279: USART_WriteChar(high);
  2476  0313  1683               	bsf	3,5	;RP0=1, select bank1
  2477  0314  1303               	bcf	3,6	;RP1=0, select bank1
  2478  0315  0837               	movf	ISR@high^(0+128),w
  2479  0316  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2480                           
  2481                           ;main.c: 280: USART_WriteChar(']');
  2482  031B  305D               	movlw	93
  2483  031C                     L5:	
  2484  031C  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2485                           
  2486                           ;main.c: 281: }
  2487                           ;main.c: 283: if (low == '\0') {
  2488  0321  1683               	bsf	3,5	;RP0=1, select bank1
  2489  0322  1303               	bcf	3,6	;RP1=0, select bank1
  2490  0323  0836               	movf	ISR@low^(0+128),w
  2491  0324  1D03               	btfss	3,2
  2492  0325  2B28               	goto	i1l2036
  2493                           
  2494                           ;main.c: 284: USART_WriteChar('0');
  2495  0326  3030               	movlw	48
  2496  0327  2B37               	goto	L6
  2497  0328                     i1l2036:	
  2498                           ;main.c: 285: } else {
  2499                           
  2500                           
  2501                           ;main.c: 286: USART_WriteChar('{');
  2502  0328  307B               	movlw	123
  2503  0329  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2504                           
  2505                           ;main.c: 287: USART_WriteChar(low);
  2506  032E  1683               	bsf	3,5	;RP0=1, select bank1
  2507  032F  1303               	bcf	3,6	;RP1=0, select bank1
  2508  0330  0836               	movf	ISR@low^(0+128),w
  2509  0331  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2510                           
  2511                           ;main.c: 288: USART_WriteChar('}');
  2512  0336  307D               	movlw	125
  2513  0337                     L6:	
  2514  0337  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2515                           
  2516                           ;main.c: 289: }
  2517                           ;main.c: 306: if (a == fs) {
  2518  033C  1683               	bsf	3,5	;RP0=1, select bank1
  2519  033D  1303               	bcf	3,6	;RP1=0, select bank1
  2520  033E  0855               	movf	(_fs+1)^(0+128),w
  2521  033F  0650               	xorwf	(_a+1)^(0+128),w
  2522  0340  1D03               	skipz
  2523  0341  2B44               	goto	u245_25
  2524  0342  0854               	movf	_fs^(0+128),w
  2525  0343  064F               	xorwf	_a^(0+128),w
  2526  0344                     u245_25:	
  2527  0344  1D03               	skipz
  2528  0345  2B57               	goto	i1l2046
  2529                           
  2530                           ;main.c: 316: tempo = 0;
  2531  0346  3000               	movlw	0
  2532  0347  00C4               	movwf	_tempo^(0+128)
  2533  0348  3000               	movlw	0
  2534  0349  00C5               	movwf	(_tempo+1)^(0+128)
  2535  034A  3000               	movlw	0
  2536  034B  00C6               	movwf	(_tempo+2)^(0+128)
  2537                           
  2538                           ;main.c: 317: amostra = 0;
  2539  034C  3000               	movlw	0
  2540  034D  00B3               	movwf	ISR@amostra^(0+128)
  2541  034E  3000               	movlw	0
  2542  034F  00B4               	movwf	(ISR@amostra+1)^(0+128)
  2543  0350  3000               	movlw	0
  2544  0351  00B5               	movwf	(ISR@amostra+2)^(0+128)
  2545                           
  2546                           ;main.c: 318: inteiro = 0;
  2547  0352  01B8               	clrf	ISR@inteiro^(0+128)
  2548  0353  01B9               	clrf	(ISR@inteiro+1)^(0+128)
  2549                           
  2550                           ;main.c: 319: a = 0;
  2551  0354  01CF               	clrf	_a^(0+128)
  2552  0355  01D0               	clrf	(_a+1)^(0+128)
  2553                           
  2554                           ;main.c: 320: } else {
  2555  0356  2B66               	goto	i1l2050
  2556  0357                     i1l2046:	
  2557                           
  2558                           ;main.c: 321: a++;
  2559  0357  3001               	movlw	1
  2560  0358  07CF               	addwf	_a^(0+128),f
  2561  0359  1803               	skipnc
  2562  035A  0AD0               	incf	(_a+1)^(0+128),f
  2563  035B  3000               	movlw	0
  2564  035C  07D0               	addwf	(_a+1)^(0+128),f
  2565                           
  2566                           ;main.c: 322: }
  2567                           ;main.c: 323: } else {
  2568  035D  2B66               	goto	i1l2050
  2569  035E                     i1l2048:	
  2570                           
  2571                           ;main.c: 324: ADC_Read(0);
  2572  035E  3000               	movlw	0
  2573  035F  00F0               	movwf	ADC_Read@channel
  2574  0360  00F1               	movwf	ADC_Read@channel+1
  2575  0361  120A  158A  22D2  120A  118A  	fcall	_ADC_Read
  2576  0366                     i1l2050:	
  2577                           
  2578                           ;main.c: 325: }
  2579                           ;main.c: 327: TMR1 = contagens;
  2580  0366  1683               	bsf	3,5	;RP0=1, select bank1
  2581  0367  1303               	bcf	3,6	;RP1=0, select bank1
  2582  0368  084A               	movf	(_contagens+1)^(0+128),w
  2583  0369  1283               	bcf	3,5	;RP0=0, select bank0
  2584  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2585  036B  008F               	movwf	15	;volatile
  2586  036C  1683               	bsf	3,5	;RP0=1, select bank1
  2587  036D  1303               	bcf	3,6	;RP1=0, select bank1
  2588  036E  0849               	movf	_contagens^(0+128),w
  2589  036F  1283               	bcf	3,5	;RP0=0, select bank0
  2590  0370  1303               	bcf	3,6	;RP1=0, select bank0
  2591  0371  008E               	movwf	14	;volatile
  2592                           
  2593                           ;main.c: 329: PIR1bits.TMR1IF = 0;
  2594  0372  100C               	bcf	12,0	;volatile
  2595                           
  2596                           ;main.c: 331: RB4 = 0;
  2597  0373  1206               	bcf	6,4	;volatile
  2598  0374                     i1l2056:	
  2599                           
  2600                           ;main.c: 333: }
  2601                           ;main.c: 336: if (PIR1bits.ADIF) {
  2602  0374  1F0C               	btfss	12,6	;volatile
  2603  0375  2BD0               	goto	i1l156
  2604                           
  2605                           ;main.c: 337: if (a == 0) {
  2606  0376  1683               	bsf	3,5	;RP0=1, select bank1
  2607  0377  1303               	bcf	3,6	;RP1=0, select bank1
  2608  0378  084F               	movf	_a^(0+128),w
  2609  0379  0450               	iorwf	(_a+1)^(0+128),w
  2610  037A  1D03               	btfss	3,2
  2611  037B  2B82               	goto	i1l2062
  2612                           
  2613                           ;main.c: 338: USART_WriteChar('$');
  2614  037C  3024               	movlw	36
  2615  037D  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2616  0382                     i1l2062:	
  2617                           
  2618                           ;main.c: 339: }
  2619                           ;main.c: 341: if (ADRESH == '\0') {
  2620  0382  1283               	bcf	3,5	;RP0=0, select bank0
  2621  0383  1303               	bcf	3,6	;RP1=0, select bank0
  2622  0384  081E               	movf	30,w	;volatile
  2623  0385  1D03               	btfss	3,2
  2624  0386  2B89               	goto	i1l2066
  2625                           
  2626                           ;main.c: 342: USART_WriteChar('0');
  2627  0387  3030               	movlw	48
  2628  0388  2B8C               	goto	L7
  2629  0389                     i1l2066:	
  2630                           ;main.c: 343: } else {
  2631                           
  2632                           
  2633                           ;main.c: 344: USART_WriteChar(ADRESH);
  2634  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2635  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2636  038B  081E               	movf	30,w	;volatile
  2637  038C                     L7:	
  2638  038C  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2639                           
  2640                           ;main.c: 345: }
  2641                           ;main.c: 347: if (ADRESL == '\0') {
  2642  0391  1683               	bsf	3,5	;RP0=1, select bank1
  2643  0392  1303               	bcf	3,6	;RP1=0, select bank1
  2644  0393  081E               	movf	30,w	;volatile
  2645  0394  1D03               	btfss	3,2
  2646  0395  2B98               	goto	i1l2072
  2647                           
  2648                           ;main.c: 348: USART_WriteChar('0');
  2649  0396  3030               	movlw	48
  2650  0397  2B9B               	goto	L8
  2651  0398                     i1l2072:	
  2652                           ;main.c: 349: } else {
  2653                           
  2654                           
  2655                           ;main.c: 350: USART_WriteChar(ADRESL);
  2656  0398  1683               	bsf	3,5	;RP0=1, select bank1
  2657  0399  1303               	bcf	3,6	;RP1=0, select bank1
  2658  039A  081E               	movf	30,w	;volatile
  2659  039B                     L8:	
  2660  039B  120A  158A  2282  120A  118A  	fcall	_USART_WriteChar
  2661                           
  2662                           ;main.c: 351: }
  2663                           ;main.c: 353: if (a == (fs - 1)) {
  2664  03A0  1683               	bsf	3,5	;RP0=1, select bank1
  2665  03A1  1303               	bcf	3,6	;RP1=0, select bank1
  2666  03A2  0854               	movf	_fs^(0+128),w
  2667  03A3  3EFF               	addlw	255
  2668  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  2669  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  2670  03A6  00E7               	movwf	??_ISR
  2671  03A7  1683               	bsf	3,5	;RP0=1, select bank1
  2672  03A8  1303               	bcf	3,6	;RP1=0, select bank1
  2673  03A9  0855               	movf	(_fs+1)^(0+128),w
  2674  03AA  1803               	skipnc
  2675  03AB  3E01               	addlw	1
  2676  03AC  3EFF               	addlw	255
  2677  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2678  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2679  03AF  00E8               	movwf	??_ISR+1
  2680  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2681  03B1  1303               	bcf	3,6	;RP1=0, select bank1
  2682  03B2  0850               	movf	(_a+1)^(0+128),w
  2683  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  2684  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  2685  03B5  0668               	xorwf	??_ISR+1,w
  2686  03B6  1D03               	skipz
  2687  03B7  2BBE               	goto	u250_25
  2688  03B8  1683               	bsf	3,5	;RP0=1, select bank1
  2689  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  2690  03BA  084F               	movf	_a^(0+128),w
  2691  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2692  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  2693  03BD  0667               	xorwf	??_ISR,w
  2694  03BE                     u250_25:	
  2695  03BE  1D03               	skipz
  2696  03BF  2BC5               	goto	i1l2078
  2697                           
  2698                           ;main.c: 354: a = 0;
  2699  03C0  1683               	bsf	3,5	;RP0=1, select bank1
  2700  03C1  1303               	bcf	3,6	;RP1=0, select bank1
  2701  03C2  01CF               	clrf	_a^(0+128)
  2702  03C3  01D0               	clrf	(_a+1)^(0+128)
  2703                           
  2704                           ;main.c: 355: } else {
  2705  03C4  2BCD               	goto	i1l2080
  2706  03C5                     i1l2078:	
  2707                           
  2708                           ;main.c: 356: a++;
  2709  03C5  3001               	movlw	1
  2710  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  2711  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  2712  03C8  07CF               	addwf	_a^(0+128),f
  2713  03C9  1803               	skipnc
  2714  03CA  0AD0               	incf	(_a+1)^(0+128),f
  2715  03CB  3000               	movlw	0
  2716  03CC  07D0               	addwf	(_a+1)^(0+128),f
  2717  03CD                     i1l2080:	
  2718                           
  2719                           ;main.c: 357: }
  2720                           ;main.c: 359: PIR1bits.ADIF = 0;
  2721  03CD  1283               	bcf	3,5	;RP0=0, select bank0
  2722  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2723  03CF  130C               	bcf	12,6	;volatile
  2724  03D0                     i1l156:	
  2725  03D0  086C               	movf	??_ISR+5,w
  2726  03D1  00FF               	movwf	127
  2727  03D2  086B               	movf	??_ISR+4,w
  2728  03D3  008A               	movwf	10
  2729  03D4  086A               	movf	??_ISR+3,w
  2730  03D5  0084               	movwf	4
  2731  03D6  0E69               	swapf	(??_ISR+2)^0,w
  2732  03D7  0083               	movwf	3
  2733  03D8  0EFE               	swapf	126,f
  2734  03D9  0E7E               	swapf	126,w
  2735  03DA  0009               	retfie
  2736  03DB                     __end_of_ISR:	
  2737                           
  2738                           	psect	intentry
  2739  0004                     __pintentry:	
  2740                           ;incstack = 0
  2741                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2742                           
  2743  0004                     interrupt_function:	
  2744  007E                     saved_w	set	btemp
  2745  0004  00FE               	movwf	btemp
  2746  0005  0E03               	swapf	3,w
  2747  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2748  0007  1303               	bcf	3,6	;RP1=0, select bank0
  2749  0008  00E9               	movwf	??_ISR+2
  2750  0009  0804               	movf	4,w
  2751  000A  00EA               	movwf	??_ISR+3
  2752  000B  080A               	movf	10,w
  2753  000C  00EB               	movwf	??_ISR+4
  2754  000D  087F               	movf	btemp+1,w
  2755  000E  00EC               	movwf	??_ISR+5
  2756  000F  120A  118A  2822   	ljmp	_ISR
  2757                           
  2758                           	psect	text5
  2759  03DB                     __ptext5:	
  2760 ;; *************** function _sin *****************
  2761 ;; Defined at:
  2762 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\sin.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;  f               3   67[BANK0 ] void 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  x2              3    6[BANK1 ] void 
  2767 ;;  y               3    0[BANK1 ] void 
  2768 ;;  sgn             1    9[BANK1 ] unsigned char 
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  3   67[BANK0 ] unsigned char 
  2771 ;; Registers used:
  2772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2778 ;;      Params:         0       3       0       0       0
  2779 ;;      Locals:         0       0      10       0       0
  2780 ;;      Temps:          0       1       0       0       0
  2781 ;;      Totals:         0       4      10       0       0
  2782 ;;Total ram usage:       14 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    3
  2785 ;; This function calls:
  2786 ;;		___ftadd
  2787 ;;		___ftdiv
  2788 ;;		___ftge
  2789 ;;		___ftmul
  2790 ;;		___ftneg
  2791 ;;		___ftsub
  2792 ;;		_eval_poly
  2793 ;;		_floor
  2794 ;; This function is called by:
  2795 ;;		_ISR
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _sin
  2801  03DB                     _sin:	
  2802                           
  2803                           ;incstack = 0
  2804                           ; Regs used in _sin: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2805  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  2806  03DC  1303               	bcf	3,6	;RP1=0, select bank1
  2807  03DD  01A9               	clrf	sin@sgn^(0+128)
  2808  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2809  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2810  03E0  0863               	movf	sin@f,w
  2811  03E1  00F0               	movwf	___ftge@ff1
  2812  03E2  0864               	movf	sin@f+1,w
  2813  03E3  00F1               	movwf	___ftge@ff1+1
  2814  03E4  0865               	movf	sin@f+2,w
  2815  03E5  00F2               	movwf	___ftge@ff1+2
  2816  03E6  3000               	movlw	0
  2817  03E7  00F3               	movwf	___ftge@ff2
  2818  03E8  3000               	movlw	0
  2819  03E9  00F4               	movwf	___ftge@ff2+1
  2820  03EA  3000               	movlw	0
  2821  03EB  00F5               	movwf	___ftge@ff2+2
  2822  03EC  120A  118A  279E  120A  118A  	fcall	___ftge
  2823  03F1  1803               	btfsc	3,0
  2824  03F2  2C0C               	goto	i1l1892
  2825  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2826  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2827  03F5  0863               	movf	sin@f,w
  2828  03F6  00F0               	movwf	___ftneg@f1
  2829  03F7  0864               	movf	sin@f+1,w
  2830  03F8  00F1               	movwf	___ftneg@f1+1
  2831  03F9  0865               	movf	sin@f+2,w
  2832  03FA  00F2               	movwf	___ftneg@f1+2
  2833  03FB  120A  158A  228A  120A  118A  	fcall	___ftneg
  2834  0400  0870               	movf	?___ftneg,w
  2835  0401  1283               	bcf	3,5	;RP0=0, select bank0
  2836  0402  1303               	bcf	3,6	;RP1=0, select bank0
  2837  0403  00E3               	movwf	sin@f
  2838  0404  0871               	movf	?___ftneg+1,w
  2839  0405  00E4               	movwf	sin@f+1
  2840  0406  0872               	movf	?___ftneg+2,w
  2841  0407  00E5               	movwf	sin@f+2
  2842  0408  1683               	bsf	3,5	;RP0=1, select bank1
  2843  0409  1303               	bcf	3,6	;RP1=0, select bank1
  2844  040A  01A9               	clrf	sin@sgn^(0+128)
  2845  040B  0AA9               	incf	sin@sgn^(0+128),f
  2846  040C                     i1l1892:	
  2847  040C  30FA               	movlw	250
  2848  040D  1283               	bcf	3,5	;RP0=0, select bank0
  2849  040E  1303               	bcf	3,6	;RP1=0, select bank0
  2850  040F  00A0               	movwf	___ftmul@f1
  2851  0410  3022               	movlw	34
  2852  0411  00A1               	movwf	___ftmul@f1+1
  2853  0412  303E               	movlw	62
  2854  0413  00A2               	movwf	___ftmul@f1+2
  2855  0414  0863               	movf	sin@f,w
  2856  0415  00A3               	movwf	___ftmul@f2
  2857  0416  0864               	movf	sin@f+1,w
  2858  0417  00A4               	movwf	___ftmul@f2+1
  2859  0418  0865               	movf	sin@f+2,w
  2860  0419  00A5               	movwf	___ftmul@f2+2
  2861  041A  120A  118A  26CB  120A  118A  	fcall	___ftmul
  2862  041F  1283               	bcf	3,5	;RP0=0, select bank0
  2863  0420  1303               	bcf	3,6	;RP1=0, select bank0
  2864  0421  0820               	movf	?___ftmul,w
  2865  0422  00E3               	movwf	sin@f
  2866  0423  0821               	movf	?___ftmul+1,w
  2867  0424  00E4               	movwf	sin@f+1
  2868  0425  0822               	movf	?___ftmul+2,w
  2869  0426  00E5               	movwf	sin@f+2
  2870  0427  0863               	movf	sin@f,w
  2871  0428  00D4               	movwf	floor@x
  2872  0429  0864               	movf	sin@f+1,w
  2873  042A  00D5               	movwf	floor@x+1
  2874  042B  0865               	movf	sin@f+2,w
  2875  042C  00D6               	movwf	floor@x+2
  2876  042D  120A  158A  2572  120A  118A  	fcall	_floor
  2877  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2878  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2879  0434  0854               	movf	?_floor,w
  2880  0435  00DD               	movwf	___ftsub@f2
  2881  0436  0855               	movf	?_floor+1,w
  2882  0437  00DE               	movwf	___ftsub@f2+1
  2883  0438  0856               	movf	?_floor+2,w
  2884  0439  00DF               	movwf	___ftsub@f2+2
  2885  043A  0863               	movf	sin@f,w
  2886  043B  00E0               	movwf	___ftsub@f1
  2887  043C  0864               	movf	sin@f+1,w
  2888  043D  00E1               	movwf	___ftsub@f1+1
  2889  043E  0865               	movf	sin@f+2,w
  2890  043F  00E2               	movwf	___ftsub@f1+2
  2891  0440  120A  158A  2323  120A  118A  	fcall	___ftsub
  2892  0445  1283               	bcf	3,5	;RP0=0, select bank0
  2893  0446  1303               	bcf	3,6	;RP1=0, select bank0
  2894  0447  085D               	movf	?___ftsub,w
  2895  0448  00E3               	movwf	sin@f
  2896  0449  085E               	movf	?___ftsub+1,w
  2897  044A  00E4               	movwf	sin@f+1
  2898  044B  085F               	movf	?___ftsub+2,w
  2899  044C  00E5               	movwf	sin@f+2
  2900  044D  3000               	movlw	0
  2901  044E  00A0               	movwf	___ftmul@f1
  2902  044F  3080               	movlw	128
  2903  0450  00A1               	movwf	___ftmul@f1+1
  2904  0451  3040               	movlw	64
  2905  0452  00A2               	movwf	___ftmul@f1+2
  2906  0453  0863               	movf	sin@f,w
  2907  0454  00A3               	movwf	___ftmul@f2
  2908  0455  0864               	movf	sin@f+1,w
  2909  0456  00A4               	movwf	___ftmul@f2+1
  2910  0457  0865               	movf	sin@f+2,w
  2911  0458  00A5               	movwf	___ftmul@f2+2
  2912  0459  120A  118A  26CB  120A  118A  	fcall	___ftmul
  2913  045E  1283               	bcf	3,5	;RP0=0, select bank0
  2914  045F  1303               	bcf	3,6	;RP1=0, select bank0
  2915  0460  0820               	movf	?___ftmul,w
  2916  0461  00E3               	movwf	sin@f
  2917  0462  0821               	movf	?___ftmul+1,w
  2918  0463  00E4               	movwf	sin@f+1
  2919  0464  0822               	movf	?___ftmul+2,w
  2920  0465  00E5               	movwf	sin@f+2
  2921  0466  3000               	movlw	0
  2922  0467  00F0               	movwf	___ftge@ff1
  2923  0468  3000               	movlw	0
  2924  0469  00F1               	movwf	___ftge@ff1+1
  2925  046A  3040               	movlw	64
  2926  046B  00F2               	movwf	___ftge@ff1+2
  2927  046C  0863               	movf	sin@f,w
  2928  046D  00F3               	movwf	___ftge@ff2
  2929  046E  0864               	movf	sin@f+1,w
  2930  046F  00F4               	movwf	___ftge@ff2+1
  2931  0470  0865               	movf	sin@f+2,w
  2932  0471  00F5               	movwf	___ftge@ff2+2
  2933  0472  120A  118A  279E  120A  118A  	fcall	___ftge
  2934  0477  1803               	btfsc	3,0
  2935  0478  2CA3               	goto	i1l1904
  2936  0479  3000               	movlw	0
  2937  047A  1283               	bcf	3,5	;RP0=0, select bank0
  2938  047B  1303               	bcf	3,6	;RP1=0, select bank0
  2939  047C  00DD               	movwf	___ftsub@f2
  2940  047D  3000               	movlw	0
  2941  047E  00DE               	movwf	___ftsub@f2+1
  2942  047F  3040               	movlw	64
  2943  0480  00DF               	movwf	___ftsub@f2+2
  2944  0481  0863               	movf	sin@f,w
  2945  0482  00E0               	movwf	___ftsub@f1
  2946  0483  0864               	movf	sin@f+1,w
  2947  0484  00E1               	movwf	___ftsub@f1+1
  2948  0485  0865               	movf	sin@f+2,w
  2949  0486  00E2               	movwf	___ftsub@f1+2
  2950  0487  120A  158A  2323  120A  118A  	fcall	___ftsub
  2951  048C  1283               	bcf	3,5	;RP0=0, select bank0
  2952  048D  1303               	bcf	3,6	;RP1=0, select bank0
  2953  048E  085D               	movf	?___ftsub,w
  2954  048F  00E3               	movwf	sin@f
  2955  0490  085E               	movf	?___ftsub+1,w
  2956  0491  00E4               	movwf	sin@f+1
  2957  0492  085F               	movf	?___ftsub+2,w
  2958  0493  00E5               	movwf	sin@f+2
  2959  0494  1683               	bsf	3,5	;RP0=1, select bank1
  2960  0495  1303               	bcf	3,6	;RP1=0, select bank1
  2961  0496  0829               	movf	sin@sgn^(0+128),w
  2962  0497  1D03               	btfss	3,2
  2963  0498  2C9B               	goto	u231_20
  2964  0499  3001               	movlw	1
  2965  049A  2C9C               	goto	u232_20
  2966  049B                     u231_20:	
  2967  049B  3000               	movlw	0
  2968  049C                     u232_20:	
  2969  049C  1283               	bcf	3,5	;RP0=0, select bank0
  2970  049D  1303               	bcf	3,6	;RP1=0, select bank0
  2971  049E  00E6               	movwf	??_sin
  2972  049F  0866               	movf	??_sin,w
  2973  04A0  1683               	bsf	3,5	;RP0=1, select bank1
  2974  04A1  1303               	bcf	3,6	;RP1=0, select bank1
  2975  04A2  00A9               	movwf	sin@sgn^(0+128)
  2976  04A3                     i1l1904:	
  2977  04A3  3000               	movlw	0
  2978  04A4  00F0               	movwf	___ftge@ff1
  2979  04A5  3080               	movlw	128
  2980  04A6  00F1               	movwf	___ftge@ff1+1
  2981  04A7  303F               	movlw	63
  2982  04A8  00F2               	movwf	___ftge@ff1+2
  2983  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  2984  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  2985  04AB  0863               	movf	sin@f,w
  2986  04AC  00F3               	movwf	___ftge@ff2
  2987  04AD  0864               	movf	sin@f+1,w
  2988  04AE  00F4               	movwf	___ftge@ff2+1
  2989  04AF  0865               	movf	sin@f+2,w
  2990  04B0  00F5               	movwf	___ftge@ff2+2
  2991  04B1  120A  118A  279E  120A  118A  	fcall	___ftge
  2992  04B6  1803               	btfsc	3,0
  2993  04B7  2CE0               	goto	i1l613
  2994  04B8  3000               	movlw	0
  2995  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2996  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2997  04BB  00C0               	movwf	___ftadd@f1
  2998  04BC  3000               	movlw	0
  2999  04BD  00C1               	movwf	___ftadd@f1+1
  3000  04BE  3040               	movlw	64
  3001  04BF  00C2               	movwf	___ftadd@f1+2
  3002  04C0  0863               	movf	sin@f,w
  3003  04C1  00F0               	movwf	___ftneg@f1
  3004  04C2  0864               	movf	sin@f+1,w
  3005  04C3  00F1               	movwf	___ftneg@f1+1
  3006  04C4  0865               	movf	sin@f+2,w
  3007  04C5  00F2               	movwf	___ftneg@f1+2
  3008  04C6  120A  158A  228A  120A  118A  	fcall	___ftneg
  3009  04CB  0870               	movf	?___ftneg,w
  3010  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  3011  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  3012  04CE  00C3               	movwf	___ftadd@f2
  3013  04CF  0871               	movf	?___ftneg+1,w
  3014  04D0  00C4               	movwf	___ftadd@f2+1
  3015  04D1  0872               	movf	?___ftneg+2,w
  3016  04D2  00C5               	movwf	___ftadd@f2+2
  3017  04D3  120A  118A  25C2  120A  118A  	fcall	___ftadd
  3018  04D8  1283               	bcf	3,5	;RP0=0, select bank0
  3019  04D9  1303               	bcf	3,6	;RP1=0, select bank0
  3020  04DA  0840               	movf	?___ftadd,w
  3021  04DB  00E3               	movwf	sin@f
  3022  04DC  0841               	movf	?___ftadd+1,w
  3023  04DD  00E4               	movwf	sin@f+1
  3024  04DE  0842               	movf	?___ftadd+2,w
  3025  04DF  00E5               	movwf	sin@f+2
  3026  04E0                     i1l613:	
  3027  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  3028  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  3029  04E2  0863               	movf	sin@f,w
  3030  04E3  00A0               	movwf	___ftmul@f1
  3031  04E4  0864               	movf	sin@f+1,w
  3032  04E5  00A1               	movwf	___ftmul@f1+1
  3033  04E6  0865               	movf	sin@f+2,w
  3034  04E7  00A2               	movwf	___ftmul@f1+2
  3035  04E8  0863               	movf	sin@f,w
  3036  04E9  00A3               	movwf	___ftmul@f2
  3037  04EA  0864               	movf	sin@f+1,w
  3038  04EB  00A4               	movwf	___ftmul@f2+1
  3039  04EC  0865               	movf	sin@f+2,w
  3040  04ED  00A5               	movwf	___ftmul@f2+2
  3041  04EE  120A  118A  26CB  120A  118A  	fcall	___ftmul
  3042  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  3043  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  3044  04F5  0820               	movf	?___ftmul,w
  3045  04F6  1683               	bsf	3,5	;RP0=1, select bank1
  3046  04F7  1303               	bcf	3,6	;RP1=0, select bank1
  3047  04F8  00A6               	movwf	sin@x2^(0+128)
  3048  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  3049  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  3050  04FB  0821               	movf	?___ftmul+1,w
  3051  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  3052  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  3053  04FE  00A7               	movwf	(sin@x2+1)^(0+128)
  3054  04FF  1283               	bcf	3,5	;RP0=0, select bank0
  3055  0500  1303               	bcf	3,6	;RP1=0, select bank0
  3056  0501  0822               	movf	?___ftmul+2,w
  3057  0502  1683               	bsf	3,5	;RP0=1, select bank1
  3058  0503  1303               	bcf	3,6	;RP1=0, select bank1
  3059  0504  00A8               	movwf	(sin@x2+2)^(0+128)
  3060  0505  0826               	movf	sin@x2^(0+128),w
  3061  0506  1283               	bcf	3,5	;RP0=0, select bank0
  3062  0507  1303               	bcf	3,6	;RP1=0, select bank0
  3063  0508  00CD               	movwf	eval_poly@x
  3064  0509  1683               	bsf	3,5	;RP0=1, select bank1
  3065  050A  1303               	bcf	3,6	;RP1=0, select bank1
  3066  050B  0827               	movf	(sin@x2+1)^(0+128),w
  3067  050C  1283               	bcf	3,5	;RP0=0, select bank0
  3068  050D  1303               	bcf	3,6	;RP1=0, select bank0
  3069  050E  00CE               	movwf	eval_poly@x+1
  3070  050F  1683               	bsf	3,5	;RP0=1, select bank1
  3071  0510  1303               	bcf	3,6	;RP1=0, select bank1
  3072  0511  0828               	movf	(sin@x2+2)^(0+128),w
  3073  0512  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0513  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0514  00CF               	movwf	eval_poly@x+2
  3076  0515  3010               	movlw	(low ((sin@coeff_b-__stringbase)| (0+32768)))& (0+255)
  3077  0516  00E6               	movwf	??_sin
  3078  0517  0866               	movf	??_sin,w
  3079  0518  00D0               	movwf	eval_poly@d
  3080  0519  3003               	movlw	3
  3081  051A  00D1               	movwf	eval_poly@n
  3082  051B  3000               	movlw	0
  3083  051C  00D2               	movwf	eval_poly@n+1
  3084  051D  120A  158A  246B  120A  118A  	fcall	_eval_poly
  3085  0522  1283               	bcf	3,5	;RP0=0, select bank0
  3086  0523  1303               	bcf	3,6	;RP1=0, select bank0
  3087  0524  084D               	movf	?_eval_poly,w
  3088  0525  1683               	bsf	3,5	;RP0=1, select bank1
  3089  0526  1303               	bcf	3,6	;RP1=0, select bank1
  3090  0527  00A0               	movwf	sin@y^(0+128)
  3091  0528  1283               	bcf	3,5	;RP0=0, select bank0
  3092  0529  1303               	bcf	3,6	;RP1=0, select bank0
  3093  052A  084E               	movf	?_eval_poly+1,w
  3094  052B  1683               	bsf	3,5	;RP0=1, select bank1
  3095  052C  1303               	bcf	3,6	;RP1=0, select bank1
  3096  052D  00A1               	movwf	(sin@y+1)^(0+128)
  3097  052E  1283               	bcf	3,5	;RP0=0, select bank0
  3098  052F  1303               	bcf	3,6	;RP1=0, select bank0
  3099  0530  084F               	movf	?_eval_poly+2,w
  3100  0531  1683               	bsf	3,5	;RP0=1, select bank1
  3101  0532  1303               	bcf	3,6	;RP1=0, select bank1
  3102  0533  00A2               	movwf	(sin@y+2)^(0+128)
  3103  0534  3004               	movlw	4
  3104  0535  1283               	bcf	3,5	;RP0=0, select bank0
  3105  0536  1303               	bcf	3,6	;RP1=0, select bank0
  3106  0537  00D1               	movwf	eval_poly@n
  3107  0538  3000               	movlw	0
  3108  0539  00D2               	movwf	eval_poly@n+1
  3109  053A  3001               	movlw	(low ((sin@coeff_a-__stringbase)| (0+32768)))& (0+255)
  3110  053B  00E6               	movwf	??_sin
  3111  053C  0866               	movf	??_sin,w
  3112  053D  00D0               	movwf	eval_poly@d
  3113  053E  1683               	bsf	3,5	;RP0=1, select bank1
  3114  053F  1303               	bcf	3,6	;RP1=0, select bank1
  3115  0540  0826               	movf	sin@x2^(0+128),w
  3116  0541  1283               	bcf	3,5	;RP0=0, select bank0
  3117  0542  1303               	bcf	3,6	;RP1=0, select bank0
  3118  0543  00CD               	movwf	eval_poly@x
  3119  0544  1683               	bsf	3,5	;RP0=1, select bank1
  3120  0545  1303               	bcf	3,6	;RP1=0, select bank1
  3121  0546  0827               	movf	(sin@x2+1)^(0+128),w
  3122  0547  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0548  1303               	bcf	3,6	;RP1=0, select bank0
  3124  0549  00CE               	movwf	eval_poly@x+1
  3125  054A  1683               	bsf	3,5	;RP0=1, select bank1
  3126  054B  1303               	bcf	3,6	;RP1=0, select bank1
  3127  054C  0828               	movf	(sin@x2+2)^(0+128),w
  3128  054D  1283               	bcf	3,5	;RP0=0, select bank0
  3129  054E  1303               	bcf	3,6	;RP1=0, select bank0
  3130  054F  00CF               	movwf	eval_poly@x+2
  3131  0550  120A  158A  246B  120A  118A  	fcall	_eval_poly
  3132  0555  1283               	bcf	3,5	;RP0=0, select bank0
  3133  0556  1303               	bcf	3,6	;RP1=0, select bank0
  3134  0557  084D               	movf	?_eval_poly,w
  3135  0558  00B3               	movwf	___ftdiv@f1
  3136  0559  084E               	movf	?_eval_poly+1,w
  3137  055A  00B4               	movwf	___ftdiv@f1+1
  3138  055B  084F               	movf	?_eval_poly+2,w
  3139  055C  00B5               	movwf	___ftdiv@f1+2
  3140  055D  1683               	bsf	3,5	;RP0=1, select bank1
  3141  055E  1303               	bcf	3,6	;RP1=0, select bank1
  3142  055F  0820               	movf	sin@y^(0+128),w
  3143  0560  1283               	bcf	3,5	;RP0=0, select bank0
  3144  0561  1303               	bcf	3,6	;RP1=0, select bank0
  3145  0562  00B0               	movwf	___ftdiv@f2
  3146  0563  1683               	bsf	3,5	;RP0=1, select bank1
  3147  0564  1303               	bcf	3,6	;RP1=0, select bank1
  3148  0565  0821               	movf	(sin@y+1)^(0+128),w
  3149  0566  1283               	bcf	3,5	;RP0=0, select bank0
  3150  0567  1303               	bcf	3,6	;RP1=0, select bank0
  3151  0568  00B1               	movwf	___ftdiv@f2+1
  3152  0569  1683               	bsf	3,5	;RP0=1, select bank1
  3153  056A  1303               	bcf	3,6	;RP1=0, select bank1
  3154  056B  0822               	movf	(sin@y+2)^(0+128),w
  3155  056C  1283               	bcf	3,5	;RP0=0, select bank0
  3156  056D  1303               	bcf	3,6	;RP1=0, select bank0
  3157  056E  00B2               	movwf	___ftdiv@f2+2
  3158  056F  120A  158A  2748  120A  118A  	fcall	___ftdiv
  3159  0574  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0575  1303               	bcf	3,6	;RP1=0, select bank0
  3161  0576  0830               	movf	?___ftdiv,w
  3162  0577  1683               	bsf	3,5	;RP0=1, select bank1
  3163  0578  1303               	bcf	3,6	;RP1=0, select bank1
  3164  0579  00A3               	movwf	_sin$889^(0+128)
  3165  057A  1283               	bcf	3,5	;RP0=0, select bank0
  3166  057B  1303               	bcf	3,6	;RP1=0, select bank0
  3167  057C  0831               	movf	?___ftdiv+1,w
  3168  057D  1683               	bsf	3,5	;RP0=1, select bank1
  3169  057E  1303               	bcf	3,6	;RP1=0, select bank1
  3170  057F  00A4               	movwf	(_sin$889+1)^(0+128)
  3171  0580  1283               	bcf	3,5	;RP0=0, select bank0
  3172  0581  1303               	bcf	3,6	;RP1=0, select bank0
  3173  0582  0832               	movf	?___ftdiv+2,w
  3174  0583  1683               	bsf	3,5	;RP0=1, select bank1
  3175  0584  1303               	bcf	3,6	;RP1=0, select bank1
  3176  0585  00A5               	movwf	(_sin$889+2)^(0+128)
  3177  0586  0823               	movf	_sin$889^(0+128),w
  3178  0587  1283               	bcf	3,5	;RP0=0, select bank0
  3179  0588  1303               	bcf	3,6	;RP1=0, select bank0
  3180  0589  00A0               	movwf	___ftmul@f1
  3181  058A  1683               	bsf	3,5	;RP0=1, select bank1
  3182  058B  1303               	bcf	3,6	;RP1=0, select bank1
  3183  058C  0824               	movf	(_sin$889+1)^(0+128),w
  3184  058D  1283               	bcf	3,5	;RP0=0, select bank0
  3185  058E  1303               	bcf	3,6	;RP1=0, select bank0
  3186  058F  00A1               	movwf	___ftmul@f1+1
  3187  0590  1683               	bsf	3,5	;RP0=1, select bank1
  3188  0591  1303               	bcf	3,6	;RP1=0, select bank1
  3189  0592  0825               	movf	(_sin$889+2)^(0+128),w
  3190  0593  1283               	bcf	3,5	;RP0=0, select bank0
  3191  0594  1303               	bcf	3,6	;RP1=0, select bank0
  3192  0595  00A2               	movwf	___ftmul@f1+2
  3193  0596  0863               	movf	sin@f,w
  3194  0597  00A3               	movwf	___ftmul@f2
  3195  0598  0864               	movf	sin@f+1,w
  3196  0599  00A4               	movwf	___ftmul@f2+1
  3197  059A  0865               	movf	sin@f+2,w
  3198  059B  00A5               	movwf	___ftmul@f2+2
  3199  059C  120A  118A  26CB  120A  118A  	fcall	___ftmul
  3200  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  3201  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  3202  05A3  0820               	movf	?___ftmul,w
  3203  05A4  00E3               	movwf	sin@f
  3204  05A5  0821               	movf	?___ftmul+1,w
  3205  05A6  00E4               	movwf	sin@f+1
  3206  05A7  0822               	movf	?___ftmul+2,w
  3207  05A8  00E5               	movwf	sin@f+2
  3208  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  3209  05AA  1303               	bcf	3,6	;RP1=0, select bank1
  3210  05AB  0829               	movf	sin@sgn^(0+128),w
  3211  05AC  1903               	btfsc	3,2
  3212  05AD  0008               	return
  3213  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3214  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  3215  05B0  0863               	movf	sin@f,w
  3216  05B1  00F0               	movwf	___ftneg@f1
  3217  05B2  0864               	movf	sin@f+1,w
  3218  05B3  00F1               	movwf	___ftneg@f1+1
  3219  05B4  0865               	movf	sin@f+2,w
  3220  05B5  00F2               	movwf	___ftneg@f1+2
  3221  05B6  120A  158A  228A   	fcall	___ftneg
  3222  05B9  0870               	movf	?___ftneg,w
  3223  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  3224  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  3225  05BC  00E3               	movwf	?_sin
  3226  05BD  0871               	movf	?___ftneg+1,w
  3227  05BE  00E4               	movwf	?_sin+1
  3228  05BF  0872               	movf	?___ftneg+2,w
  3229  05C0  00E5               	movwf	?_sin+2
  3230  05C1  0008               	return
  3231  05C2                     __end_of_sin:	
  3232                           
  3233                           	psect	text6
  3234  0D72                     __ptext6:	
  3235 ;; *************** function _floor *****************
  3236 ;; Defined at:
  3237 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\floor.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  x               3   52[BANK0 ] unsigned char 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  i               3   56[BANK0 ] unsigned char 
  3242 ;;  expon           2   59[BANK0 ] int 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  3   52[BANK0 ] int 
  3245 ;; Registers used:
  3246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3252 ;;      Params:         0       3       0       0       0
  3253 ;;      Locals:         0       5       0       0       0
  3254 ;;      Temps:          0       1       0       0       0
  3255 ;;      Totals:         0       9       0       0       0
  3256 ;;Total ram usage:        9 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    2
  3259 ;; This function calls:
  3260 ;;		___altoft
  3261 ;;		___ftadd
  3262 ;;		___ftge
  3263 ;;		___fttol
  3264 ;;		_frexp
  3265 ;; This function is called by:
  3266 ;;		_sin
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           
  3271                           ;psect for function _floor
  3272  0D72                     _floor:	
  3273                           
  3274                           ;incstack = 0
  3275                           ; Regs used in _floor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3276  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  3277  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  3278  0D74  0854               	movf	floor@x,w
  3279  0D75  00F0               	movwf	frexp@value
  3280  0D76  0855               	movf	floor@x+1,w
  3281  0D77  00F1               	movwf	frexp@value+1
  3282  0D78  0856               	movf	floor@x+2,w
  3283  0D79  00F2               	movwf	frexp@value+2
  3284  0D7A  305B               	movlw	(low (floor@expon| 0))& (0+255)
  3285  0D7B  00D7               	movwf	??_floor
  3286  0D7C  0857               	movf	??_floor,w
  3287  0D7D  00F3               	movwf	frexp@eptr
  3288  0D7E  120A  158A  2344  120A  158A  	fcall	_frexp
  3289  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  3290  0D84  1303               	bcf	3,6	;RP1=0, select bank0
  3291  0D85  1FDC               	btfss	floor@expon+1,7
  3292  0D86  2DAC               	goto	i1l1782
  3293  0D87  0854               	movf	floor@x,w
  3294  0D88  00F0               	movwf	___ftge@ff1
  3295  0D89  0855               	movf	floor@x+1,w
  3296  0D8A  00F1               	movwf	___ftge@ff1+1
  3297  0D8B  0856               	movf	floor@x+2,w
  3298  0D8C  00F2               	movwf	___ftge@ff1+2
  3299  0D8D  3000               	movlw	0
  3300  0D8E  00F3               	movwf	___ftge@ff2
  3301  0D8F  3000               	movlw	0
  3302  0D90  00F4               	movwf	___ftge@ff2+1
  3303  0D91  3000               	movlw	0
  3304  0D92  00F5               	movwf	___ftge@ff2+2
  3305  0D93  120A  118A  279E  120A  158A  	fcall	___ftge
  3306  0D98  1803               	btfsc	3,0
  3307  0D99  2DA3               	goto	i1l1778
  3308  0D9A  3000               	movlw	0
  3309  0D9B  1283               	bcf	3,5	;RP0=0, select bank0
  3310  0D9C  1303               	bcf	3,6	;RP1=0, select bank0
  3311  0D9D  00D4               	movwf	?_floor
  3312  0D9E  3080               	movlw	128
  3313  0D9F  00D5               	movwf	?_floor+1
  3314  0DA0  30BF               	movlw	191
  3315  0DA1  00D6               	movwf	?_floor+2
  3316  0DA2  0008               	return
  3317  0DA3                     i1l1778:	
  3318  0DA3  3000               	movlw	0
  3319  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
  3320  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
  3321  0DA6  00D4               	movwf	?_floor
  3322  0DA7  3000               	movlw	0
  3323  0DA8  00D5               	movwf	?_floor+1
  3324  0DA9  3000               	movlw	0
  3325  0DAA  00D6               	movwf	?_floor+2
  3326  0DAB  0008               	return
  3327  0DAC                     i1l1782:	
  3328  0DAC  3000               	movlw	0
  3329  0DAD  025C               	subwf	floor@expon+1,w
  3330  0DAE  3015               	movlw	21
  3331  0DAF  1903               	skipnz
  3332  0DB0  025B               	subwf	floor@expon,w
  3333  0DB1  1803               	btfsc	3,0
  3334  0DB2  0008               	return
  3335  0DB3  0854               	movf	floor@x,w
  3336  0DB4  00C0               	movwf	___fttol@f1
  3337  0DB5  0855               	movf	floor@x+1,w
  3338  0DB6  00C1               	movwf	___fttol@f1+1
  3339  0DB7  0856               	movf	floor@x+2,w
  3340  0DB8  00C2               	movwf	___fttol@f1+2
  3341  0DB9  120A  158A  24E4  120A  158A  	fcall	___fttol
  3342  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
  3343  0DBF  1303               	bcf	3,6	;RP1=0, select bank0
  3344  0DC0  0843               	movf	?___fttol+3,w
  3345  0DC1  00D1               	movwf	___altoft@c+3
  3346  0DC2  0842               	movf	?___fttol+2,w
  3347  0DC3  00D0               	movwf	___altoft@c+2
  3348  0DC4  0841               	movf	?___fttol+1,w
  3349  0DC5  00CF               	movwf	___altoft@c+1
  3350  0DC6  0840               	movf	?___fttol,w
  3351  0DC7  00CE               	movwf	___altoft@c
  3352  0DC8  120A  158A  23BD  120A  158A  	fcall	___altoft
  3353  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  3354  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  3355  0DCF  084E               	movf	?___altoft,w
  3356  0DD0  00D8               	movwf	floor@i
  3357  0DD1  084F               	movf	?___altoft+1,w
  3358  0DD2  00D9               	movwf	floor@i+1
  3359  0DD3  0850               	movf	?___altoft+2,w
  3360  0DD4  00DA               	movwf	floor@i+2
  3361  0DD5  0854               	movf	floor@x,w
  3362  0DD6  00F0               	movwf	___ftge@ff1
  3363  0DD7  0855               	movf	floor@x+1,w
  3364  0DD8  00F1               	movwf	___ftge@ff1+1
  3365  0DD9  0856               	movf	floor@x+2,w
  3366  0DDA  00F2               	movwf	___ftge@ff1+2
  3367  0DDB  0858               	movf	floor@i,w
  3368  0DDC  00F3               	movwf	___ftge@ff2
  3369  0DDD  0859               	movf	floor@i+1,w
  3370  0DDE  00F4               	movwf	___ftge@ff2+1
  3371  0DDF  085A               	movf	floor@i+2,w
  3372  0DE0  00F5               	movwf	___ftge@ff2+2
  3373  0DE1  120A  118A  279E  120A  158A  	fcall	___ftge
  3374  0DE6  1803               	btfsc	3,0
  3375  0DE7  2E02               	goto	i1l1792
  3376  0DE8  3000               	movlw	0
  3377  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  3378  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  3379  0DEB  00C0               	movwf	___ftadd@f1
  3380  0DEC  3080               	movlw	128
  3381  0DED  00C1               	movwf	___ftadd@f1+1
  3382  0DEE  30BF               	movlw	191
  3383  0DEF  00C2               	movwf	___ftadd@f1+2
  3384  0DF0  0858               	movf	floor@i,w
  3385  0DF1  00C3               	movwf	___ftadd@f2
  3386  0DF2  0859               	movf	floor@i+1,w
  3387  0DF3  00C4               	movwf	___ftadd@f2+1
  3388  0DF4  085A               	movf	floor@i+2,w
  3389  0DF5  00C5               	movwf	___ftadd@f2+2
  3390  0DF6  120A  118A  25C2   	fcall	___ftadd
  3391  0DF9  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0DFA  1303               	bcf	3,6	;RP1=0, select bank0
  3393  0DFB  0840               	movf	?___ftadd,w
  3394  0DFC  00D4               	movwf	?_floor
  3395  0DFD  0841               	movf	?___ftadd+1,w
  3396  0DFE  00D5               	movwf	?_floor+1
  3397  0DFF  0842               	movf	?___ftadd+2,w
  3398  0E00  00D6               	movwf	?_floor+2
  3399  0E01  0008               	return
  3400  0E02                     i1l1792:	
  3401  0E02  1283               	bcf	3,5	;RP0=0, select bank0
  3402  0E03  1303               	bcf	3,6	;RP1=0, select bank0
  3403  0E04  0858               	movf	floor@i,w
  3404  0E05  00D4               	movwf	?_floor
  3405  0E06  0859               	movf	floor@i+1,w
  3406  0E07  00D5               	movwf	?_floor+1
  3407  0E08  085A               	movf	floor@i+2,w
  3408  0E09  00D6               	movwf	?_floor+2
  3409  0E0A  0008               	return
  3410  0E0B                     __end_of_floor:	
  3411                           
  3412                           	psect	text7
  3413  0B44                     __ptext7:	
  3414 ;; *************** function _frexp *****************
  3415 ;; Defined at:
  3416 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\frexp.c"
  3417 ;; Parameters:    Size  Location     Type
  3418 ;;  value           3    0[COMMON] int 
  3419 ;;  eptr            1    3[COMMON] PTR int 
  3420 ;;		 -> floor@expon(2), 
  3421 ;; Auto vars:     Size  Location     Type
  3422 ;;		None
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  3    0[COMMON] PTR int 
  3425 ;; Registers used:
  3426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3432 ;;      Params:         4       0       0       0       0
  3433 ;;      Locals:         0       0       0       0       0
  3434 ;;      Temps:          2       0       0       0       0
  3435 ;;      Totals:         6       0       0       0       0
  3436 ;;Total ram usage:        6 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; This function calls:
  3439 ;;		Nothing
  3440 ;; This function is called by:
  3441 ;;		_floor
  3442 ;; This function uses a non-reentrant model
  3443 ;;
  3444                           
  3445                           
  3446                           ;psect for function _frexp
  3447  0B44                     _frexp:	
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3451  0B44  0872               	movf	frexp@value+2,w
  3452  0B45  0471               	iorwf	frexp@value+1,w
  3453  0B46  0470               	iorwf	frexp@value,w
  3454  0B47  1D03               	skipz
  3455  0B48  2B50               	goto	i1l1652
  3456  0B49  0873               	movf	frexp@eptr,w
  3457  0B4A  0084               	movwf	4
  3458  0B4B  1383               	bcf	3,7	;select IRP bank0
  3459  0B4C  0180               	clrf	0
  3460  0B4D  0A84               	incf	4,f
  3461  0B4E  0180               	clrf	0
  3462                           
  3463                           ;	Return value of _frexp is never used
  3464  0B4F  0008               	return
  3465  0B50                     i1l1652:	
  3466  0B50  0872               	movf	frexp@value+2,w
  3467  0B51  397F               	andlw	127
  3468  0B52  00F4               	movwf	??_frexp
  3469  0B53  01F5               	clrf	??_frexp+1
  3470  0B54  1003               	clrc
  3471  0B55  0DF4               	rlf	??_frexp,f
  3472  0B56  0DF5               	rlf	??_frexp+1,f
  3473  0B57  0873               	movf	frexp@eptr,w
  3474  0B58  0084               	movwf	4
  3475  0B59  0874               	movf	??_frexp,w
  3476  0B5A  1383               	bcf	3,7	;select IRP bank0
  3477  0B5B  0080               	movwf	0
  3478  0B5C  0A84               	incf	4,f
  3479  0B5D  0875               	movf	??_frexp+1,w
  3480  0B5E  0080               	movwf	0
  3481  0B5F  0D71               	rlf	frexp@value+1,w
  3482  0B60  0D71               	rlf	frexp@value+1,w
  3483  0B61  3901               	andlw	1
  3484  0B62  00F4               	movwf	??_frexp
  3485  0B63  01F5               	clrf	??_frexp+1
  3486  0B64  0873               	movf	frexp@eptr,w
  3487  0B65  0084               	movwf	4
  3488  0B66  0874               	movf	??_frexp,w
  3489  0B67  0480               	iorwf	0,f
  3490  0B68  0A84               	incf	4,f
  3491  0B69  0875               	movf	??_frexp+1,w
  3492  0B6A  0480               	iorwf	0,f
  3493  0B6B  0873               	movf	frexp@eptr,w
  3494  0B6C  0084               	movwf	4
  3495  0B6D  3082               	movlw	130
  3496  0B6E  0780               	addwf	0,f
  3497  0B6F  0F84               	incfsz	4,f
  3498  0B70  0800               	movf	0,w
  3499  0B71  1803               	skipnc
  3500  0B72  0A00               	incf	0,w
  3501  0B73  00FF               	movwf	127
  3502  0B74  30FF               	movlw	255
  3503  0B75  077F               	addwf	127,w
  3504  0B76  0080               	movwf	0
  3505  0B77  0384               	decf	4,f
  3506  0B78  0872               	movf	frexp@value+2,w
  3507  0B79  3980               	andlw	-128
  3508  0B7A  383F               	iorlw	63
  3509  0B7B  00F2               	movwf	frexp@value+2
  3510  0B7C  13F1               	bcf	frexp@value+1,7
  3511  0B7D  0008               	return
  3512  0B7E                     __end_of_frexp:	
  3513                           ;	Return value of _frexp is never used
  3514                           
  3515                           
  3516                           	psect	text8
  3517  0CE4                     __ptext8:	
  3518 ;; *************** function ___fttol *****************
  3519 ;; Defined at:
  3520 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;  f1              3   32[BANK0 ] float 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  lval            4   41[BANK0 ] unsigned long 
  3525 ;;  exp1            1   45[BANK0 ] unsigned char 
  3526 ;;  sign1           1   40[BANK0 ] unsigned char 
  3527 ;; Return value:  Size  Location     Type
  3528 ;;                  4   32[BANK0 ] long 
  3529 ;; Registers used:
  3530 ;;		wreg, status,2, status,0
  3531 ;; Tracked objects:
  3532 ;;		On entry : 0/0
  3533 ;;		On exit  : 0/0
  3534 ;;		Unchanged: 0/0
  3535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3536 ;;      Params:         0       4       0       0       0
  3537 ;;      Locals:         0       6       0       0       0
  3538 ;;      Temps:          0       4       0       0       0
  3539 ;;      Totals:         0      14       0       0       0
  3540 ;;Total ram usage:       14 bytes
  3541 ;; Hardware stack levels used:    1
  3542 ;; This function calls:
  3543 ;;		Nothing
  3544 ;; This function is called by:
  3545 ;;		_ISR
  3546 ;;		_floor
  3547 ;; This function uses a non-reentrant model
  3548 ;;
  3549                           
  3550                           
  3551                           ;psect for function ___fttol
  3552  0CE4                     ___fttol:	
  3553                           
  3554                           ;incstack = 0
  3555                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3556  0CE4  1283               	bcf	3,5	;RP0=0, select bank0
  3557  0CE5  1303               	bcf	3,6	;RP1=0, select bank0
  3558  0CE6  0840               	movf	___fttol@f1,w
  3559  0CE7  00C4               	movwf	??___fttol
  3560  0CE8  0841               	movf	___fttol@f1+1,w
  3561  0CE9  00C5               	movwf	??___fttol+1
  3562  0CEA  0842               	movf	___fttol@f1+2,w
  3563  0CEB  00C6               	movwf	??___fttol+2
  3564  0CEC  1003               	clrc
  3565  0CED  0D45               	rlf	??___fttol+1,w
  3566  0CEE  0D46               	rlf	??___fttol+2,w
  3567  0CEF  00C7               	movwf	??___fttol+3
  3568  0CF0  0847               	movf	??___fttol+3,w
  3569  0CF1  00CD               	movwf	___fttol@exp1
  3570  0CF2  084D               	movf	___fttol@exp1,w
  3571  0CF3  1D03               	btfss	3,2
  3572  0CF4  2CFE               	goto	i1l1610
  3573  0CF5  3000               	movlw	0
  3574  0CF6  00C3               	movwf	?___fttol+3
  3575  0CF7  3000               	movlw	0
  3576  0CF8  00C2               	movwf	?___fttol+2
  3577  0CF9  3000               	movlw	0
  3578  0CFA  00C1               	movwf	?___fttol+1
  3579  0CFB  3000               	movlw	0
  3580  0CFC  00C0               	movwf	?___fttol
  3581  0CFD  0008               	return
  3582  0CFE                     i1l1610:	
  3583  0CFE  0840               	movf	___fttol@f1,w
  3584  0CFF  00C4               	movwf	??___fttol
  3585  0D00  0841               	movf	___fttol@f1+1,w
  3586  0D01  00C5               	movwf	??___fttol+1
  3587  0D02  0842               	movf	___fttol@f1+2,w
  3588  0D03  00C6               	movwf	??___fttol+2
  3589  0D04  3017               	movlw	23
  3590  0D05                     u188_25:	
  3591  0D05  1003               	clrc
  3592  0D06  0CC6               	rrf	??___fttol+2,f
  3593  0D07  0CC5               	rrf	??___fttol+1,f
  3594  0D08  0CC4               	rrf	??___fttol,f
  3595  0D09  3EFF               	addlw	-1
  3596  0D0A  1D03               	skipz
  3597  0D0B  2D05               	goto	u188_25
  3598  0D0C  0844               	movf	??___fttol,w
  3599  0D0D  00C7               	movwf	??___fttol+3
  3600  0D0E  0847               	movf	??___fttol+3,w
  3601  0D0F  00C8               	movwf	___fttol@sign1
  3602  0D10  17C1               	bsf	___fttol@f1+1,7
  3603  0D11  30FF               	movlw	255
  3604  0D12  05C0               	andwf	___fttol@f1,f
  3605  0D13  30FF               	movlw	255
  3606  0D14  05C1               	andwf	___fttol@f1+1,f
  3607  0D15  3000               	movlw	0
  3608  0D16  05C2               	andwf	___fttol@f1+2,f
  3609  0D17  0840               	movf	___fttol@f1,w
  3610  0D18  00C9               	movwf	___fttol@lval
  3611  0D19  0841               	movf	___fttol@f1+1,w
  3612  0D1A  00CA               	movwf	___fttol@lval+1
  3613  0D1B  0842               	movf	___fttol@f1+2,w
  3614  0D1C  00CB               	movwf	___fttol@lval+2
  3615  0D1D  01CC               	clrf	___fttol@lval+3
  3616  0D1E  308E               	movlw	142
  3617  0D1F  02CD               	subwf	___fttol@exp1,f
  3618  0D20  1FCD               	btfss	___fttol@exp1,7
  3619  0D21  2D40               	goto	i1l1630
  3620  0D22  084D               	movf	___fttol@exp1,w
  3621  0D23  3A80               	xorlw	128
  3622  0D24  3E8F               	addlw	143
  3623  0D25  1803               	skipnc
  3624  0D26  2D30               	goto	i1l1628
  3625  0D27  3000               	movlw	0
  3626  0D28  00C3               	movwf	?___fttol+3
  3627  0D29  3000               	movlw	0
  3628  0D2A  00C2               	movwf	?___fttol+2
  3629  0D2B  3000               	movlw	0
  3630  0D2C  00C1               	movwf	?___fttol+1
  3631  0D2D  3000               	movlw	0
  3632  0D2E  00C0               	movwf	?___fttol
  3633  0D2F  0008               	return
  3634  0D30                     i1l1628:	
  3635  0D30  3001               	movlw	1
  3636  0D31                     u191_25:	
  3637  0D31  1003               	clrc
  3638  0D32  0CCC               	rrf	___fttol@lval+3,f
  3639  0D33  0CCB               	rrf	___fttol@lval+2,f
  3640  0D34  0CCA               	rrf	___fttol@lval+1,f
  3641  0D35  0CC9               	rrf	___fttol@lval,f
  3642  0D36  3EFF               	addlw	-1
  3643  0D37  1D03               	skipz
  3644  0D38  2D31               	goto	u191_25
  3645  0D39  3001               	movlw	1
  3646  0D3A  00C4               	movwf	??___fttol
  3647  0D3B  0844               	movf	??___fttol,w
  3648  0D3C  07CD               	addwf	___fttol@exp1,f
  3649  0D3D  1903               	btfsc	3,2
  3650  0D3E  2D5B               	goto	i1l1638
  3651  0D3F  2D30               	goto	i1l1628
  3652  0D40                     i1l1630:	
  3653  0D40  3018               	movlw	24
  3654  0D41  024D               	subwf	___fttol@exp1,w
  3655  0D42  1C03               	skipc
  3656  0D43  2D58               	goto	i1l498
  3657  0D44  3000               	movlw	0
  3658  0D45  00C3               	movwf	?___fttol+3
  3659  0D46  3000               	movlw	0
  3660  0D47  00C2               	movwf	?___fttol+2
  3661  0D48  3000               	movlw	0
  3662  0D49  00C1               	movwf	?___fttol+1
  3663  0D4A  3000               	movlw	0
  3664  0D4B  00C0               	movwf	?___fttol
  3665  0D4C  0008               	return
  3666  0D4D                     i1l1636:	
  3667  0D4D  3001               	movlw	1
  3668  0D4E  00C4               	movwf	??___fttol
  3669  0D4F                     u194_25:	
  3670  0D4F  1003               	clrc
  3671  0D50  0DC9               	rlf	___fttol@lval,f
  3672  0D51  0DCA               	rlf	___fttol@lval+1,f
  3673  0D52  0DCB               	rlf	___fttol@lval+2,f
  3674  0D53  0DCC               	rlf	___fttol@lval+3,f
  3675  0D54  0BC4               	decfsz	??___fttol,f
  3676  0D55  2D4F               	goto	u194_25
  3677  0D56  3001               	movlw	1
  3678  0D57  02CD               	subwf	___fttol@exp1,f
  3679  0D58                     i1l498:	
  3680  0D58  084D               	movf	___fttol@exp1,w
  3681  0D59  1D03               	btfss	3,2
  3682  0D5A  2D4D               	goto	i1l1636
  3683  0D5B                     i1l1638:	
  3684  0D5B  0848               	movf	___fttol@sign1,w
  3685  0D5C  1903               	btfsc	3,2
  3686  0D5D  2D69               	goto	i1l1642
  3687  0D5E  09C9               	comf	___fttol@lval,f
  3688  0D5F  09CA               	comf	___fttol@lval+1,f
  3689  0D60  09CB               	comf	___fttol@lval+2,f
  3690  0D61  09CC               	comf	___fttol@lval+3,f
  3691  0D62  0AC9               	incf	___fttol@lval,f
  3692  0D63  1903               	skipnz
  3693  0D64  0ACA               	incf	___fttol@lval+1,f
  3694  0D65  1903               	skipnz
  3695  0D66  0ACB               	incf	___fttol@lval+2,f
  3696  0D67  1903               	skipnz
  3697  0D68  0ACC               	incf	___fttol@lval+3,f
  3698  0D69                     i1l1642:	
  3699  0D69  084C               	movf	___fttol@lval+3,w
  3700  0D6A  00C3               	movwf	?___fttol+3
  3701  0D6B  084B               	movf	___fttol@lval+2,w
  3702  0D6C  00C2               	movwf	?___fttol+2
  3703  0D6D  084A               	movf	___fttol@lval+1,w
  3704  0D6E  00C1               	movwf	?___fttol+1
  3705  0D6F  0849               	movf	___fttol@lval,w
  3706  0D70  00C0               	movwf	?___fttol
  3707  0D71  0008               	return
  3708  0D72                     __end_of___fttol:	
  3709                           
  3710                           	psect	text9
  3711  079E                     __ptext9:	
  3712 ;; *************** function ___ftge *****************
  3713 ;; Defined at:
  3714 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;  ff1             3    0[COMMON] float 
  3717 ;;  ff2             3    3[COMMON] float 
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;		None               void
  3722 ;; Registers used:
  3723 ;;		wreg, status,2, status,0
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3729 ;;      Params:         6       0       0       0       0
  3730 ;;      Locals:         0       0       0       0       0
  3731 ;;      Temps:          6       0       0       0       0
  3732 ;;      Totals:        12       0       0       0       0
  3733 ;;Total ram usage:       12 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; This function calls:
  3736 ;;		Nothing
  3737 ;; This function is called by:
  3738 ;;		_sin
  3739 ;;		_floor
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           
  3744                           ;psect for function ___ftge
  3745  079E                     ___ftge:	
  3746                           
  3747                           ;incstack = 0
  3748                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  3749  079E  1FF2               	btfss	___ftge@ff1+2,7
  3750  079F  2FC5               	goto	i1l1538
  3751  07A0  3000               	movlw	0
  3752  07A1  00F6               	movwf	??___ftge
  3753  07A2  3000               	movlw	0
  3754  07A3  00F7               	movwf	??___ftge+1
  3755  07A4  3080               	movlw	128
  3756  07A5  00F8               	movwf	??___ftge+2
  3757  07A6  0970               	comf	___ftge@ff1,w
  3758  07A7  00F9               	movwf	??___ftge+3
  3759  07A8  0971               	comf	___ftge@ff1+1,w
  3760  07A9  00FA               	movwf	??___ftge+4
  3761  07AA  0972               	comf	___ftge@ff1+2,w
  3762  07AB  00FB               	movwf	??___ftge+5
  3763  07AC  0AF9               	incf	??___ftge+3,f
  3764  07AD  1903               	skipnz
  3765  07AE  0AFA               	incf	??___ftge+4,f
  3766  07AF  1903               	skipnz
  3767  07B0  0AFB               	incf	??___ftge+5,f
  3768  07B1  0879               	movf	??___ftge+3,w
  3769  07B2  07F6               	addwf	??___ftge,f
  3770  07B3  087A               	movf	??___ftge+4,w
  3771  07B4  1803               	skipnc
  3772  07B5  0F7A               	incfsz	??___ftge+4,w
  3773  07B6  2FB8               	goto	u169_21
  3774  07B7  2FB9               	goto	u169_22
  3775  07B8                     u169_21:	
  3776  07B8  07F7               	addwf	??___ftge+1,f
  3777  07B9                     u169_22:	
  3778  07B9  087B               	movf	??___ftge+5,w
  3779  07BA  1803               	skipnc
  3780  07BB  0F7B               	incfsz	??___ftge+5,w
  3781  07BC  2FBE               	goto	u169_23
  3782  07BD  2FBF               	goto	u169_24
  3783  07BE                     u169_23:	
  3784  07BE  07F8               	addwf	??___ftge+2,f
  3785  07BF                     u169_24:	
  3786  07BF  0876               	movf	??___ftge,w
  3787  07C0  00F0               	movwf	___ftge@ff1
  3788  07C1  0877               	movf	??___ftge+1,w
  3789  07C2  00F1               	movwf	___ftge@ff1+1
  3790  07C3  0878               	movf	??___ftge+2,w
  3791  07C4  00F2               	movwf	___ftge@ff1+2
  3792  07C5                     i1l1538:	
  3793  07C5  1FF5               	btfss	___ftge@ff2+2,7
  3794  07C6  2FEC               	goto	i1l1542
  3795  07C7  3000               	movlw	0
  3796  07C8  00F6               	movwf	??___ftge
  3797  07C9  3000               	movlw	0
  3798  07CA  00F7               	movwf	??___ftge+1
  3799  07CB  3080               	movlw	128
  3800  07CC  00F8               	movwf	??___ftge+2
  3801  07CD  0973               	comf	___ftge@ff2,w
  3802  07CE  00F9               	movwf	??___ftge+3
  3803  07CF  0974               	comf	___ftge@ff2+1,w
  3804  07D0  00FA               	movwf	??___ftge+4
  3805  07D1  0975               	comf	___ftge@ff2+2,w
  3806  07D2  00FB               	movwf	??___ftge+5
  3807  07D3  0AF9               	incf	??___ftge+3,f
  3808  07D4  1903               	skipnz
  3809  07D5  0AFA               	incf	??___ftge+4,f
  3810  07D6  1903               	skipnz
  3811  07D7  0AFB               	incf	??___ftge+5,f
  3812  07D8  0879               	movf	??___ftge+3,w
  3813  07D9  07F6               	addwf	??___ftge,f
  3814  07DA  087A               	movf	??___ftge+4,w
  3815  07DB  1803               	skipnc
  3816  07DC  0F7A               	incfsz	??___ftge+4,w
  3817  07DD  2FDF               	goto	u171_21
  3818  07DE  2FE0               	goto	u171_22
  3819  07DF                     u171_21:	
  3820  07DF  07F7               	addwf	??___ftge+1,f
  3821  07E0                     u171_22:	
  3822  07E0  087B               	movf	??___ftge+5,w
  3823  07E1  1803               	skipnc
  3824  07E2  0F7B               	incfsz	??___ftge+5,w
  3825  07E3  2FE5               	goto	u171_23
  3826  07E4  2FE6               	goto	u171_24
  3827  07E5                     u171_23:	
  3828  07E5  07F8               	addwf	??___ftge+2,f
  3829  07E6                     u171_24:	
  3830  07E6  0876               	movf	??___ftge,w
  3831  07E7  00F3               	movwf	___ftge@ff2
  3832  07E8  0877               	movf	??___ftge+1,w
  3833  07E9  00F4               	movwf	___ftge@ff2+1
  3834  07EA  0878               	movf	??___ftge+2,w
  3835  07EB  00F5               	movwf	___ftge@ff2+2
  3836  07EC                     i1l1542:	
  3837  07EC  3080               	movlw	128
  3838  07ED  06F2               	xorwf	___ftge@ff1+2,f
  3839  07EE  3080               	movlw	128
  3840  07EF  06F5               	xorwf	___ftge@ff2+2,f
  3841  07F0  0875               	movf	___ftge@ff2+2,w
  3842  07F1  0272               	subwf	___ftge@ff1+2,w
  3843  07F2  1D03               	skipz
  3844  07F3  0008               	return
  3845  07F4  0874               	movf	___ftge@ff2+1,w
  3846  07F5  0271               	subwf	___ftge@ff1+1,w
  3847  07F6  1D03               	skipz
  3848  07F7  0008               	return
  3849  07F8  0873               	movf	___ftge@ff2,w
  3850  07F9  0270               	subwf	___ftge@ff1,w
  3851  07FA  0008               	return
  3852  07FB                     __end_of___ftge:	
  3853                           
  3854                           	psect	text10
  3855  0BBD                     __ptext10:	
  3856 ;; *************** function ___altoft *****************
  3857 ;; Defined at:
  3858 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  c               4   46[BANK0 ] long 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  sign            1   51[BANK0 ] unsigned char 
  3863 ;;  exp             1   50[BANK0 ] unsigned char 
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  3   46[BANK0 ] float 
  3866 ;; Registers used:
  3867 ;;		wreg, status,2, status,0, pclath, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3873 ;;      Params:         0       4       0       0       0
  3874 ;;      Locals:         0       2       0       0       0
  3875 ;;      Temps:          2       0       0       0       0
  3876 ;;      Totals:         2       6       0       0       0
  3877 ;;Total ram usage:        8 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    1
  3880 ;; This function calls:
  3881 ;;		___ftpack
  3882 ;; This function is called by:
  3883 ;;		_floor
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           
  3888                           ;psect for function ___altoft
  3889  0BBD                     ___altoft:	
  3890                           
  3891                           ;incstack = 0
  3892                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  3893  0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  3894  0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  3895  0BBF  01D3               	clrf	___altoft@sign
  3896  0BC0  308E               	movlw	142
  3897  0BC1  00FC               	movwf	??___altoft
  3898  0BC2  087C               	movf	??___altoft,w
  3899  0BC3  00D2               	movwf	___altoft@exp
  3900  0BC4  1FD1               	btfss	___altoft@c+3,7
  3901  0BC5  2BD3               	goto	i1l1458
  3902  0BC6  09CE               	comf	___altoft@c,f
  3903  0BC7  09CF               	comf	___altoft@c+1,f
  3904  0BC8  09D0               	comf	___altoft@c+2,f
  3905  0BC9  09D1               	comf	___altoft@c+3,f
  3906  0BCA  0ACE               	incf	___altoft@c,f
  3907  0BCB  1903               	skipnz
  3908  0BCC  0ACF               	incf	___altoft@c+1,f
  3909  0BCD  1903               	skipnz
  3910  0BCE  0AD0               	incf	___altoft@c+2,f
  3911  0BCF  1903               	skipnz
  3912  0BD0  0AD1               	incf	___altoft@c+3,f
  3913  0BD1  01D3               	clrf	___altoft@sign
  3914  0BD2  0AD3               	incf	___altoft@sign,f
  3915  0BD3                     i1l1458:	
  3916  0BD3  30FF               	movlw	255
  3917  0BD4  0551               	andwf	___altoft@c+3,w
  3918  0BD5  1903               	btfsc	3,2
  3919  0BD6  2BE5               	goto	i1l1460
  3920  0BD7  3001               	movlw	1
  3921  0BD8                     u142_25:	
  3922  0BD8  1003               	clrc
  3923  0BD9  0CD1               	rrf	___altoft@c+3,f
  3924  0BDA  0CD0               	rrf	___altoft@c+2,f
  3925  0BDB  0CCF               	rrf	___altoft@c+1,f
  3926  0BDC  0CCE               	rrf	___altoft@c,f
  3927  0BDD  3EFF               	addlw	-1
  3928  0BDE  1D03               	skipz
  3929  0BDF  2BD8               	goto	u142_25
  3930  0BE0  3001               	movlw	1
  3931  0BE1  00FC               	movwf	??___altoft
  3932  0BE2  087C               	movf	??___altoft,w
  3933  0BE3  07D2               	addwf	___altoft@exp,f
  3934  0BE4  2BD3               	goto	i1l1458
  3935  0BE5                     i1l1460:	
  3936  0BE5  084E               	movf	___altoft@c,w
  3937  0BE6  00F0               	movwf	___ftpack@arg
  3938  0BE7  084F               	movf	___altoft@c+1,w
  3939  0BE8  00F1               	movwf	___ftpack@arg+1
  3940  0BE9  0850               	movf	___altoft@c+2,w
  3941  0BEA  00F2               	movwf	___ftpack@arg+2
  3942  0BEB  0852               	movf	___altoft@exp,w
  3943  0BEC  00FC               	movwf	??___altoft
  3944  0BED  087C               	movf	??___altoft,w
  3945  0BEE  00F3               	movwf	___ftpack@exp
  3946  0BEF  0853               	movf	___altoft@sign,w
  3947  0BF0  00FD               	movwf	??___altoft+1
  3948  0BF1  087D               	movf	??___altoft+1,w
  3949  0BF2  00F4               	movwf	___ftpack@sign
  3950  0BF3  120A  158A  23FF   	fcall	___ftpack
  3951  0BF6  0870               	movf	?___ftpack,w
  3952  0BF7  1283               	bcf	3,5	;RP0=0, select bank0
  3953  0BF8  1303               	bcf	3,6	;RP1=0, select bank0
  3954  0BF9  00CE               	movwf	?___altoft
  3955  0BFA  0871               	movf	?___ftpack+1,w
  3956  0BFB  00CF               	movwf	?___altoft+1
  3957  0BFC  0872               	movf	?___ftpack+2,w
  3958  0BFD  00D0               	movwf	?___altoft+2
  3959  0BFE  0008               	return
  3960  0BFF                     __end_of___altoft:	
  3961                           
  3962                           	psect	text11
  3963  0C6B                     __ptext11:	
  3964 ;; *************** function _eval_poly *****************
  3965 ;; Defined at:
  3966 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\evalpoly.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  x               3   45[BANK0 ] float 
  3969 ;;  d               1   48[BANK0 ] PTR const 
  3970 ;;		 -> sin@coeff_a(15), sin@coeff_b(12), 
  3971 ;;  n               2   49[BANK0 ] int 
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;  res             3   51[BANK0 ] int 
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  3   45[BANK0 ] int 
  3976 ;; Registers used:
  3977 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3983 ;;      Params:         0       6       0       0       0
  3984 ;;      Locals:         0       3       0       0       0
  3985 ;;      Temps:          1       0       0       0       0
  3986 ;;      Totals:         1       9       0       0       0
  3987 ;;Total ram usage:       10 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    2
  3990 ;; This function calls:
  3991 ;;		___bmul
  3992 ;;		___ftadd
  3993 ;;		___ftmul
  3994 ;; This function is called by:
  3995 ;;		_sin
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           
  4000                           ;psect for function _eval_poly
  4001  0C6B                     _eval_poly:	
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4005  0C6B  3003               	movlw	3
  4006  0C6C  00FC               	movwf	??_eval_poly
  4007  0C6D  087C               	movf	??_eval_poly,w
  4008  0C6E  00F0               	movwf	___bmul@multiplicand
  4009  0C6F  1283               	bcf	3,5	;RP0=0, select bank0
  4010  0C70  1303               	bcf	3,6	;RP1=0, select bank0
  4011  0C71  0851               	movf	eval_poly@n,w
  4012  0C72  120A  158A  229A  120A  158A  	fcall	___bmul
  4013  0C77  1283               	bcf	3,5	;RP0=0, select bank0
  4014  0C78  1303               	bcf	3,6	;RP1=0, select bank0
  4015  0C79  0750               	addwf	eval_poly@d,w
  4016  0C7A  0084               	movwf	4
  4017  0C7B  120A  158A  2000  120A  158A  	fcall	stringdir
  4018  0C80  00D3               	movwf	eval_poly@res
  4019  0C81  120A  158A  2000  120A  158A  	fcall	stringdir
  4020  0C86  00D4               	movwf	eval_poly@res+1
  4021  0C87  120A  158A  2000  120A  158A  	fcall	stringdir
  4022  0C8C                     L10:	
  4023  0C8C  00D5               	movwf	eval_poly@res+2
  4024  0C8D  0851               	movf	eval_poly@n,w
  4025  0C8E  0452               	iorwf	eval_poly@n+1,w
  4026  0C8F  1903               	btfsc	3,2
  4027  0C90  2CDD               	goto	i1l1802
  4028  0C91  3003               	movlw	3
  4029  0C92  00FC               	movwf	??_eval_poly
  4030  0C93  087C               	movf	??_eval_poly,w
  4031  0C94  00F0               	movwf	___bmul@multiplicand
  4032  0C95  30FF               	movlw	255
  4033  0C96  07D1               	addwf	eval_poly@n,f
  4034  0C97  1803               	skipnc
  4035  0C98  0AD2               	incf	eval_poly@n+1,f
  4036  0C99  30FF               	movlw	255
  4037  0C9A  07D2               	addwf	eval_poly@n+1,f
  4038  0C9B  0851               	movf	eval_poly@n,w
  4039  0C9C  120A  158A  229A  120A  158A  	fcall	___bmul
  4040  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  4041  0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  4042  0CA3  0750               	addwf	eval_poly@d,w
  4043  0CA4  0084               	movwf	4
  4044  0CA5  120A  158A  2000  120A  158A  	fcall	stringdir
  4045  0CAA  00C0               	movwf	___ftadd@f1
  4046  0CAB  120A  158A  2000  120A  158A  	fcall	stringdir
  4047  0CB0  00C1               	movwf	___ftadd@f1+1
  4048  0CB1  120A  158A  2000  120A  158A  	fcall	stringdir
  4049  0CB6  00C2               	movwf	___ftadd@f1+2
  4050  0CB7  0853               	movf	eval_poly@res,w
  4051  0CB8  00A0               	movwf	___ftmul@f1
  4052  0CB9  0854               	movf	eval_poly@res+1,w
  4053  0CBA  00A1               	movwf	___ftmul@f1+1
  4054  0CBB  0855               	movf	eval_poly@res+2,w
  4055  0CBC  00A2               	movwf	___ftmul@f1+2
  4056  0CBD  084D               	movf	eval_poly@x,w
  4057  0CBE  00A3               	movwf	___ftmul@f2
  4058  0CBF  084E               	movf	eval_poly@x+1,w
  4059  0CC0  00A4               	movwf	___ftmul@f2+1
  4060  0CC1  084F               	movf	eval_poly@x+2,w
  4061  0CC2  00A5               	movwf	___ftmul@f2+2
  4062  0CC3  120A  118A  26CB  120A  158A  	fcall	___ftmul
  4063  0CC8  1283               	bcf	3,5	;RP0=0, select bank0
  4064  0CC9  1303               	bcf	3,6	;RP1=0, select bank0
  4065  0CCA  0820               	movf	?___ftmul,w
  4066  0CCB  00C3               	movwf	___ftadd@f2
  4067  0CCC  0821               	movf	?___ftmul+1,w
  4068  0CCD  00C4               	movwf	___ftadd@f2+1
  4069  0CCE  0822               	movf	?___ftmul+2,w
  4070  0CCF  00C5               	movwf	___ftadd@f2+2
  4071  0CD0  120A  118A  25C2  120A  158A  	fcall	___ftadd
  4072  0CD5  1283               	bcf	3,5	;RP0=0, select bank0
  4073  0CD6  1303               	bcf	3,6	;RP1=0, select bank0
  4074  0CD7  0840               	movf	?___ftadd,w
  4075  0CD8  00D3               	movwf	eval_poly@res
  4076  0CD9  0841               	movf	?___ftadd+1,w
  4077  0CDA  00D4               	movwf	eval_poly@res+1
  4078  0CDB  0842               	movf	?___ftadd+2,w
  4079  0CDC  2C8C               	goto	L10
  4080  0CDD                     i1l1802:	
  4081  0CDD  0853               	movf	eval_poly@res,w
  4082  0CDE  00CD               	movwf	?_eval_poly
  4083  0CDF  0854               	movf	eval_poly@res+1,w
  4084  0CE0  00CE               	movwf	?_eval_poly+1
  4085  0CE1  0855               	movf	eval_poly@res+2,w
  4086  0CE2  00CF               	movwf	?_eval_poly+2
  4087  0CE3  0008               	return
  4088  0CE4                     __end_of_eval_poly:	
  4089                           
  4090                           	psect	text12
  4091  06CB                     __ptext12:	
  4092 ;; *************** function ___ftmul *****************
  4093 ;; Defined at:
  4094 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;  f1              3    0[BANK0 ] float 
  4097 ;;  f2              3    3[BANK0 ] float 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  4100 ;;  sign            1   15[BANK0 ] unsigned char 
  4101 ;;  cntr            1   14[BANK0 ] unsigned char 
  4102 ;;  exp             1   10[BANK0 ] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  3    0[BANK0 ] float 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0, pclath, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4112 ;;      Params:         0       6       0       0       0
  4113 ;;      Locals:         0       6       0       0       0
  4114 ;;      Temps:          0       4       0       0       0
  4115 ;;      Totals:         0      16       0       0       0
  4116 ;;Total ram usage:       16 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    1
  4119 ;; This function calls:
  4120 ;;		___ftpack
  4121 ;; This function is called by:
  4122 ;;		_ISR
  4123 ;;		_sin
  4124 ;;		_eval_poly
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           
  4129                           ;psect for function ___ftmul
  4130  06CB                     ___ftmul:	
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4134  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  4135  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  4136  06CD  0820               	movf	___ftmul@f1,w
  4137  06CE  00A6               	movwf	??___ftmul
  4138  06CF  0821               	movf	___ftmul@f1+1,w
  4139  06D0  00A7               	movwf	??___ftmul+1
  4140  06D1  0822               	movf	___ftmul@f1+2,w
  4141  06D2  00A8               	movwf	??___ftmul+2
  4142  06D3  1003               	clrc
  4143  06D4  0D27               	rlf	??___ftmul+1,w
  4144  06D5  0D28               	rlf	??___ftmul+2,w
  4145  06D6  00A9               	movwf	??___ftmul+3
  4146  06D7  0829               	movf	??___ftmul+3,w
  4147  06D8  00AA               	movwf	___ftmul@exp
  4148  06D9  082A               	movf	___ftmul@exp,w
  4149  06DA  1D03               	btfss	3,2
  4150  06DB  2EE3               	goto	i1l1560
  4151  06DC  3000               	movlw	0
  4152  06DD  00A0               	movwf	?___ftmul
  4153  06DE  3000               	movlw	0
  4154  06DF  00A1               	movwf	?___ftmul+1
  4155  06E0  3000               	movlw	0
  4156  06E1  00A2               	movwf	?___ftmul+2
  4157  06E2  0008               	return
  4158  06E3                     i1l1560:	
  4159  06E3  0823               	movf	___ftmul@f2,w
  4160  06E4  00A6               	movwf	??___ftmul
  4161  06E5  0824               	movf	___ftmul@f2+1,w
  4162  06E6  00A7               	movwf	??___ftmul+1
  4163  06E7  0825               	movf	___ftmul@f2+2,w
  4164  06E8  00A8               	movwf	??___ftmul+2
  4165  06E9  1003               	clrc
  4166  06EA  0D27               	rlf	??___ftmul+1,w
  4167  06EB  0D28               	rlf	??___ftmul+2,w
  4168  06EC  00A9               	movwf	??___ftmul+3
  4169  06ED  0829               	movf	??___ftmul+3,w
  4170  06EE  00AF               	movwf	___ftmul@sign
  4171  06EF  082F               	movf	___ftmul@sign,w
  4172  06F0  1D03               	btfss	3,2
  4173  06F1  2EF9               	goto	i1l1566
  4174  06F2  3000               	movlw	0
  4175  06F3  00A0               	movwf	?___ftmul
  4176  06F4  3000               	movlw	0
  4177  06F5  00A1               	movwf	?___ftmul+1
  4178  06F6  3000               	movlw	0
  4179  06F7  00A2               	movwf	?___ftmul+2
  4180  06F8  0008               	return
  4181  06F9                     i1l1566:	
  4182  06F9  082F               	movf	___ftmul@sign,w
  4183  06FA  3E7B               	addlw	123
  4184  06FB  00A6               	movwf	??___ftmul
  4185  06FC  0826               	movf	??___ftmul,w
  4186  06FD  07AA               	addwf	___ftmul@exp,f
  4187  06FE  0820               	movf	___ftmul@f1,w
  4188  06FF  00A6               	movwf	??___ftmul
  4189  0700  0821               	movf	___ftmul@f1+1,w
  4190  0701  00A7               	movwf	??___ftmul+1
  4191  0702  0822               	movf	___ftmul@f1+2,w
  4192  0703  00A8               	movwf	??___ftmul+2
  4193  0704  3010               	movlw	16
  4194  0705                     u175_25:	
  4195  0705  1003               	clrc
  4196  0706  0CA8               	rrf	??___ftmul+2,f
  4197  0707  0CA7               	rrf	??___ftmul+1,f
  4198  0708  0CA6               	rrf	??___ftmul,f
  4199  0709  3EFF               	addlw	-1
  4200  070A  1D03               	skipz
  4201  070B  2F05               	goto	u175_25
  4202  070C  0826               	movf	??___ftmul,w
  4203  070D  00A9               	movwf	??___ftmul+3
  4204  070E  0829               	movf	??___ftmul+3,w
  4205  070F  00AF               	movwf	___ftmul@sign
  4206  0710  0823               	movf	___ftmul@f2,w
  4207  0711  00A6               	movwf	??___ftmul
  4208  0712  0824               	movf	___ftmul@f2+1,w
  4209  0713  00A7               	movwf	??___ftmul+1
  4210  0714  0825               	movf	___ftmul@f2+2,w
  4211  0715  00A8               	movwf	??___ftmul+2
  4212  0716  3010               	movlw	16
  4213  0717                     u176_25:	
  4214  0717  1003               	clrc
  4215  0718  0CA8               	rrf	??___ftmul+2,f
  4216  0719  0CA7               	rrf	??___ftmul+1,f
  4217  071A  0CA6               	rrf	??___ftmul,f
  4218  071B  3EFF               	addlw	-1
  4219  071C  1D03               	skipz
  4220  071D  2F17               	goto	u176_25
  4221  071E  0826               	movf	??___ftmul,w
  4222  071F  00A9               	movwf	??___ftmul+3
  4223  0720  0829               	movf	??___ftmul+3,w
  4224  0721  06AF               	xorwf	___ftmul@sign,f
  4225  0722  3080               	movlw	128
  4226  0723  00A6               	movwf	??___ftmul
  4227  0724  0826               	movf	??___ftmul,w
  4228  0725  05AF               	andwf	___ftmul@sign,f
  4229  0726  17A1               	bsf	___ftmul@f1+1,7
  4230  0727  17A4               	bsf	___ftmul@f2+1,7
  4231  0728  30FF               	movlw	255
  4232  0729  05A3               	andwf	___ftmul@f2,f
  4233  072A  30FF               	movlw	255
  4234  072B  05A4               	andwf	___ftmul@f2+1,f
  4235  072C  3000               	movlw	0
  4236  072D  05A5               	andwf	___ftmul@f2+2,f
  4237  072E  3000               	movlw	0
  4238  072F  00AB               	movwf	___ftmul@f3_as_product
  4239  0730  3000               	movlw	0
  4240  0731  00AC               	movwf	___ftmul@f3_as_product+1
  4241  0732  3000               	movlw	0
  4242  0733  00AD               	movwf	___ftmul@f3_as_product+2
  4243  0734  3007               	movlw	7
  4244  0735  00A6               	movwf	??___ftmul
  4245  0736  0826               	movf	??___ftmul,w
  4246  0737  00AE               	movwf	___ftmul@cntr
  4247  0738                     i1l1578:	
  4248  0738  1C20               	btfss	___ftmul@f1,0
  4249  0739  2F48               	goto	i1l1582
  4250  073A  0823               	movf	___ftmul@f2,w
  4251  073B  07AB               	addwf	___ftmul@f3_as_product,f
  4252  073C  0824               	movf	___ftmul@f2+1,w
  4253  073D  1103               	clrz
  4254  073E  1803               	skipnc
  4255  073F  0A24               	incf	___ftmul@f2+1,w
  4256  0740  1D03               	btfss	3,2
  4257  0741  07AC               	addwf	___ftmul@f3_as_product+1,f
  4258  0742  0825               	movf	___ftmul@f2+2,w
  4259  0743  1103               	clrz
  4260  0744  1803               	skipnc
  4261  0745  0A25               	incf	___ftmul@f2+2,w
  4262  0746  1D03               	btfss	3,2
  4263  0747  07AD               	addwf	___ftmul@f3_as_product+2,f
  4264  0748                     i1l1582:	
  4265  0748  3001               	movlw	1
  4266  0749                     u179_25:	
  4267  0749  1003               	clrc
  4268  074A  0CA2               	rrf	___ftmul@f1+2,f
  4269  074B  0CA1               	rrf	___ftmul@f1+1,f
  4270  074C  0CA0               	rrf	___ftmul@f1,f
  4271  074D  3EFF               	addlw	-1
  4272  074E  1D03               	skipz
  4273  074F  2F49               	goto	u179_25
  4274  0750  3001               	movlw	1
  4275  0751                     u180_25:	
  4276  0751  1003               	clrc
  4277  0752  0DA3               	rlf	___ftmul@f2,f
  4278  0753  0DA4               	rlf	___ftmul@f2+1,f
  4279  0754  0DA5               	rlf	___ftmul@f2+2,f
  4280  0755  3EFF               	addlw	-1
  4281  0756  1D03               	skipz
  4282  0757  2F51               	goto	u180_25
  4283  0758  3001               	movlw	1
  4284  0759  02AE               	subwf	___ftmul@cntr,f
  4285  075A  1D03               	btfss	3,2
  4286  075B  2F38               	goto	i1l1578
  4287  075C  3009               	movlw	9
  4288  075D  00A6               	movwf	??___ftmul
  4289  075E  0826               	movf	??___ftmul,w
  4290  075F  00AE               	movwf	___ftmul@cntr
  4291  0760                     i1l1590:	
  4292  0760  1C20               	btfss	___ftmul@f1,0
  4293  0761  2F70               	goto	i1l1594
  4294  0762  0823               	movf	___ftmul@f2,w
  4295  0763  07AB               	addwf	___ftmul@f3_as_product,f
  4296  0764  0824               	movf	___ftmul@f2+1,w
  4297  0765  1103               	clrz
  4298  0766  1803               	skipnc
  4299  0767  0A24               	incf	___ftmul@f2+1,w
  4300  0768  1D03               	btfss	3,2
  4301  0769  07AC               	addwf	___ftmul@f3_as_product+1,f
  4302  076A  0825               	movf	___ftmul@f2+2,w
  4303  076B  1103               	clrz
  4304  076C  1803               	skipnc
  4305  076D  0A25               	incf	___ftmul@f2+2,w
  4306  076E  1D03               	btfss	3,2
  4307  076F  07AD               	addwf	___ftmul@f3_as_product+2,f
  4308  0770                     i1l1594:	
  4309  0770  3001               	movlw	1
  4310  0771                     u184_25:	
  4311  0771  1003               	clrc
  4312  0772  0CA2               	rrf	___ftmul@f1+2,f
  4313  0773  0CA1               	rrf	___ftmul@f1+1,f
  4314  0774  0CA0               	rrf	___ftmul@f1,f
  4315  0775  3EFF               	addlw	-1
  4316  0776  1D03               	skipz
  4317  0777  2F71               	goto	u184_25
  4318  0778  3001               	movlw	1
  4319  0779                     u185_25:	
  4320  0779  1003               	clrc
  4321  077A  0CAD               	rrf	___ftmul@f3_as_product+2,f
  4322  077B  0CAC               	rrf	___ftmul@f3_as_product+1,f
  4323  077C  0CAB               	rrf	___ftmul@f3_as_product,f
  4324  077D  3EFF               	addlw	-1
  4325  077E  1D03               	skipz
  4326  077F  2F79               	goto	u185_25
  4327  0780  3001               	movlw	1
  4328  0781  02AE               	subwf	___ftmul@cntr,f
  4329  0782  1D03               	btfss	3,2
  4330  0783  2F60               	goto	i1l1590
  4331  0784  082B               	movf	___ftmul@f3_as_product,w
  4332  0785  00F0               	movwf	___ftpack@arg
  4333  0786  082C               	movf	___ftmul@f3_as_product+1,w
  4334  0787  00F1               	movwf	___ftpack@arg+1
  4335  0788  082D               	movf	___ftmul@f3_as_product+2,w
  4336  0789  00F2               	movwf	___ftpack@arg+2
  4337  078A  082A               	movf	___ftmul@exp,w
  4338  078B  00A6               	movwf	??___ftmul
  4339  078C  0826               	movf	??___ftmul,w
  4340  078D  00F3               	movwf	___ftpack@exp
  4341  078E  082F               	movf	___ftmul@sign,w
  4342  078F  00A7               	movwf	??___ftmul+1
  4343  0790  0827               	movf	??___ftmul+1,w
  4344  0791  00F4               	movwf	___ftpack@sign
  4345  0792  120A  158A  23FF   	fcall	___ftpack
  4346  0795  0870               	movf	?___ftpack,w
  4347  0796  1283               	bcf	3,5	;RP0=0, select bank0
  4348  0797  1303               	bcf	3,6	;RP1=0, select bank0
  4349  0798  00A0               	movwf	?___ftmul
  4350  0799  0871               	movf	?___ftpack+1,w
  4351  079A  00A1               	movwf	?___ftmul+1
  4352  079B  0872               	movf	?___ftpack+2,w
  4353  079C  00A2               	movwf	?___ftmul+2
  4354  079D  0008               	return
  4355  079E                     __end_of___ftmul:	
  4356                           
  4357                           	psect	text13
  4358  0A9A                     __ptext13:	
  4359 ;; *************** function ___bmul *****************
  4360 ;; Defined at:
  4361 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;  multiplier      1    wreg     unsigned char 
  4364 ;;  multiplicand    1    0[COMMON] unsigned char 
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;  multiplier      1    3[COMMON] unsigned char 
  4367 ;;  product         1    2[COMMON] unsigned char 
  4368 ;; Return value:  Size  Location     Type
  4369 ;;                  1    wreg      unsigned char 
  4370 ;; Registers used:
  4371 ;;		wreg, status,2, status,0
  4372 ;; Tracked objects:
  4373 ;;		On entry : 0/0
  4374 ;;		On exit  : 0/0
  4375 ;;		Unchanged: 0/0
  4376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4377 ;;      Params:         1       0       0       0       0
  4378 ;;      Locals:         2       0       0       0       0
  4379 ;;      Temps:          1       0       0       0       0
  4380 ;;      Totals:         4       0       0       0       0
  4381 ;;Total ram usage:        4 bytes
  4382 ;; Hardware stack levels used:    1
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_eval_poly
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           
  4391                           ;psect for function ___bmul
  4392  0A9A                     ___bmul:	
  4393                           
  4394                           ;incstack = 0
  4395                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4396                           ;___bmul@multiplier stored from wreg
  4397  0A9A  00F3               	movwf	___bmul@multiplier
  4398  0A9B  01F2               	clrf	___bmul@product
  4399  0A9C                     i1l1436:	
  4400  0A9C  1C73               	btfss	___bmul@multiplier,0
  4401  0A9D  2AA2               	goto	i1l1440
  4402  0A9E  0870               	movf	___bmul@multiplicand,w
  4403  0A9F  00F1               	movwf	??___bmul
  4404  0AA0  0871               	movf	??___bmul,w
  4405  0AA1  07F2               	addwf	___bmul@product,f
  4406  0AA2                     i1l1440:	
  4407  0AA2  1003               	clrc
  4408  0AA3  0DF0               	rlf	___bmul@multiplicand,f
  4409  0AA4  1003               	clrc
  4410  0AA5  0CF3               	rrf	___bmul@multiplier,f
  4411  0AA6  0873               	movf	___bmul@multiplier,w
  4412  0AA7  1D03               	btfss	3,2
  4413  0AA8  2A9C               	goto	i1l1436
  4414  0AA9  0872               	movf	___bmul@product,w
  4415  0AAA  0008               	return
  4416  0AAB                     __end_of___bmul:	
  4417                           
  4418                           	psect	text14
  4419  0B23                     __ptext14:	
  4420 ;; *************** function ___ftsub *****************
  4421 ;; Defined at:
  4422 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  4423 ;; Parameters:    Size  Location     Type
  4424 ;;  f2              3   61[BANK0 ] float 
  4425 ;;  f1              3   64[BANK0 ] float 
  4426 ;; Auto vars:     Size  Location     Type
  4427 ;;		None
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  3   61[BANK0 ] float 
  4430 ;; Registers used:
  4431 ;;		wreg, status,2, status,0, pclath, cstack
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4437 ;;      Params:         0       6       0       0       0
  4438 ;;      Locals:         0       0       0       0       0
  4439 ;;      Temps:          0       0       0       0       0
  4440 ;;      Totals:         0       6       0       0       0
  4441 ;;Total ram usage:        6 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    2
  4444 ;; This function calls:
  4445 ;;		___ftadd
  4446 ;; This function is called by:
  4447 ;;		_sin
  4448 ;; This function uses a non-reentrant model
  4449 ;;
  4450                           
  4451                           
  4452                           ;psect for function ___ftsub
  4453  0B23                     ___ftsub:	
  4454                           
  4455                           ;incstack = 0
  4456                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4457  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  4458  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  4459  0B25  085F               	movf	___ftsub@f2+2,w
  4460  0B26  045E               	iorwf	___ftsub@f2+1,w
  4461  0B27  045D               	iorwf	___ftsub@f2,w
  4462  0B28  1903               	skipnz
  4463  0B29  2B2C               	goto	i1l1764
  4464  0B2A  3080               	movlw	128
  4465  0B2B  06DF               	xorwf	___ftsub@f2+2,f
  4466  0B2C                     i1l1764:	
  4467  0B2C  0860               	movf	___ftsub@f1,w
  4468  0B2D  00C0               	movwf	___ftadd@f1
  4469  0B2E  0861               	movf	___ftsub@f1+1,w
  4470  0B2F  00C1               	movwf	___ftadd@f1+1
  4471  0B30  0862               	movf	___ftsub@f1+2,w
  4472  0B31  00C2               	movwf	___ftadd@f1+2
  4473  0B32  085D               	movf	___ftsub@f2,w
  4474  0B33  00C3               	movwf	___ftadd@f2
  4475  0B34  085E               	movf	___ftsub@f2+1,w
  4476  0B35  00C4               	movwf	___ftadd@f2+1
  4477  0B36  085F               	movf	___ftsub@f2+2,w
  4478  0B37  00C5               	movwf	___ftadd@f2+2
  4479  0B38  120A  118A  25C2   	fcall	___ftadd
  4480  0B3B  1283               	bcf	3,5	;RP0=0, select bank0
  4481  0B3C  1303               	bcf	3,6	;RP1=0, select bank0
  4482  0B3D  0840               	movf	?___ftadd,w
  4483  0B3E  00DD               	movwf	?___ftsub
  4484  0B3F  0841               	movf	?___ftadd+1,w
  4485  0B40  00DE               	movwf	?___ftsub+1
  4486  0B41  0842               	movf	?___ftadd+2,w
  4487  0B42  00DF               	movwf	?___ftsub+2
  4488  0B43  0008               	return
  4489  0B44                     __end_of___ftsub:	
  4490                           
  4491                           	psect	text15
  4492  05C2                     __ptext15:	
  4493 ;; *************** function ___ftadd *****************
  4494 ;; Defined at:
  4495 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  f1              3   32[BANK0 ] float 
  4498 ;;  f2              3   35[BANK0 ] float 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  exp1            1   44[BANK0 ] unsigned char 
  4501 ;;  exp2            1   43[BANK0 ] unsigned char 
  4502 ;;  sign            1   42[BANK0 ] unsigned char 
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  3   32[BANK0 ] float 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0, pclath, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4512 ;;      Params:         0       6       0       0       0
  4513 ;;      Locals:         0       3       0       0       0
  4514 ;;      Temps:          0       4       0       0       0
  4515 ;;      Totals:         0      13       0       0       0
  4516 ;;Total ram usage:       13 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    1
  4519 ;; This function calls:
  4520 ;;		___ftpack
  4521 ;; This function is called by:
  4522 ;;		_ISR
  4523 ;;		___ftsub
  4524 ;;		_sin
  4525 ;;		_eval_poly
  4526 ;;		_floor
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           
  4531                           ;psect for function ___ftadd
  4532  05C2                     ___ftadd:	
  4533                           
  4534                           ;incstack = 0
  4535                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4536  05C2  1283               	bcf	3,5	;RP0=0, select bank0
  4537  05C3  1303               	bcf	3,6	;RP1=0, select bank0
  4538  05C4  0840               	movf	___ftadd@f1,w
  4539  05C5  00C6               	movwf	??___ftadd
  4540  05C6  0841               	movf	___ftadd@f1+1,w
  4541  05C7  00C7               	movwf	??___ftadd+1
  4542  05C8  0842               	movf	___ftadd@f1+2,w
  4543  05C9  00C8               	movwf	??___ftadd+2
  4544  05CA  1003               	clrc
  4545  05CB  0D47               	rlf	??___ftadd+1,w
  4546  05CC  0D48               	rlf	??___ftadd+2,w
  4547  05CD  00C9               	movwf	??___ftadd+3
  4548  05CE  0849               	movf	??___ftadd+3,w
  4549  05CF  00CC               	movwf	___ftadd@exp1
  4550  05D0  0843               	movf	___ftadd@f2,w
  4551  05D1  00C6               	movwf	??___ftadd
  4552  05D2  0844               	movf	___ftadd@f2+1,w
  4553  05D3  00C7               	movwf	??___ftadd+1
  4554  05D4  0845               	movf	___ftadd@f2+2,w
  4555  05D5  00C8               	movwf	??___ftadd+2
  4556  05D6  1003               	clrc
  4557  05D7  0D47               	rlf	??___ftadd+1,w
  4558  05D8  0D48               	rlf	??___ftadd+2,w
  4559  05D9  00C9               	movwf	??___ftadd+3
  4560  05DA  0849               	movf	??___ftadd+3,w
  4561  05DB  00CB               	movwf	___ftadd@exp2
  4562  05DC  084C               	movf	___ftadd@exp1,w
  4563  05DD  1903               	btfsc	3,2
  4564  05DE  2DEB               	goto	i1l1470
  4565  05DF  084B               	movf	___ftadd@exp2,w
  4566  05E0  024C               	subwf	___ftadd@exp1,w
  4567  05E1  1803               	skipnc
  4568  05E2  2DF2               	goto	i1l1474
  4569  05E3  034C               	decf	___ftadd@exp1,w
  4570  05E4  3AFF               	xorlw	255
  4571  05E5  074B               	addwf	___ftadd@exp2,w
  4572  05E6  00C6               	movwf	??___ftadd
  4573  05E7  3019               	movlw	25
  4574  05E8  0246               	subwf	??___ftadd,w
  4575  05E9  1C03               	skipc
  4576  05EA  2DF2               	goto	i1l1474
  4577  05EB                     i1l1470:	
  4578  05EB  0843               	movf	___ftadd@f2,w
  4579  05EC  00C0               	movwf	?___ftadd
  4580  05ED  0844               	movf	___ftadd@f2+1,w
  4581  05EE  00C1               	movwf	?___ftadd+1
  4582  05EF  0845               	movf	___ftadd@f2+2,w
  4583  05F0  00C2               	movwf	?___ftadd+2
  4584  05F1  0008               	return
  4585  05F2                     i1l1474:	
  4586  05F2  084B               	movf	___ftadd@exp2,w
  4587  05F3  1903               	btfsc	3,2
  4588  05F4  0008               	return
  4589  05F5  084C               	movf	___ftadd@exp1,w
  4590  05F6  024B               	subwf	___ftadd@exp2,w
  4591  05F7  1803               	skipnc
  4592  05F8  2E01               	goto	i1l1480
  4593  05F9  034B               	decf	___ftadd@exp2,w
  4594  05FA  3AFF               	xorlw	255
  4595  05FB  074C               	addwf	___ftadd@exp1,w
  4596  05FC  00C6               	movwf	??___ftadd
  4597  05FD  3019               	movlw	25
  4598  05FE  0246               	subwf	??___ftadd,w
  4599  05FF  1803               	btfsc	3,0
  4600  0600  0008               	return
  4601  0601                     i1l1480:	
  4602  0601  3006               	movlw	6
  4603  0602  00C6               	movwf	??___ftadd
  4604  0603  0846               	movf	??___ftadd,w
  4605  0604  00CA               	movwf	___ftadd@sign
  4606  0605  1BC2               	btfsc	___ftadd@f1+2,7
  4607  0606  17CA               	bsf	___ftadd@sign,7
  4608  0607  1BC5               	btfsc	___ftadd@f2+2,7
  4609  0608  174A               	bsf	___ftadd@sign,6
  4610  0609  17C1               	bsf	___ftadd@f1+1,7
  4611  060A  30FF               	movlw	255
  4612  060B  05C0               	andwf	___ftadd@f1,f
  4613  060C  30FF               	movlw	255
  4614  060D  05C1               	andwf	___ftadd@f1+1,f
  4615  060E  3000               	movlw	0
  4616  060F  05C2               	andwf	___ftadd@f1+2,f
  4617  0610  17C4               	bsf	___ftadd@f2+1,7
  4618  0611  30FF               	movlw	255
  4619  0612  05C3               	andwf	___ftadd@f2,f
  4620  0613  30FF               	movlw	255
  4621  0614  05C4               	andwf	___ftadd@f2+1,f
  4622  0615  3000               	movlw	0
  4623  0616  05C5               	andwf	___ftadd@f2+2,f
  4624  0617  084B               	movf	___ftadd@exp2,w
  4625  0618  024C               	subwf	___ftadd@exp1,w
  4626  0619  1803               	skipnc
  4627  061A  2E41               	goto	i1l1502
  4628  061B                     i1l1492:	
  4629  061B  3001               	movlw	1
  4630  061C                     u153_25:	
  4631  061C  1003               	clrc
  4632  061D  0DC3               	rlf	___ftadd@f2,f
  4633  061E  0DC4               	rlf	___ftadd@f2+1,f
  4634  061F  0DC5               	rlf	___ftadd@f2+2,f
  4635  0620  3EFF               	addlw	-1
  4636  0621  1D03               	skipz
  4637  0622  2E1C               	goto	u153_25
  4638  0623  3001               	movlw	1
  4639  0624  02CB               	subwf	___ftadd@exp2,f
  4640  0625  084B               	movf	___ftadd@exp2,w
  4641  0626  064C               	xorwf	___ftadd@exp1,w
  4642  0627  1903               	skipnz
  4643  0628  2E3C               	goto	i1l1500
  4644  0629  3001               	movlw	1
  4645  062A  02CA               	subwf	___ftadd@sign,f
  4646  062B  084A               	movf	___ftadd@sign,w
  4647  062C  3907               	andlw	7
  4648  062D  1903               	btfsc	3,2
  4649  062E  2E3C               	goto	i1l1500
  4650  062F  2E1B               	goto	i1l1492
  4651  0630                     i1l1498:	
  4652  0630  3001               	movlw	1
  4653  0631                     u156_25:	
  4654  0631  1003               	clrc
  4655  0632  0CC2               	rrf	___ftadd@f1+2,f
  4656  0633  0CC1               	rrf	___ftadd@f1+1,f
  4657  0634  0CC0               	rrf	___ftadd@f1,f
  4658  0635  3EFF               	addlw	-1
  4659  0636  1D03               	skipz
  4660  0637  2E31               	goto	u156_25
  4661  0638  3001               	movlw	1
  4662  0639  00C6               	movwf	??___ftadd
  4663  063A  0846               	movf	??___ftadd,w
  4664  063B  07CC               	addwf	___ftadd@exp1,f
  4665  063C                     i1l1500:	
  4666  063C  084C               	movf	___ftadd@exp1,w
  4667  063D  064B               	xorwf	___ftadd@exp2,w
  4668  063E  1903               	btfsc	3,2
  4669  063F  2E6A               	goto	i1l438
  4670  0640  2E30               	goto	i1l1498
  4671  0641                     i1l1502:	
  4672  0641  084C               	movf	___ftadd@exp1,w
  4673  0642  024B               	subwf	___ftadd@exp2,w
  4674  0643  1803               	skipnc
  4675  0644  2E6A               	goto	i1l438
  4676  0645                     i1l1504:	
  4677  0645  3001               	movlw	1
  4678  0646                     u159_25:	
  4679  0646  1003               	clrc
  4680  0647  0DC0               	rlf	___ftadd@f1,f
  4681  0648  0DC1               	rlf	___ftadd@f1+1,f
  4682  0649  0DC2               	rlf	___ftadd@f1+2,f
  4683  064A  3EFF               	addlw	-1
  4684  064B  1D03               	skipz
  4685  064C  2E46               	goto	u159_25
  4686  064D  3001               	movlw	1
  4687  064E  02CC               	subwf	___ftadd@exp1,f
  4688  064F  084B               	movf	___ftadd@exp2,w
  4689  0650  064C               	xorwf	___ftadd@exp1,w
  4690  0651  1903               	skipnz
  4691  0652  2E66               	goto	i1l1512
  4692  0653  3001               	movlw	1
  4693  0654  02CA               	subwf	___ftadd@sign,f
  4694  0655  084A               	movf	___ftadd@sign,w
  4695  0656  3907               	andlw	7
  4696  0657  1903               	btfsc	3,2
  4697  0658  2E66               	goto	i1l1512
  4698  0659  2E45               	goto	i1l1504
  4699  065A                     i1l1510:	
  4700  065A  3001               	movlw	1
  4701  065B                     u162_25:	
  4702  065B  1003               	clrc
  4703  065C  0CC5               	rrf	___ftadd@f2+2,f
  4704  065D  0CC4               	rrf	___ftadd@f2+1,f
  4705  065E  0CC3               	rrf	___ftadd@f2,f
  4706  065F  3EFF               	addlw	-1
  4707  0660  1D03               	skipz
  4708  0661  2E5B               	goto	u162_25
  4709  0662  3001               	movlw	1
  4710  0663  00C6               	movwf	??___ftadd
  4711  0664  0846               	movf	??___ftadd,w
  4712  0665  07CB               	addwf	___ftadd@exp2,f
  4713  0666                     i1l1512:	
  4714  0666  084C               	movf	___ftadd@exp1,w
  4715  0667  064B               	xorwf	___ftadd@exp2,w
  4716  0668  1D03               	skipz
  4717  0669  2E5A               	goto	i1l1510
  4718  066A                     i1l438:	
  4719  066A  1FCA               	btfss	___ftadd@sign,7
  4720  066B  2E7C               	goto	i1l1516
  4721  066C  30FF               	movlw	255
  4722  066D  06C0               	xorwf	___ftadd@f1,f
  4723  066E  30FF               	movlw	255
  4724  066F  06C1               	xorwf	___ftadd@f1+1,f
  4725  0670  30FF               	movlw	255
  4726  0671  06C2               	xorwf	___ftadd@f1+2,f
  4727  0672  3001               	movlw	1
  4728  0673  07C0               	addwf	___ftadd@f1,f
  4729  0674  3000               	movlw	0
  4730  0675  1803               	skipnc
  4731  0676  3001               	movlw	1
  4732  0677  07C1               	addwf	___ftadd@f1+1,f
  4733  0678  3000               	movlw	0
  4734  0679  1803               	skipnc
  4735  067A  3001               	movlw	1
  4736  067B  07C2               	addwf	___ftadd@f1+2,f
  4737  067C                     i1l1516:	
  4738  067C  1F4A               	btfss	___ftadd@sign,6
  4739  067D  2E8E               	goto	i1l1520
  4740  067E  30FF               	movlw	255
  4741  067F  06C3               	xorwf	___ftadd@f2,f
  4742  0680  30FF               	movlw	255
  4743  0681  06C4               	xorwf	___ftadd@f2+1,f
  4744  0682  30FF               	movlw	255
  4745  0683  06C5               	xorwf	___ftadd@f2+2,f
  4746  0684  3001               	movlw	1
  4747  0685  07C3               	addwf	___ftadd@f2,f
  4748  0686  3000               	movlw	0
  4749  0687  1803               	skipnc
  4750  0688  3001               	movlw	1
  4751  0689  07C4               	addwf	___ftadd@f2+1,f
  4752  068A  3000               	movlw	0
  4753  068B  1803               	skipnc
  4754  068C  3001               	movlw	1
  4755  068D  07C5               	addwf	___ftadd@f2+2,f
  4756  068E                     i1l1520:	
  4757  068E  01CA               	clrf	___ftadd@sign
  4758  068F  0840               	movf	___ftadd@f1,w
  4759  0690  07C3               	addwf	___ftadd@f2,f
  4760  0691  0841               	movf	___ftadd@f1+1,w
  4761  0692  1103               	clrz
  4762  0693  1803               	skipnc
  4763  0694  0A41               	incf	___ftadd@f1+1,w
  4764  0695  1D03               	btfss	3,2
  4765  0696  07C4               	addwf	___ftadd@f2+1,f
  4766  0697  0842               	movf	___ftadd@f1+2,w
  4767  0698  1103               	clrz
  4768  0699  1803               	skipnc
  4769  069A  0A42               	incf	___ftadd@f1+2,w
  4770  069B  1D03               	btfss	3,2
  4771  069C  07C5               	addwf	___ftadd@f2+2,f
  4772  069D  1FC5               	btfss	___ftadd@f2+2,7
  4773  069E  2EB1               	goto	i1l1530
  4774  069F  30FF               	movlw	255
  4775  06A0  06C3               	xorwf	___ftadd@f2,f
  4776  06A1  30FF               	movlw	255
  4777  06A2  06C4               	xorwf	___ftadd@f2+1,f
  4778  06A3  30FF               	movlw	255
  4779  06A4  06C5               	xorwf	___ftadd@f2+2,f
  4780  06A5  3001               	movlw	1
  4781  06A6  07C3               	addwf	___ftadd@f2,f
  4782  06A7  3000               	movlw	0
  4783  06A8  1803               	skipnc
  4784  06A9  3001               	movlw	1
  4785  06AA  07C4               	addwf	___ftadd@f2+1,f
  4786  06AB  3000               	movlw	0
  4787  06AC  1803               	skipnc
  4788  06AD  3001               	movlw	1
  4789  06AE  07C5               	addwf	___ftadd@f2+2,f
  4790  06AF  01CA               	clrf	___ftadd@sign
  4791  06B0  0ACA               	incf	___ftadd@sign,f
  4792  06B1                     i1l1530:	
  4793  06B1  0843               	movf	___ftadd@f2,w
  4794  06B2  00F0               	movwf	___ftpack@arg
  4795  06B3  0844               	movf	___ftadd@f2+1,w
  4796  06B4  00F1               	movwf	___ftpack@arg+1
  4797  06B5  0845               	movf	___ftadd@f2+2,w
  4798  06B6  00F2               	movwf	___ftpack@arg+2
  4799  06B7  084C               	movf	___ftadd@exp1,w
  4800  06B8  00C6               	movwf	??___ftadd
  4801  06B9  0846               	movf	??___ftadd,w
  4802  06BA  00F3               	movwf	___ftpack@exp
  4803  06BB  084A               	movf	___ftadd@sign,w
  4804  06BC  00C7               	movwf	??___ftadd+1
  4805  06BD  0847               	movf	??___ftadd+1,w
  4806  06BE  00F4               	movwf	___ftpack@sign
  4807  06BF  120A  158A  23FF   	fcall	___ftpack
  4808  06C2  0870               	movf	?___ftpack,w
  4809  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  4810  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  4811  06C5  00C0               	movwf	?___ftadd
  4812  06C6  0871               	movf	?___ftpack+1,w
  4813  06C7  00C1               	movwf	?___ftadd+1
  4814  06C8  0872               	movf	?___ftpack+2,w
  4815  06C9  00C2               	movwf	?___ftadd+2
  4816  06CA  0008               	return
  4817  06CB                     __end_of___ftadd:	
  4818                           
  4819                           	psect	text16
  4820  0A8A                     __ptext16:	
  4821 ;; *************** function ___ftneg *****************
  4822 ;; Defined at:
  4823 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  f1              3    0[COMMON] float 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;		None
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  3    0[COMMON] float 
  4830 ;; Registers used:
  4831 ;;		wreg
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4837 ;;      Params:         3       0       0       0       0
  4838 ;;      Locals:         0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0
  4840 ;;      Totals:         3       0       0       0       0
  4841 ;;Total ram usage:        3 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; This function calls:
  4844 ;;		Nothing
  4845 ;; This function is called by:
  4846 ;;		_sin
  4847 ;; This function uses a non-reentrant model
  4848 ;;
  4849                           
  4850                           
  4851                           ;psect for function ___ftneg
  4852  0A8A                     ___ftneg:	
  4853                           
  4854                           ;incstack = 0
  4855                           ; Regs used in ___ftneg: [wreg]
  4856  0A8A  0872               	movf	___ftneg@f1+2,w
  4857  0A8B  0471               	iorwf	___ftneg@f1+1,w
  4858  0A8C  0470               	iorwf	___ftneg@f1,w
  4859  0A8D  1903               	skipnz
  4860  0A8E  0008               	return
  4861  0A8F  3080               	movlw	128
  4862  0A90  06F2               	xorwf	___ftneg@f1+2,f
  4863  0A91  0008               	return
  4864  0A92                     __end_of___ftneg:	
  4865                           
  4866                           	psect	text17
  4867  0F48                     __ptext17:	
  4868 ;; *************** function ___ftdiv *****************
  4869 ;; Defined at:
  4870 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  f2              3   16[BANK0 ] float 
  4873 ;;  f1              3   19[BANK0 ] float 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  f3              3   27[BANK0 ] float 
  4876 ;;  sign            1   31[BANK0 ] unsigned char 
  4877 ;;  exp             1   30[BANK0 ] unsigned char 
  4878 ;;  cntr            1   26[BANK0 ] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  3   16[BANK0 ] float 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0, pclath, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4888 ;;      Params:         0       6       0       0       0
  4889 ;;      Locals:         0       6       0       0       0
  4890 ;;      Temps:          0       4       0       0       0
  4891 ;;      Totals:         0      16       0       0       0
  4892 ;;Total ram usage:       16 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    1
  4895 ;; This function calls:
  4896 ;;		___ftpack
  4897 ;; This function is called by:
  4898 ;;		_ISR
  4899 ;;		_sin
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function ___ftdiv
  4905  0F48                     ___ftdiv:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4909  0F48  1283               	bcf	3,5	;RP0=0, select bank0
  4910  0F49  1303               	bcf	3,6	;RP1=0, select bank0
  4911  0F4A  0833               	movf	___ftdiv@f1,w
  4912  0F4B  00B6               	movwf	??___ftdiv
  4913  0F4C  0834               	movf	___ftdiv@f1+1,w
  4914  0F4D  00B7               	movwf	??___ftdiv+1
  4915  0F4E  0835               	movf	___ftdiv@f1+2,w
  4916  0F4F  00B8               	movwf	??___ftdiv+2
  4917  0F50  1003               	clrc
  4918  0F51  0D37               	rlf	??___ftdiv+1,w
  4919  0F52  0D38               	rlf	??___ftdiv+2,w
  4920  0F53  00B9               	movwf	??___ftdiv+3
  4921  0F54  0839               	movf	??___ftdiv+3,w
  4922  0F55  00BE               	movwf	___ftdiv@exp
  4923  0F56  083E               	movf	___ftdiv@exp,w
  4924  0F57  1D03               	btfss	3,2
  4925  0F58  2F60               	goto	i1l1716
  4926  0F59  3000               	movlw	0
  4927  0F5A  00B0               	movwf	?___ftdiv
  4928  0F5B  3000               	movlw	0
  4929  0F5C  00B1               	movwf	?___ftdiv+1
  4930  0F5D  3000               	movlw	0
  4931  0F5E  00B2               	movwf	?___ftdiv+2
  4932  0F5F  0008               	return
  4933  0F60                     i1l1716:	
  4934  0F60  0830               	movf	___ftdiv@f2,w
  4935  0F61  00B6               	movwf	??___ftdiv
  4936  0F62  0831               	movf	___ftdiv@f2+1,w
  4937  0F63  00B7               	movwf	??___ftdiv+1
  4938  0F64  0832               	movf	___ftdiv@f2+2,w
  4939  0F65  00B8               	movwf	??___ftdiv+2
  4940  0F66  1003               	clrc
  4941  0F67  0D37               	rlf	??___ftdiv+1,w
  4942  0F68  0D38               	rlf	??___ftdiv+2,w
  4943  0F69  00B9               	movwf	??___ftdiv+3
  4944  0F6A  0839               	movf	??___ftdiv+3,w
  4945  0F6B  00BF               	movwf	___ftdiv@sign
  4946  0F6C  083F               	movf	___ftdiv@sign,w
  4947  0F6D  1D03               	btfss	3,2
  4948  0F6E  2F76               	goto	i1l1722
  4949  0F6F  3000               	movlw	0
  4950  0F70  00B0               	movwf	?___ftdiv
  4951  0F71  3000               	movlw	0
  4952  0F72  00B1               	movwf	?___ftdiv+1
  4953  0F73  3000               	movlw	0
  4954  0F74  00B2               	movwf	?___ftdiv+2
  4955  0F75  0008               	return
  4956  0F76                     i1l1722:	
  4957  0F76  3000               	movlw	0
  4958  0F77  00BB               	movwf	___ftdiv@f3
  4959  0F78  3000               	movlw	0
  4960  0F79  00BC               	movwf	___ftdiv@f3+1
  4961  0F7A  3000               	movlw	0
  4962  0F7B  00BD               	movwf	___ftdiv@f3+2
  4963  0F7C  3089               	movlw	137
  4964  0F7D  073F               	addwf	___ftdiv@sign,w
  4965  0F7E  00B6               	movwf	??___ftdiv
  4966  0F7F  0836               	movf	??___ftdiv,w
  4967  0F80  02BE               	subwf	___ftdiv@exp,f
  4968  0F81  0833               	movf	___ftdiv@f1,w
  4969  0F82  00B6               	movwf	??___ftdiv
  4970  0F83  0834               	movf	___ftdiv@f1+1,w
  4971  0F84  00B7               	movwf	??___ftdiv+1
  4972  0F85  0835               	movf	___ftdiv@f1+2,w
  4973  0F86  00B8               	movwf	??___ftdiv+2
  4974  0F87  3010               	movlw	16
  4975  0F88                     u211_25:	
  4976  0F88  1003               	clrc
  4977  0F89  0CB8               	rrf	??___ftdiv+2,f
  4978  0F8A  0CB7               	rrf	??___ftdiv+1,f
  4979  0F8B  0CB6               	rrf	??___ftdiv,f
  4980  0F8C  3EFF               	addlw	-1
  4981  0F8D  1D03               	skipz
  4982  0F8E  2F88               	goto	u211_25
  4983  0F8F  0836               	movf	??___ftdiv,w
  4984  0F90  00B9               	movwf	??___ftdiv+3
  4985  0F91  0839               	movf	??___ftdiv+3,w
  4986  0F92  00BF               	movwf	___ftdiv@sign
  4987  0F93  0830               	movf	___ftdiv@f2,w
  4988  0F94  00B6               	movwf	??___ftdiv
  4989  0F95  0831               	movf	___ftdiv@f2+1,w
  4990  0F96  00B7               	movwf	??___ftdiv+1
  4991  0F97  0832               	movf	___ftdiv@f2+2,w
  4992  0F98  00B8               	movwf	??___ftdiv+2
  4993  0F99  3010               	movlw	16
  4994  0F9A                     u212_25:	
  4995  0F9A  1003               	clrc
  4996  0F9B  0CB8               	rrf	??___ftdiv+2,f
  4997  0F9C  0CB7               	rrf	??___ftdiv+1,f
  4998  0F9D  0CB6               	rrf	??___ftdiv,f
  4999  0F9E  3EFF               	addlw	-1
  5000  0F9F  1D03               	skipz
  5001  0FA0  2F9A               	goto	u212_25
  5002  0FA1  0836               	movf	??___ftdiv,w
  5003  0FA2  00B9               	movwf	??___ftdiv+3
  5004  0FA3  0839               	movf	??___ftdiv+3,w
  5005  0FA4  06BF               	xorwf	___ftdiv@sign,f
  5006  0FA5  3080               	movlw	128
  5007  0FA6  00B6               	movwf	??___ftdiv
  5008  0FA7  0836               	movf	??___ftdiv,w
  5009  0FA8  05BF               	andwf	___ftdiv@sign,f
  5010  0FA9  17B4               	bsf	___ftdiv@f1+1,7
  5011  0FAA  30FF               	movlw	255
  5012  0FAB  05B3               	andwf	___ftdiv@f1,f
  5013  0FAC  30FF               	movlw	255
  5014  0FAD  05B4               	andwf	___ftdiv@f1+1,f
  5015  0FAE  3000               	movlw	0
  5016  0FAF  05B5               	andwf	___ftdiv@f1+2,f
  5017  0FB0  17B1               	bsf	___ftdiv@f2+1,7
  5018  0FB1  30FF               	movlw	255
  5019  0FB2  05B0               	andwf	___ftdiv@f2,f
  5020  0FB3  30FF               	movlw	255
  5021  0FB4  05B1               	andwf	___ftdiv@f2+1,f
  5022  0FB5  3000               	movlw	0
  5023  0FB6  05B2               	andwf	___ftdiv@f2+2,f
  5024  0FB7  3018               	movlw	24
  5025  0FB8  00B6               	movwf	??___ftdiv
  5026  0FB9  0836               	movf	??___ftdiv,w
  5027  0FBA  00BA               	movwf	___ftdiv@cntr
  5028  0FBB                     i1l1736:	
  5029  0FBB  3001               	movlw	1
  5030  0FBC                     u213_25:	
  5031  0FBC  1003               	clrc
  5032  0FBD  0DBB               	rlf	___ftdiv@f3,f
  5033  0FBE  0DBC               	rlf	___ftdiv@f3+1,f
  5034  0FBF  0DBD               	rlf	___ftdiv@f3+2,f
  5035  0FC0  3EFF               	addlw	-1
  5036  0FC1  1D03               	skipz
  5037  0FC2  2FBC               	goto	u213_25
  5038  0FC3  0832               	movf	___ftdiv@f2+2,w
  5039  0FC4  0235               	subwf	___ftdiv@f1+2,w
  5040  0FC5  1D03               	skipz
  5041  0FC6  2FCD               	goto	u214_25
  5042  0FC7  0831               	movf	___ftdiv@f2+1,w
  5043  0FC8  0234               	subwf	___ftdiv@f1+1,w
  5044  0FC9  1D03               	skipz
  5045  0FCA  2FCD               	goto	u214_25
  5046  0FCB  0830               	movf	___ftdiv@f2,w
  5047  0FCC  0233               	subwf	___ftdiv@f1,w
  5048  0FCD                     u214_25:	
  5049  0FCD  1C03               	skipc
  5050  0FCE  2FDA               	goto	i1l1744
  5051  0FCF  0830               	movf	___ftdiv@f2,w
  5052  0FD0  02B3               	subwf	___ftdiv@f1,f
  5053  0FD1  0831               	movf	___ftdiv@f2+1,w
  5054  0FD2  1C03               	skipc
  5055  0FD3  0F31               	incfsz	___ftdiv@f2+1,w
  5056  0FD4  02B4               	subwf	___ftdiv@f1+1,f
  5057  0FD5  0832               	movf	___ftdiv@f2+2,w
  5058  0FD6  1C03               	skipc
  5059  0FD7  0A32               	incf	___ftdiv@f2+2,w
  5060  0FD8  02B5               	subwf	___ftdiv@f1+2,f
  5061  0FD9  143B               	bsf	___ftdiv@f3,0
  5062  0FDA                     i1l1744:	
  5063  0FDA  3001               	movlw	1
  5064  0FDB                     u215_25:	
  5065  0FDB  1003               	clrc
  5066  0FDC  0DB3               	rlf	___ftdiv@f1,f
  5067  0FDD  0DB4               	rlf	___ftdiv@f1+1,f
  5068  0FDE  0DB5               	rlf	___ftdiv@f1+2,f
  5069  0FDF  3EFF               	addlw	-1
  5070  0FE0  1D03               	skipz
  5071  0FE1  2FDB               	goto	u215_25
  5072  0FE2  3001               	movlw	1
  5073  0FE3  02BA               	subwf	___ftdiv@cntr,f
  5074  0FE4  1D03               	btfss	3,2
  5075  0FE5  2FBB               	goto	i1l1736
  5076  0FE6  083B               	movf	___ftdiv@f3,w
  5077  0FE7  00F0               	movwf	___ftpack@arg
  5078  0FE8  083C               	movf	___ftdiv@f3+1,w
  5079  0FE9  00F1               	movwf	___ftpack@arg+1
  5080  0FEA  083D               	movf	___ftdiv@f3+2,w
  5081  0FEB  00F2               	movwf	___ftpack@arg+2
  5082  0FEC  083E               	movf	___ftdiv@exp,w
  5083  0FED  00B6               	movwf	??___ftdiv
  5084  0FEE  0836               	movf	??___ftdiv,w
  5085  0FEF  00F3               	movwf	___ftpack@exp
  5086  0FF0  083F               	movf	___ftdiv@sign,w
  5087  0FF1  00B7               	movwf	??___ftdiv+1
  5088  0FF2  0837               	movf	??___ftdiv+1,w
  5089  0FF3  00F4               	movwf	___ftpack@sign
  5090  0FF4  120A  158A  23FF   	fcall	___ftpack
  5091  0FF7  0870               	movf	?___ftpack,w
  5092  0FF8  1283               	bcf	3,5	;RP0=0, select bank0
  5093  0FF9  1303               	bcf	3,6	;RP1=0, select bank0
  5094  0FFA  00B0               	movwf	?___ftdiv
  5095  0FFB  0871               	movf	?___ftpack+1,w
  5096  0FFC  00B1               	movwf	?___ftdiv+1
  5097  0FFD  0872               	movf	?___ftpack+2,w
  5098  0FFE  00B2               	movwf	?___ftdiv+2
  5099  0FFF  0008               	return
  5100  1000                     __end_of___ftdiv:	
  5101                           
  5102                           	psect	text18
  5103  0ABE                     __ptext18:	
  5104 ;; *************** function ___lwtoft *****************
  5105 ;; Defined at:
  5106 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;  c               2    8[COMMON] unsigned int 
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  3    8[COMMON] float 
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, status,0, pclath, cstack
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5120 ;;      Params:         3       0       0       0       0
  5121 ;;      Locals:         0       0       0       0       0
  5122 ;;      Temps:          1       0       0       0       0
  5123 ;;      Totals:         4       0       0       0       0
  5124 ;;Total ram usage:        4 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    1
  5127 ;; This function calls:
  5128 ;;		___ftpack
  5129 ;; This function is called by:
  5130 ;;		_ISR
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           
  5135                           ;psect for function ___lwtoft
  5136  0ABE                     ___lwtoft:	
  5137                           
  5138                           ;incstack = 0
  5139                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5140  0ABE  0878               	movf	___lwtoft@c,w
  5141  0ABF  00F0               	movwf	___ftpack@arg
  5142  0AC0  0879               	movf	___lwtoft@c+1,w
  5143  0AC1  00F1               	movwf	___ftpack@arg+1
  5144  0AC2  01F2               	clrf	___ftpack@arg+2
  5145  0AC3  308E               	movlw	142
  5146  0AC4  00FB               	movwf	??___lwtoft
  5147  0AC5  087B               	movf	??___lwtoft,w
  5148  0AC6  00F3               	movwf	___ftpack@exp
  5149  0AC7  01F4               	clrf	___ftpack@sign
  5150  0AC8  120A  158A  23FF   	fcall	___ftpack
  5151  0ACB  0870               	movf	?___ftpack,w
  5152  0ACC  00F8               	movwf	?___lwtoft
  5153  0ACD  0871               	movf	?___ftpack+1,w
  5154  0ACE  00F9               	movwf	?___lwtoft+1
  5155  0ACF  0872               	movf	?___ftpack+2,w
  5156  0AD0  00FA               	movwf	?___lwtoft+2
  5157  0AD1  0008               	return
  5158  0AD2                     __end_of___lwtoft:	
  5159                           
  5160                           	psect	text19
  5161  0BFF                     __ptext19:	
  5162 ;; *************** function ___ftpack *****************
  5163 ;; Defined at:
  5164 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5165 ;; Parameters:    Size  Location     Type
  5166 ;;  arg             3    0[COMMON] unsigned um
  5167 ;;  exp             1    3[COMMON] unsigned char 
  5168 ;;  sign            1    4[COMMON] unsigned char 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;		None
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  3    0[COMMON] float 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2, status,0
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5180 ;;      Params:         5       0       0       0       0
  5181 ;;      Locals:         0       0       0       0       0
  5182 ;;      Temps:          3       0       0       0       0
  5183 ;;      Totals:         8       0       0       0       0
  5184 ;;Total ram usage:        8 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; This function calls:
  5187 ;;		Nothing
  5188 ;; This function is called by:
  5189 ;;		___altoft
  5190 ;;		___ftadd
  5191 ;;		___ftdiv
  5192 ;;		___ftmul
  5193 ;;		___lwtoft
  5194 ;; This function uses a non-reentrant model
  5195 ;;
  5196                           
  5197                           
  5198                           ;psect for function ___ftpack
  5199  0BFF                     ___ftpack:	
  5200                           
  5201                           ;incstack = 0
  5202                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5203  0BFF  0873               	movf	___ftpack@exp,w
  5204  0C00  1903               	btfsc	3,2
  5205  0C01  2C07               	goto	i1l1402
  5206  0C02  0872               	movf	___ftpack@arg+2,w
  5207  0C03  0471               	iorwf	___ftpack@arg+1,w
  5208  0C04  0470               	iorwf	___ftpack@arg,w
  5209  0C05  1D03               	skipz
  5210  0C06  2C1A               	goto	i1l1408
  5211  0C07                     i1l1402:	
  5212  0C07  3000               	movlw	0
  5213  0C08  00F0               	movwf	?___ftpack
  5214  0C09  3000               	movlw	0
  5215  0C0A  00F1               	movwf	?___ftpack+1
  5216  0C0B  3000               	movlw	0
  5217  0C0C  00F2               	movwf	?___ftpack+2
  5218  0C0D  0008               	return
  5219  0C0E                     i1l1406:	
  5220  0C0E  3001               	movlw	1
  5221  0C0F  00F5               	movwf	??___ftpack
  5222  0C10  0875               	movf	??___ftpack,w
  5223  0C11  07F3               	addwf	___ftpack@exp,f
  5224  0C12  3001               	movlw	1
  5225  0C13                     u128_25:	
  5226  0C13  1003               	clrc
  5227  0C14  0CF2               	rrf	___ftpack@arg+2,f
  5228  0C15  0CF1               	rrf	___ftpack@arg+1,f
  5229  0C16  0CF0               	rrf	___ftpack@arg,f
  5230  0C17  3EFF               	addlw	-1
  5231  0C18  1D03               	skipz
  5232  0C19  2C13               	goto	u128_25
  5233  0C1A                     i1l1408:	
  5234  0C1A  30FE               	movlw	254
  5235  0C1B  0572               	andwf	___ftpack@arg+2,w
  5236  0C1C  1903               	btfsc	3,2
  5237  0C1D  2C35               	goto	i1l407
  5238  0C1E  2C0E               	goto	i1l1406
  5239  0C1F                     i1l1410:	
  5240  0C1F  3001               	movlw	1
  5241  0C20  00F5               	movwf	??___ftpack
  5242  0C21  0875               	movf	??___ftpack,w
  5243  0C22  07F3               	addwf	___ftpack@exp,f
  5244  0C23  3001               	movlw	1
  5245  0C24  07F0               	addwf	___ftpack@arg,f
  5246  0C25  3000               	movlw	0
  5247  0C26  1803               	skipnc
  5248  0C27  3001               	movlw	1
  5249  0C28  07F1               	addwf	___ftpack@arg+1,f
  5250  0C29  3000               	movlw	0
  5251  0C2A  1803               	skipnc
  5252  0C2B  3001               	movlw	1
  5253  0C2C  07F2               	addwf	___ftpack@arg+2,f
  5254  0C2D  3001               	movlw	1
  5255  0C2E                     u130_25:	
  5256  0C2E  1003               	clrc
  5257  0C2F  0CF2               	rrf	___ftpack@arg+2,f
  5258  0C30  0CF1               	rrf	___ftpack@arg+1,f
  5259  0C31  0CF0               	rrf	___ftpack@arg,f
  5260  0C32  3EFF               	addlw	-1
  5261  0C33  1D03               	skipz
  5262  0C34  2C2E               	goto	u130_25
  5263  0C35                     i1l407:	
  5264  0C35  30FF               	movlw	255
  5265  0C36  0572               	andwf	___ftpack@arg+2,w
  5266  0C37  1903               	btfsc	3,2
  5267  0C38  2C44               	goto	i1l1418
  5268  0C39  2C1F               	goto	i1l1410
  5269  0C3A                     i1l1416:	
  5270  0C3A  3001               	movlw	1
  5271  0C3B  02F3               	subwf	___ftpack@exp,f
  5272  0C3C  3001               	movlw	1
  5273  0C3D                     u132_25:	
  5274  0C3D  1003               	clrc
  5275  0C3E  0DF0               	rlf	___ftpack@arg,f
  5276  0C3F  0DF1               	rlf	___ftpack@arg+1,f
  5277  0C40  0DF2               	rlf	___ftpack@arg+2,f
  5278  0C41  3EFF               	addlw	-1
  5279  0C42  1D03               	skipz
  5280  0C43  2C3D               	goto	u132_25
  5281  0C44                     i1l1418:	
  5282  0C44  1BF1               	btfsc	___ftpack@arg+1,7
  5283  0C45  2C4A               	goto	i1l414
  5284  0C46  3002               	movlw	2
  5285  0C47  0273               	subwf	___ftpack@exp,w
  5286  0C48  1803               	skipnc
  5287  0C49  2C3A               	goto	i1l1416
  5288  0C4A                     i1l414:	
  5289  0C4A  1873               	btfsc	___ftpack@exp,0
  5290  0C4B  2C52               	goto	i1l415
  5291  0C4C  30FF               	movlw	255
  5292  0C4D  05F0               	andwf	___ftpack@arg,f
  5293  0C4E  307F               	movlw	127
  5294  0C4F  05F1               	andwf	___ftpack@arg+1,f
  5295  0C50  30FF               	movlw	255
  5296  0C51  05F2               	andwf	___ftpack@arg+2,f
  5297  0C52                     i1l415:	
  5298  0C52  1003               	clrc
  5299  0C53  0CF3               	rrf	___ftpack@exp,f
  5300  0C54  0873               	movf	___ftpack@exp,w
  5301  0C55  00F5               	movwf	??___ftpack
  5302  0C56  01F6               	clrf	??___ftpack+1
  5303  0C57  01F7               	clrf	??___ftpack+2
  5304  0C58  3010               	movlw	16
  5305  0C59                     u136_25:	
  5306  0C59  1003               	clrc
  5307  0C5A  0DF5               	rlf	??___ftpack,f
  5308  0C5B  0DF6               	rlf	??___ftpack+1,f
  5309  0C5C  0DF7               	rlf	??___ftpack+2,f
  5310  0C5D  3EFF               	addlw	-1
  5311  0C5E  1D03               	skipz
  5312  0C5F  2C59               	goto	u136_25
  5313  0C60  0875               	movf	??___ftpack,w
  5314  0C61  04F0               	iorwf	___ftpack@arg,f
  5315  0C62  0876               	movf	??___ftpack+1,w
  5316  0C63  04F1               	iorwf	___ftpack@arg+1,f
  5317  0C64  0877               	movf	??___ftpack+2,w
  5318  0C65  04F2               	iorwf	___ftpack@arg+2,f
  5319  0C66  0874               	movf	___ftpack@sign,w
  5320  0C67  1903               	btfsc	3,2
  5321  0C68  0008               	return
  5322  0C69  17F2               	bsf	___ftpack@arg+2,7
  5323  0C6A  0008               	return
  5324  0C6B                     __end_of___ftpack:	
  5325                           
  5326                           	psect	text20
  5327  0B06                     __ptext20:	
  5328 ;; *************** function _USART_ReceiveChar *****************
  5329 ;; Defined at:
  5330 ;;		line 85 in file "main.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  USARTData       1    4[COMMON] unsigned char 
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      unsigned char 
  5337 ;; Registers used:
  5338 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5344 ;;      Params:         0       0       0       0       0
  5345 ;;      Locals:         1       0       0       0       0
  5346 ;;      Temps:          1       0       0       0       0
  5347 ;;      Totals:         2       0       0       0       0
  5348 ;;Total ram usage:        2 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    2
  5351 ;; This function calls:
  5352 ;;		_USART_WriteString
  5353 ;; This function is called by:
  5354 ;;		_ISR
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           
  5359                           ;psect for function _USART_ReceiveChar
  5360  0B06                     _USART_ReceiveChar:	
  5361                           
  5362                           ;main.c: 86: unsigned char USARTData;
  5363                           ;main.c: 88: _delay((unsigned long)((75)*(20000000/4000000.0)));
  5364                           
  5365                           ;incstack = 0
  5366                           ; Regs used in _USART_ReceiveChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5367  0B06  307C               	movlw	124
  5368  0B07  00F3               	movwf	??_USART_ReceiveChar
  5369  0B08                     u264_27:	
  5370  0B08  0BF3               	decfsz	??_USART_ReceiveChar,f
  5371  0B09  2B08               	goto	u264_27
  5372  0B0A  2B0B               	nop2
  5373                           
  5374                           ;main.c: 90: if (!OERR)
  5375  0B0B  1283               	bcf	3,5	;RP0=0, select bank0
  5376  0B0C  1303               	bcf	3,6	;RP1=0, select bank0
  5377  0B0D  1898               	btfsc	24,1	;volatile
  5378  0B0E  2B14               	goto	i1l1860
  5379                           
  5380                           ;main.c: 91: {
  5381                           ;main.c: 92: USARTData = RCREG;
  5382  0B0F  081A               	movf	26,w	;volatile
  5383  0B10  00F3               	movwf	??_USART_ReceiveChar
  5384  0B11  0873               	movf	??_USART_ReceiveChar,w
  5385  0B12  00F4               	movwf	USART_ReceiveChar@USARTData
  5386  0B13  2B20               	goto	i1l1868
  5387  0B14                     i1l1860:	
  5388                           ;main.c: 94: } else {
  5389                           
  5390                           ;main.c: 93: PIR1bits.RCIF = 0;
  5391                           
  5392                           
  5393                           ;main.c: 95: USART_WriteString("\n\r ------- ESTOURO DE PILHA ------- \n\r ");
  5394  0B14  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  5395  0B15  120A  158A  22EA   	fcall	_USART_WriteString
  5396                           
  5397                           ;main.c: 97: RCSTAbits.CREN = 0;
  5398  0B18  1283               	bcf	3,5	;RP0=0, select bank0
  5399  0B19  1303               	bcf	3,6	;RP1=0, select bank0
  5400  0B1A  1218               	bcf	24,4	;volatile
  5401                           
  5402                           ;main.c: 98: USARTData = RCREG;
  5403  0B1B  081A               	movf	26,w	;volatile
  5404  0B1C  00F3               	movwf	??_USART_ReceiveChar
  5405  0B1D  0873               	movf	??_USART_ReceiveChar,w
  5406  0B1E  00F4               	movwf	USART_ReceiveChar@USARTData
  5407                           
  5408                           ;main.c: 99: RCSTAbits.CREN = 1;
  5409  0B1F  1618               	bsf	24,4	;volatile
  5410  0B20                     i1l1868:	
  5411                           
  5412                           ;main.c: 100: PIR1bits.RCIF = 0;
  5413  0B20  128C               	bcf	12,5	;volatile
  5414                           
  5415                           ;main.c: 101: }
  5416                           ;main.c: 103: return (USARTData);
  5417  0B21  0874               	movf	USART_ReceiveChar@USARTData,w
  5418  0B22  0008               	return
  5419  0B23                     __end_of_USART_ReceiveChar:	
  5420                           
  5421                           	psect	text21
  5422  0AEA                     __ptext21:	
  5423 ;; *************** function _USART_WriteString *****************
  5424 ;; Defined at:
  5425 ;;		line 75 in file "main.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  str             1    wreg     PTR const unsigned char 
  5428 ;;		 -> STR_8(10), STR_7(10), STR_6(9), STR_5(9), 
  5429 ;;		 -> STR_4(9), STR_3(8), STR_2(8), STR_1(40), 
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;  str             1    2[COMMON] PTR const unsigned char 
  5432 ;;		 -> STR_8(10), STR_7(10), STR_6(9), STR_5(9), 
  5433 ;;		 -> STR_4(9), STR_3(8), STR_2(8), STR_1(40), 
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  1    wreg      void 
  5436 ;; Registers used:
  5437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5443 ;;      Params:         0       0       0       0       0
  5444 ;;      Locals:         1       0       0       0       0
  5445 ;;      Temps:          1       0       0       0       0
  5446 ;;      Totals:         2       0       0       0       0
  5447 ;;Total ram usage:        2 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    1
  5450 ;; This function calls:
  5451 ;;		_USART_WriteChar
  5452 ;; This function is called by:
  5453 ;;		_USART_ReceiveChar
  5454 ;;		_ISR
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           
  5459                           ;psect for function _USART_WriteString
  5460  0AEA                     _USART_WriteString:	
  5461                           
  5462                           ;incstack = 0
  5463                           ; Regs used in _USART_WriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5464                           ;USART_WriteString@str stored from wreg
  5465  0AEA  00F2               	movwf	USART_WriteString@str
  5466  0AEB                     i1l1668:	
  5467                           ;main.c: 77: while (*str != '\0') {
  5468                           
  5469  0AEB  0872               	movf	USART_WriteString@str,w
  5470  0AEC  0084               	movwf	4
  5471  0AED  120A  158A  2000  120A  158A  	fcall	stringdir
  5472  0AF2  3A00               	xorlw	0
  5473  0AF3  1903               	btfsc	3,2
  5474  0AF4  0008               	return
  5475                           
  5476                           ;main.c: 79: USART_WriteChar(*str);
  5477  0AF5  0872               	movf	USART_WriteString@str,w
  5478  0AF6  0084               	movwf	4
  5479  0AF7  120A  158A  2000  120A  158A  	fcall	stringdir
  5480  0AFC  120A  158A  2282  120A  158A  	fcall	_USART_WriteChar
  5481                           
  5482                           ;main.c: 80: str++;
  5483  0B01  3001               	movlw	1
  5484  0B02  00F1               	movwf	??_USART_WriteString
  5485  0B03  0871               	movf	??_USART_WriteString,w
  5486  0B04  07F2               	addwf	USART_WriteString@str,f
  5487  0B05  2AEB               	goto	i1l1668
  5488  0B06                     __end_of_USART_WriteString:	
  5489                           
  5490                           	psect	text22
  5491  0A82                     __ptext22:	
  5492 ;; *************** function _USART_WriteChar *****************
  5493 ;; Defined at:
  5494 ;;		line 69 in file "main.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  USARTData       1    wreg     unsigned char 
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;  USARTData       1    0[COMMON] unsigned char 
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  1    wreg      void 
  5501 ;; Registers used:
  5502 ;;		wreg
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5508 ;;      Params:         0       0       0       0       0
  5509 ;;      Locals:         1       0       0       0       0
  5510 ;;      Temps:          0       0       0       0       0
  5511 ;;      Totals:         1       0       0       0       0
  5512 ;;Total ram usage:        1 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_USART_WriteString
  5518 ;;		_ISR
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           
  5523                           ;psect for function _USART_WriteChar
  5524  0A82                     _USART_WriteChar:	
  5525                           
  5526                           ;incstack = 0
  5527                           ; Regs used in _USART_WriteChar: [wreg]
  5528                           ;USART_WriteChar@USARTData stored from wreg
  5529  0A82  00F0               	movwf	USART_WriteChar@USARTData
  5530  0A83                     i1l86:	
  5531                           ;main.c: 70: while (!PIR1bits.TXIF);
  5532                           
  5533  0A83  1283               	bcf	3,5	;RP0=0, select bank0
  5534  0A84  1303               	bcf	3,6	;RP1=0, select bank0
  5535  0A85  1E0C               	btfss	12,4	;volatile
  5536  0A86  2A83               	goto	i1l86
  5537                           
  5538                           ;main.c: 71: TXREG = USARTData;
  5539  0A87  0870               	movf	USART_WriteChar@USARTData,w
  5540  0A88  0099               	movwf	25	;volatile
  5541  0A89  0008               	return
  5542  0A8A                     __end_of_USART_WriteChar:	
  5543                           
  5544                           	psect	text23
  5545  0AD2                     __ptext23:	
  5546 ;; *************** function _ADC_Read *****************
  5547 ;; Defined at:
  5548 ;;		line 126 in file "main.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  channel         2    0[COMMON] unsigned short 
  5551 ;; Auto vars:     Size  Location     Type
  5552 ;;		None
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  1    wreg      void 
  5555 ;; Registers used:
  5556 ;;		wreg, status,2, status,0
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5562 ;;      Params:         2       0       0       0       0
  5563 ;;      Locals:         0       0       0       0       0
  5564 ;;      Temps:          1       0       0       0       0
  5565 ;;      Totals:         3       0       0       0       0
  5566 ;;Total ram usage:        3 bytes
  5567 ;; Hardware stack levels used:    1
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_ISR
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function _ADC_Read
  5577  0AD2                     _ADC_Read:	
  5578                           
  5579                           ;main.c: 127: ADCON0bits.CHS = channel;
  5580                           
  5581                           ;incstack = 0
  5582                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  5583  0AD2  0870               	movf	ADC_Read@channel,w
  5584  0AD3  00F2               	movwf	??_ADC_Read
  5585  0AD4  0DF2               	rlf	??_ADC_Read,f
  5586  0AD5  0DF2               	rlf	??_ADC_Read,f
  5587  0AD6  0DF2               	rlf	??_ADC_Read,f
  5588  0AD7  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0AD8  1303               	bcf	3,6	;RP1=0, select bank0
  5590  0AD9  081F               	movf	31,w	;volatile
  5591  0ADA  0672               	xorwf	??_ADC_Read,w
  5592  0ADB  39C7               	andlw	-57
  5593  0ADC  0672               	xorwf	??_ADC_Read,w
  5594  0ADD  009F               	movwf	31	;volatile
  5595                           
  5596                           ;main.c: 128: ADCON0bits.ADON = 1;
  5597  0ADE  141F               	bsf	31,0	;volatile
  5598                           
  5599                           ;main.c: 130: _delay((unsigned long)((25)*(20000000/4000000.0)));
  5600  0ADF  3029               	movlw	41
  5601  0AE0  00F2               	movwf	??_ADC_Read
  5602  0AE1                     u265_27:	
  5603  0AE1  0BF2               	decfsz	??_ADC_Read,f
  5604  0AE2  2AE1               	goto	u265_27
  5605  0AE3  0000               	nop
  5606                           
  5607                           ;main.c: 132: ADCON0bits.GO = 1;
  5608  0AE4  1283               	bcf	3,5	;RP0=0, select bank0
  5609  0AE5  1303               	bcf	3,6	;RP1=0, select bank0
  5610  0AE6  151F               	bsf	31,2	;volatile
  5611  0AE7                     i1l106:	
  5612                           ;main.c: 133: while (ADCON0bits.GO_DONE);
  5613                           
  5614  0AE7  1D1F               	btfss	31,2	;volatile
  5615  0AE8  0008               	return
  5616  0AE9  2AE7               	goto	i1l106
  5617  0AEA                     __end_of_ADC_Read:	
  5618  007E                     btemp	set	126	;btemp
  5619  007E                     wtemp0	set	126


Data Sizes:
    Strings     103
    Constant    27
    Data        0
    BSS         25
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     77      79
    BANK1            80     31      54
    BANK3            96     22      22
    BANK2            96      0       0

Pointer List with Targets:

    Display	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(1) Largest target is 15
		 -> sin@coeff_a(CODE[15]), sin@coeff_b(CODE[12]), 

    USART_WriteString@str	PTR const unsigned char  size(1) Largest target is 40
		 -> STR_8(CODE[10]), STR_7(CODE[10]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), STR_3(CODE[8]), STR_2(CODE[8]), STR_1(CODE[40]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _floor->___altoft
    ___ftmul->___lwtoft
    ___ftadd->___lwtoft
    ___ftdiv->___lwtoft
    ___lwtoft->___ftpack
    _USART_ReceiveChar->_USART_WriteString
    _USART_WriteString->_USART_WriteChar

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sin
    _sin->___ftsub
    _floor->___altoft
    ___fttol->___ftdiv
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->_floor
    ___ftadd->___ftdiv
    ___ftdiv->___ftmul

Critical Paths under _main in BANK1

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _ISR in BANK1

    _ISR->_sin

Critical Paths under _main in BANK3

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1102
                           _ADC_Init
                         _USART_Init
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          12     6      6    1102
                                             27 BANK1      4     4      0
                                             14 BANK3      8     2      6
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     753
                                             26 BANK1      1     1      0
                                              0 BANK3     14     6      8
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 22    22      0   45208
                                             71 BANK0      6     6      0
                                             10 BANK1     16    16      0
                           _ADC_Read
                  _USART_ReceiveChar
                    _USART_WriteChar
                  _USART_WriteString
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _sin
 ---------------------------------------------------------------------------------
 (4) _sin                                                 14    11      3   31547
                                             67 BANK0      4     1      3
                                              0 BANK1     10    10      0
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (5) _floor                                                9     6      3    7937
                                             52 BANK0      9     6      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                6     2      4     336
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             32 BANK0     14    10      4
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftge                                              12     6      6     878
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (6) ___altoft                                             8     4      4    2311
                                             12 COMMON     2     2      0
                                             46 BANK0      6     2      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (5) _eval_poly                                           10     4      6    7916
                                             12 COMMON     1     1      0
                                             45 BANK0      9     3      6
                             ___bmul
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6    3459
                                              0 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     178
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) ___ftsub                                              6     0      6    4040
                                             61 BANK0      6     0      6
                            ___ftadd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftadd                                             13     7      6    3717
                                             32 BANK0     13     7      6
                             ___bmul (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftneg                                              3     0      3     288
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             16    10      6    2773
                                             16 BANK0     16    10      6
                             ___bmul (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2259
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2109
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _USART_ReceiveChar                                    2     2      0     331
                                              3 COMMON     2     2      0
                  _USART_WriteString
 ---------------------------------------------------------------------------------
 (4) _USART_WriteString                                    2     2      0     307
                                              1 COMMON     2     2      0
                    _USART_WriteChar
 ---------------------------------------------------------------------------------
 (5) _USART_WriteChar                                      1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             3     1      2      86
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _USART_Init
     ___aldiv

 _ISR (ROOT)
   _ADC_Read
   _USART_ReceiveChar
     _USART_WriteString
       _USART_WriteChar
   _USART_WriteChar
   _USART_WriteString
     _USART_WriteChar
   ___ftadd
     ___bmul (ARG)
     ___ftdiv (ARG)
       ___bmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftdiv
     ___bmul (ARG)
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___bmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
   ___lwtoft
     ___ftpack
   _sin
     ___ftadd
       ___bmul (ARG)
       ___ftdiv (ARG)
         ___bmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftdiv
       ___bmul (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftneg
     ___ftsub
       ___ftadd
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___bmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       _floor (ARG)
         ___altoft
           ___ftpack
           ___fttol (ARG)
             ___ftdiv (ARG)
               ___bmul (ARG)
               ___ftmul (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
         ___ftadd
           ___bmul (ARG)
           ___ftdiv (ARG)
             ___bmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___fttol
           ___ftdiv (ARG)
             ___bmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
         _frexp
     _eval_poly
       ___bmul
       ___ftadd
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___bmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftdiv (ARG)
         ___bmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
     _floor
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___ftdiv (ARG)
             ___bmul (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
       ___ftadd
         ___bmul (ARG)
         ___ftdiv (ARG)
           ___bmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftge
       ___fttol
         ___ftdiv (ARG)
           ___bmul (ARG)
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1F      36       7       67.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60     16      16       9       22.9%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      A9      12        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Aug 31 16:11:10 2017

              ___altoft@exp 0052                           _a 00CF                           _c 00CD  
                         pc 0002              ___bmul@product 0072                 __CFG_CP$OFF 0000  
             ___altoft@sign 0053                          _fs 00D4                          fsr 0004  
              ___ftadd@exp1 004C                ___ftadd@exp2 004B                ___ftadd@sign 004A  
                       l301 0EB7                         l159 0BBC                         _RB4 0034  
              __CFG_CPD$OFF 0000                         _ISR 0022                         _sin 03DB  
                       fsr0 0004  __size_of_USART_WriteString 001C                         indf 0000  
              __CFG_FOSC$HS 0000                __CFG_LVP$OFF 0000                        ?_ISR 0070  
              ___ftdiv@cntr 003A                ___ftdiv@sign 003F                        l2130 0F31  
                      l2116 0EDC                        l2108 0ECC                        l2134 0F3F  
                      l2126 0F24                        l2118 0EF4                        l2146 0E33  
                      ?_sin 0063                        STR_1 0821                        STR_2 0878  
                      STR_3 0880                        STR_4 085D                        STR_5 0866  
                      STR_6 086F                        STR_7 0849                        STR_8 0853  
                      u2545 0EE2                        u2625 0E2A                        u2635 0E4C  
                      u2565 0EF8                        u2575 0F13                        u2585 0F25  
                      i1l86 0A83                        _OERR 00C1                        _TMR1 000E  
                      _main 0B7E                        _freq 00D2                ___ftpack@arg 0070  
              ___ftpack@exp 0073                        btemp 007E            __end_of_ADC_Init 0ABE  
          __end_of_ADC_Read 0AEA                        sin@f 0063                        sin@y 00A0  
                      start 0012           ___bmul@multiplier 0073                ___ftmul@cntr 002E  
              ___ftmul@sign 002F     __end_of_USART_WriteChar 0A8A                       ??_ISR 0067  
              ___fttol@exp1 004D                ___fttol@lval 0049                       ??_sin 0066  
           __end_of___aldiv 0F48                       ?_main 0070             __end_of___ftadd 06CB  
             __CFG_WDTE$OFF 0000             __end_of___ftdiv 1000             __end_of___ftneg 0A92  
           __end_of___ftmul 079E             __end_of___ftsub 0B44             __end_of___fttol 0D72  
                     i1l112 0135                       i1l106 0AE7                       i1l115 002D  
                     i1l134 0118                       i1l118 009B                       i1l156 03D0  
                     i1l414 0C4A                       i1l415 0C52                       i1l407 0C35  
                     i1l613 04E0                       i1l438 066A                       i1l498 0D58  
                     _RCREG 001A                       _SPBRG 0099                       _PORTA 0005  
                     _PORTB 0006                       _PORTC 0007                       _PORTD 0008  
                     _PORTE 0009                       _TRISA 0085                       _TRISB 0086  
                     _TRISC 0087                       _TRISD 0088                       _TRISE 0089  
        __end_ofsin@coeff_a 0815          __end_ofsin@coeff_b 0821                       _TXREG 0019  
             __CFG_PWRTE$ON 0000                USART_Init@BR 01A4                       _floor 0D72  
                     _frexp 0B44                       _errno 00C7               ___ftpack@sign 0074  
                     _tempo 00C4              __CFG_BOREN$OFF 0000                       pclath 000A  
                     sin@x2 00A6                       status 0003                       wtemp0 007E  
               ?_USART_Init 019E             __initialization 0015                __end_of_main 0BBD  
                    ??_main 00BF               ___fttol@sign1 0048    USART_WriteChar@USARTData 0070  
                    ISR@low 00B6                      ?_floor 0054                      ?_frexp 0070  
          __end_of___altoft 0BFF                      _ADRESH 001E                      _ADRESL 009E  
          __end_of___ftpack 0C6B                      i1l2030 030D                      i1l2022 02F1  
                    i1l2014 02C3                      i1l1410 0C1F                      i1l1402 0C07  
                    i1l2050 0366                      i1l2026 0308                      i1l2018 02DA  
                    i1l1500 063C                      i1l2036 0328                      i1l1406 0C0E  
                    i1l1510 065A                      i1l1502 0641                      i1l2062 0382  
                    i1l2046 0357                      i1l1416 0C3A                      i1l1408 0C1A  
                    i1l1520 068E                      i1l1512 0666                      i1l1504 0645  
                    i1l1440 0AA2                      i1l2080 03CD                      i1l2072 0398  
                    i1l2048 035E                      i1l2056 0374                      i1l1418 0C44  
                    i1l1530 06B1                      i1l1610 0CFE                      i1l2066 0389  
                    i1l1516 067C                      i1l1436 0A9C                      i1l1460 0BE5  
                    i1l1470 05EB                      i1l1542 07EC                      i1l1630 0D40  
                    i1l2078 03C5                      i1l1480 0601                      i1l1560 06E3  
                    i1l1722 0F76                      i1l1474 05F2                      i1l1802 0CDD  
                    i1l1458 0BD3                      i1l1538 07C5                      i1l1642 0D69  
                    i1l1716 0F60                      i1l1492 061B                      i1l1636 0D4D  
                    i1l1628 0D30                      i1l1652 0B50                      i1l1590 0760  
                    i1l1582 0748                      i1l1566 06F9                      i1l1638 0D5B  
                    i1l1744 0FDA                      i1l1736 0FBB                      i1l1904 04A3  
                    i1l1498 0630                      i1l1594 0770                      i1l1578 0738  
                    i1l1930 003E                      i1l1668 0AEB                      i1l1860 0B14  
                    i1l1764 0B2C                      i1l1932 0048                      u130_25 0C2E  
                    i1l1782 0DAC                      i1l1950 00AE                      i1l1934 0052  
                    i1l1942 0086                      i1l1792 0E02                      i1l1936 0067  
                    i1l1928 0034                      i1l1778 0DA3                      i1l1970 00EF  
                    i1l1962 00D5                      i1l1954 00BB                      i1l1946 00A1  
                    i1l1868 0B20                      i1l1892 040C                      u211_25 0F88  
                    i1l1966 00E2                      i1l1958 00C8                      i1l1976 00FC  
                    i1l1984 0126                      u132_25 0C3D                      u212_25 0F9A  
                    u213_25 0FBC                      u214_25 0FCD                      u142_25 0BD8  
                    u231_20 049B                      u215_25 0FDB                      u232_20 049C  
                    u136_25 0C59                      u128_25 0C13                      u153_25 061C  
                    u162_25 065B                      u250_25 03BE                      u171_21 07DF  
                    u171_22 07E0                      u171_23 07E5                      u171_24 07E6  
                    u156_25 0631                      u180_25 0751                      u245_25 0344  
                    u159_25 0646                      u175_25 0705                      u191_25 0D31  
                    u184_25 0771                      u176_25 0717                      u264_27 0B08  
                    u169_21 07B8                      u169_22 07B9                      u169_23 07BE  
                    u169_24 07BF                      u185_25 0779                      u265_27 0AE1  
          __end_of___lwtoft 0AD2                      u194_25 0D4F                      u179_25 0749  
                    u188_25 0D05                      ___bmul 0A9A                      ___ftge 079E  
                 ??___aldiv 00BA                   ??___ftadd 0046            ?_USART_WriteChar 0070  
                 ??___ftdiv 0036                   ??___ftneg 0073                   ??___ftmul 0026  
                 ??___ftsub 007E                   ??___fttol 0044             ADC_Read@channel 0070  
                    floor@i 0058                      floor@x 0054       ___ftmul@f3_as_product 002B  
                    sin@sgn 00A9                   ?_ADC_Init 0070                   ?_ADC_Read 0070  
                    saved_w 007E         __size_of_USART_Init 009A     __end_of__initialization 001E  
                ___altoft@c 004E                  ___ftadd@f1 0040                  ___ftadd@f2 0043  
                ___ftge@ff1 0070                  ___ftge@ff2 0073                eval_poly@res 0053  
                ___ftdiv@f1 0033                  ___ftdiv@f2 0030                  ___ftdiv@f3 003B  
                ___ftneg@f1 0070         ___bmul@multiplicand 0070                  ___ftmul@f1 0020  
                ___ftmul@f2 0023                  ___ftsub@f1 0060                  ___ftsub@f2 005D  
                ___fttol@f1 0040              __pcstackCOMMON 0070               __end_of_floor 0E0B  
             __end_of_frexp 0B7E                  ___lwtoft@c 0078                  ??_ADC_Init 00BA  
                ??_ADC_Read 0072                     ??_floor 0057                     ??_frexp 0074  
                __pbssBANK0 006D                  __pbssBANK1 00BF          __size_of_eval_poly 0079  
                   ISR@high 00B7                  __pmaintext 0B7E                     ?___bmul 0070  
                   ?___ftge 0070                  __pintentry 0004                   ?___altoft 004E  
                 ?___ftpack 0070                   ?___lwtoft 0078                     _ISR$886 00AA  
                   _ISR$887 00AD                     _ISR$888 00B0                  __stringtab 0800  
                   _Display 006E                   _ADCResult 00CB                ??_USART_Init 00BB  
                   ___aldiv 0EA5             __size_of___bmul 0011             __size_of___ftge 005D  
                   ___ftadd 05C2                     ___ftdiv 0F48                     ___ftneg 0A8A  
                   ___ftmul 06CB                     ___ftsub 0B23                     ___fttol 0CE4  
                ??___altoft 007C                  ??___ftpack 0075           __end_of_eval_poly 0CE4  
                   __ptext1 0E0B                     __ptext2 0EA5                     __ptext3 0AAB  
                   __ptext4 0022                     __ptext5 03DB                     __ptext6 0D72  
                   __ptext7 0B44                     __ptext8 0CE4                     __ptext9 079E  
            USART_Init@Mode 01A2                     _sin$889 00A3                  ??___lwtoft 007B  
              __size_of_ISR 03B9                   _T1CONbits 0010                __size_of_sin 01E7  
          ___aldiv@dividend 0194          __end_of_USART_Init 0EA5                     clrloop0 0A93  
      end_of_initialization 001E                   _RCSTAbits 0018            ___aldiv@quotient 019A  
         __size_of_ADC_Init 0013           __size_of_ADC_Read 0018                 ___ftdiv@exp 003E  
                 _TXSTAbits 0098                 ___ftmul@exp 002A              __end_of___bmul 0AAB  
            __end_of___ftge 07FB                  floor@expon 005B    __size_of_USART_WriteChar 0008  
       start_initialization 0015                  eval_poly@d 0050                  eval_poly@n 0051  
                eval_poly@x 004D                 __end_of_ISR 03DB                 __end_of_sin 05C2  
                frexp@value 0070           _USART_ReceiveChar 0B06                    ??___bmul 0071  
                  ??___ftge 0076          ?_USART_ReceiveChar 0070         ??_USART_ReceiveChar 0073  
         __size_of___altoft 0042           __size_of___ftpack 006C                   ___latbits 0002  
         __size_of___lwtoft 0014               __pcstackBANK0 0020               __pcstackBANK1 00A0  
             __pcstackBANK3 0190                  ISR@amostra 00B3                  ISR@inteiro 00B8  
                sin@coeff_a 0806                  sin@coeff_b 0815   __end_of_USART_ReceiveChar 0B23  
                  ?___aldiv 0190                    ?___ftadd 0040                    ?___ftdiv 0030  
                  ?___ftneg 0070                    ?___ftmul 0020                    ?___ftsub 005D  
                  ?___fttol 0040                   __pstrings 0800          USART_Init@BaudRate 019E  
                 _contagens 00C9                   _eval_poly 0C6B                    _ADC_Init 0AAB  
                  _ADC_Read 0AD2              __size_of_floor 0099              __size_of_frexp 003A  
         ??_USART_WriteChar 0070             ___aldiv@divisor 0190           interrupt_function 0004  
           ___aldiv@counter 0198                   clear_ram0 0A92                    _PIE1bits 008C  
                  _PIR1bits 000C                   _simulacao 00D1                  _ADCON0bits 001F  
               __stringbase 0805                  _ADCON1bits 009F                  ?_eval_poly 004D  
                  _Display1 00BF  __size_of_USART_ReceiveChar 001D                   frexp@eptr 0073  
          __size_of___aldiv 00A3            __size_of___ftadd 0109            __size_of___ftdiv 00B8  
          __size_of___ftneg 0008                    ___altoft 0BBD            __size_of___ftmul 00D3  
          __size_of___ftsub 0021            __size_of___fttol 008E                    ___ftpack 0BFF  
        __end_of__stringtab 0806                    ___lwtoft 0ABE           _USART_WriteString 0AEA  
                  __ptext10 0BBD                    __ptext11 0C6B                    __ptext20 0B06  
                  __ptext12 06CB                    __ptext21 0AEA                    __ptext13 0A9A  
                  __ptext22 0A82                    __ptext14 0B23                    __ptext23 0AD2  
                  __ptext15 05C2                    __ptext16 0A8A                    __ptext17 0F48  
                  __ptext18 0ABE                    __ptext19 0BFF          ?_USART_WriteString 0070  
                  _contador 006D               __size_of_main 003F         ??_USART_WriteString 0071  
                _INTCONbits 000B   __end_of_USART_WriteString 0B06                 ??_eval_poly 007C  
                  intlevel1 0000  USART_ReceiveChar@USARTData 0074                   stringcode 0800  
      USART_WriteString@str 0072             _USART_WriteChar 0A82                    stringdir 0800  
                  stringtab 0800                ___aldiv@sign 0199                  _USART_Init 0E0B  
